{
    "collab_server" : "",
    "contents" : "#' @title load BDATpro\n#'\n#' @description\n#' \\code{loadBDAT} imports a dll file which contains a bunch of functions for\n#' modelling different biomass parts.\n#' @param path path to BDATPRO_R.dll which need to be installed on your computer (use 32bit R version). see details\n#' @param fun name of the function as character string(s) which shall be loaded into global environment. see details\n#' @details\n#' \\code{path} default is \\code{\"C:/Program Files (x86)/BDATPRO/R/BDATPRO_R.dll\"} which is the link to installed BDAT on your FVA computer. \\cr\n#' \\code{fun} needs at least one of the following character strings to load a fortran function of BDAT in your global environment: \\cr\n#' \\itemize{\n#'   \\item 'BDATORHX': diameter without bark in height x\n#'   \\item 'BDATMRHX': diameter with bark in height x\n#'   \\item 'BDATVOLABOR': volume without bark between height A und B\n#'   \\item 'BDATVOLABMR': volume with bark between height A und B\n#'   \\item 'BDATRINDE2HX': double bark thickness at height X\n#'   \\item 'BDATHXDX': get height x for given diameter x\n#'   \\item 'V_BDAT20': sort function inclusive fix length\n#' }\n#' @return Returns a fortran function translated in R and loads it into your global environment.\n#' @examples loadBDAT(fun = 'BDATDORHX')\n#' @export\n\n# don't know how to call @useDynLib\n# @useDynLib '/dll/BDATPRO_R.dll'\n\nloadBDAT <- function(fun) {\n\n  load_dll()\n\n  # Funktion laden: Durchmesser ohne Rinde in HÃ¶he x\n  if (\"BDATDORHX\" %in% fun) {\n    .GlobalEnv$BDATDORHX <- function(\n      wBDATBArtNr,\n      wD1,\n      wH1,\n      wD2,\n      wH2,\n      wHges,\n      wHx,\n      wIErr,\n      wDoRHx\n    ) {\n      .C(\"R_BDATDORHX\",\n         as.integer(wBDATBArtNr),\n         as.single(wD1),\n         as.single(wH1),\n         as.single(wD2),\n         as.single(wH2),\n         as.single(wHges),\n         as.single(wHx),\n         as.integer(wIErr),\n         DoRHx = as.single(wDoRHx))$DoRHx\n\n    }\n  }\n\n  # Funktion laden: Durchmesser mit Rinde in HÃ¶he x\n  if (\"BDATDMRHX\" %in% fun) {\n    .GlobalEnv$BDATDMRHX <- function(\n      wBDATBArtNr,\n      wD1,\n      wH1,\n      wD2,\n      wH2,\n      wHges,\n      wHx,\n      wIErr,\n      wDmRHx\n    ) {\n      .C(\"R_BDATDMRHX\",\n         as.integer(wBDATBArtNr),\n         as.single(wD1),\n         as.single(wH1),\n         as.single(wD2),\n         as.single(wH2),\n         as.single(wHges),\n         as.single(wHx),\n         as.integer(wIErr),\n         DmRHx = as.single(wDmRHx))$DmRHx\n    }\n  }\n\n  # Funktion laden: Abschnittsvolumen mit Rinde zwischen HÃ¶he A und B\n  if (\"BDATVOLABMR\" %in% fun) {\n    .GlobalEnv$BDATVOLABMR <- function(\n      wBDATBArtNr,\n      wD1,\n      wH1,\n      wD2,\n      wH2,\n      wHges,\n      wA,\n      wB,\n      wSekLng,\n      wIErr,\n      wVolABmR\n    ){\n      .C(\"R_BDATVOLABMR\",\n         as.integer(wBDATBArtNr),\n         as.single(wD1),\n         as.single(wH1),\n         as.single(wD2),\n         as.single(wH2),\n         as.single(wHges),\n         as.single(wA),\n         as.single(wB),\n         as.single(wSekLng),\n         as.integer(wIErr),\n         VolABmR = as.single(wVolABmR))$VolABmR\n    }\n  }\n\n  # Funktion laden: Abschnittsvolumen ohne Rinde zwischen HÃ¶he A und B\n  if (\"BDATVOLABOR\" %in% fun) {\n    .GlobalEnv$BDATVOLABOR <- function(\n      wBDATBArtNr,\n      wD1,\n      wH1,\n      wD2,\n      wH2,\n      wHges,\n      wA,\n      wB,\n      wSekLng,\n      wIErr,\n      wVolABoR\n    ){\n      .C(\"R_BDATVOLABOR\",\n         as.integer(wBDATBArtNr),\n         as.single(wD1),\n         as.single(wH1),\n         as.single(wD2),\n         as.single(wH2),\n         as.single(wHges),\n         as.single(wA),\n         as.single(wB),\n         as.single(wSekLng),\n         as.integer(wIErr),\n         VolABoR = as.single(wVolABoR))$VolABoR\n    }\n  }\n\n  # Funktion laden: FÃ¼r einen Baum mit den Dimensionsdaten <<D1,H1,D2,H2,H>> wird die\n  #doppelte RindenstÃ¤rke [cm] an der Stelle Hx [m] berechnet.\n  if (\"BDATRINDE2HX\" %in% fun) {\n    .GlobalEnv$BDATRINDE2HX <- function(\n      wBDATBArtNr,\n      wD1,\n      wH1,\n      wD2,\n      wH2,\n      wHges,\n      wHx,\n      wIErr,\n      wRinde2Hx\n    ){\n      .C(\"R_BDATRINDE2HX\",\n         as.integer(wBDATBArtNr),\n         as.single(wD1),\n         as.single(wH1),\n         as.single(wD2),\n         as.single(wH2),\n         as.single(wHges),\n         as.single(wHx),\n         as.integer(wIErr),\n         Rinde2Hx = as.single(wRinde2Hx))$Rinde2Hx\n    }\n  }\n\n\n  # Funktion: HÃ¶he x bei gegebenem Durchmesser Dx iterativ bestimmen\n  if (\"BDATHXDX\" %in% fun) {\n    .GlobalEnv$BDATHXDX <- function(\n      BDATBArtNr,\n      D1,\n      H1,\n      D2,\n      H2,\n      H,\n      Hx,\n      Dx,\n      IFeh\n    ) {\n      .C(\"R_BDATHXDX\",\n         as.integer(BDATBArtNr),\n         as.single(D1),\n         as.single(H1),\n         as.single(D2),\n         as.single(H2),\n         as.single(H),\n         Hx = as.single(Hx),\n         as.single(Dx),\n         as.integer(IFeh))$Hx\n    }\n  }\n\n  # BDAT-Sortierfunktion inkl. FixlÃ¤ngen\n  if (\"V_BDAT20\" %in% fun) {\n    .GlobalEnv$V_BDAT20 <- function(\n      wBDATBArtNr,\n      D1,\n      H1,\n      D2,\n      H2,\n      H,\n      Hx,\n      Hkz,\n      Skz,\n      Az,\n      Hsh,\n      Zsh,\n      Zab,\n      Sokz,\n      FixLngDef,\n      NMaxFixLng\n    )\n    {\n      n = length(wBDATBArtNr)\n      Skl = matrix(rep(1,n*6), ncol=6)\n      Vol = matrix(rep(0,n*7), ncol=7)\n      FixLng = matrix(rep(0,n*180), ncol=180)\n      NFixLng = rep(0,n)\n      iErr = rep(0,n)\n      tmp = .C(\"R_V_BDAT20\",\n               as.integer(n),\n               as.integer(wBDATBArtNr),\n               as.single(D1),\n               as.single(H1),\n               as.single(D2),\n               as.single(H2),\n               as.single(H),\n               as.single(Hx),\n               as.integer(Hkz),\n               as.integer(Skz),\n               as.single(Az),\n               as.single(Hsh),\n               as.single(Zsh),\n               as.single(Zab),\n               as.integer(Sokz),\n               Skl = as.integer(Skl),\n               Volumen = as.single(Vol),\n               iErr = as.integer(iErr),\n               FixLngDef = as.single(FixLngDef),\n               NMaxFixLng = as.integer(NMaxFixLng),\n               FixLng = as.single(FixLng),\n               NFixLng = as.integer(NFixLng))\n      return(list(Skl = matrix(tmp$Skl,ncol=6,byrow=T),\n                  Vol = matrix(tmp$Volumen,ncol=7,byrow=T),\n                  iErr = tmp$iErr,\n                  FixLng = matrix(tmp$FixLng,ncol=180,byrow=T),\n                  NFixLng = tmp$NFixLng))\n    }\n  }\n}\n\n\n",
    "created" : 1516191581034.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "686739452",
    "id" : "7A2BF957",
    "lastKnownWriteTime" : 1512038685,
    "last_content_update" : 1512038685,
    "path" : "H:/FVA-Projekte/P01479_HE_VSB/Programme/Eigenentwicklung/RCode/rBDATPRO/R/loadBDAT.R",
    "project_path" : "R/loadBDAT.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}