{
    "collab_server" : "",
    "contents" : "#' @title BDAT Volume section A to B\n#' @description\n#' Calculates tree's volume beginning from section A to B.\n#' Balk is included.\n#' @param speciesID here comes the description of speciesID...\n#' @param dbh ... and here the one of bhd\n#' @param h ...\n#' @param lh ...\n#' @param uh ...\n#' @param H1 maybe just link to BDAT20 for details of H1, D2, H2, IErr\n#' @param D2 ...\n#' @param H2 ...\n#' @param SecLng section length, default is 0.1m...\n#' @param IErr ...\n#' @param bark logical... is output attr(, \"bark\") really necessary???\n#' @details\n#' maybe some details? e.g. that function is vectorized and therefore one\n#' can simply use a numeric vector as input (not only one number).\n#' But using a numeric vector assumes all vectors need to be from  the same length.\n#' @return\n#' which values will be returned?\n#' @examples\n#' one example would be nice\n#' @export\n\nBDATVolAB <- function(\n  speciesID,\n  dbh,\n  h,\n  lh,\n  uh,\n  H1 = 1.3,\n  D2 = 0,\n  H2 = 0,\n  SecLen = 0.1,\n  IErr = 0,\n  bark = T\n){\n\n  dat <- data.frame(\n    sp = speciesID,\n    dbh = dbh,\n    h = h,\n    lh = lh,\n    uh = uh,\n    H1 = H1,\n    D2 = D2,\n    H2 = H2,\n    SecLen = SecLen,\n    IErr = IErr\n    # wVolABmR = VolABmR,\n    # wVolABoR = VolABoR\n  )\n\n  if (isTRUE(bark)) {\n    volumeS <- sapply(\n      1:nrow(dat),\n      function(a){\n        .Fortran(\n          \"BDATVolABmR\",\n          as.integer(dat$sp[a]),\n          as.single(dat$dbh[a]),\n          as.single(dat$H1[a]),\n          as.single(dat$D2[a]),\n          as.single(dat$H2[a]),\n          as.single(dat$h[a]),\n          as.single(dat$lh[a]),\n          as.single(dat$uh[a]),\n          as.single(dat$SecLen[a]),\n          as.integer(dat$IErr[a]),\n          VolABmR = as.single(0)\n        )$VolABmR\n      }\n    )\n  } else {\n    volumeS <- sapply(\n      1:nrow(dat),\n      function(a){\n        .Fortran(\n          \"BDATVolABoR\",\n          as.integer(dat$sp[a]),\n          as.single(dat$dbh[a]),\n          as.single(dat$H1[a]),\n          as.single(dat$D2[a]),\n          as.single(dat$H2[a]),\n          as.single(dat$h[a]),\n          as.single(dat$lh[a]),\n          as.single(dat$uh[a]),\n          as.single(dat$SecLen[a]),\n          as.integer(dat$IErr[a]),\n          VolABoR = as.single(0)\n        )$VolABoR\n      }\n    )\n  }\n\n  ## there might be equal values in a and b, and the calculated value should be\n  ## zero: BDAT obviously is not able to produce zero --> override such case!\n  volumeS <- ifelse(dat$lh == dat$uh, 0, volumeS)\n  ## add indicator, whether calculated volume includes bark (=> TRUE)\n  attr(volumeS, \"bark\") <- bark # really necessary??\n\n  return(volumeS)\n}\n",
    "created" : 1516199229201.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "4068484490",
    "id" : "ADF016F7",
    "lastKnownWriteTime" : 1516202691,
    "last_content_update" : -2147483648,
    "path" : "H:/FVA-Projekte/P01479_HE_VSB/Programme/Eigenentwicklung/RCode/rBDATPRO/R/BDATVolAB.R",
    "project_path" : "R/BDATVolAB.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}