{
    "collab_server" : "",
    "contents" : "c\t****************************************************************************************\nc\tc:\\kublin\\Schaftform\\BDATPro\\FOR90\\DLL\\BDATpro.dll.For\nc\t****************************************************************************************\nc\nc\t...<<03.11.05>> : ?nderung :.......................................................\nc\nc\tIf (Hsh.gt.0) then\nc\t\twHsh=MIN(Hsh,H,wHAz,wHDHGrz)\nc\telse\nc\t\twHsh=MIN(H,wHAz,wHDHGrz)\nc\tend if\nc\nc\nc\twZsh= xFNBDATDoRHx (BDATBArtNr,D1, H1, D2, H2,\nc\t1\t\t\t\t\t\t\t\tH, wHsh, IErr, wZsh)\nc\t\twZsh=xFNBDATDxFoRu(wZsh)\nc\nc\t\tKontrolle DmoR\nc\t\tHx=xFNBDATHxDxoRFoRu(BDATBArtNr,D1,H1,D2,H2,H,\nc\t2\t\t\t\t\t\t\t\tHx,wZsh,IErr)\nc\nc\t\tif(Zsh.gt.0) then\nc\t\t\tZsh=MIN(Zsh,wZsh)\nc\t\telse\nc\t\t\tZsh=wZsh\nc\t\tend if\nc\nc\t...<<26.10.05>> : ?nderung :.......................................................\nc\nc\t\twHAz = H\nc  \t\tif (Az.gt.0) then\nc \t\t\twHAz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\nc \t2\t\twHAz,Az,IErr)c\nc\t\tend if\nc\nc\t\twHDHGrz = H\nc \t\tif (wDHGrz .gt. 0) then\nc \t\t\twHDHGrz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\nc \t2\t\twHDHGrz,wDHGrz,IErr)\nc\t\telse\nc\t\t\twDHGrz=7\nc \t\t\twHDHGrz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\nc \t2\t\twHDHGrz,wDHGrz,IErr)\nc\t\tend if\nc\nc\t\tHsh=MIN(Hsh,H,wHAz,wHDHGrz)\nc\nc\t\tZsh=MAX(Az,Zsh,wDHGrz)\nc\nc\t...<<16.06.05> : ?nderung :------------------------------------------------------------\n\nc\tif (sthh.gt.0) then\nc\t\tHStHLzEnde = MIN(HStHLzEnde,sthh)\nc\telse\nc\tend if\n\nc\t...<<10.06.05> : ?nderung :------------------------------------------------------------\n\nc\t\tif (FixLngZugPrz*FixLngM>FixLngZugCm)\nc\t1\t\tFixLngZugCm=FixLngZugPrz*FixLngM\n\nc\t----------------------------------------------------------------------------------------\n\nc\t?nderung <<16.06.04>> :------------------------------------------------------------------\n\nc\t(Trennschnitt StammHolz maximal 20m ) ......................................\n\nc     ###################################################################\nc      SUBroutine Sortlb\nc     ###################################################################\n\n\nc     ###################################################################\nc     SUBroutine Sortmi\nc     ###################################################################\n\n\nc\tif (Lsth>20) then\nc\t\tLsth=20\nc\tend if\n\nc\tif (Labsch>20) then\nc\t\tLabsch=20\nc\tend if\n\n\nc\t?nderung <<01.04.04>> :-----------------------------------------------------------------\n\nc     ###################################################################\nc     SUBROUTINE BDAT20(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc     ###################################################################\n\nc\t\tReal*4\t\tA,B,SekLng,VolABmR\n\nc     ###################################################################\nc      SUBroutine Sortlb\nc     ###################################################################\n\nc     IF(ABS(volir).gt.1e-8) THEN\n\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\nc     REAL wH095\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\nc\nc\t  if (h>60) then\nc\t\twH095=60\nc\t  else\nc\t    wH095=H\nc\t  end if\nc\nc       Ba=Ban(iba,1)\nc       Aa=Spline(wH095,Ba,Nxk95a,Xk95a,A95)\nc       Bb=Spline(wH095,Ba,Nxk95b,Xk95b,B95)\nc       D095=Aa+Bb*Du\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n\nc\t?nderung <<15.12.03>> :--------------------------------------------------------------\n\nc      SUBROUTINE BDAT(ibba,Ddu,Hhu,Ddo,Hho,Hoe,Stx,Hkz,Sk,Azopf,\n\nc     if(hu.gt.2.5)ifeh=4\n\nc\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc\tREAL*4 HStockEnde /0/,HStHAnfang /0/,LngStH /0/,HStHLzEnde /0/\n\nc\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\nc\tREAL*4\t\tHStockEnde\nc\tREAL*4\t\tHStHAnfang\nc\tREAL*4\t\tLngStH\nc\tREAL*4\t\tHStHLzEnde\nc\tREAL*4\t\tBDATHGes\n\nc\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\nc\t1\t\t\t\t\t   ,BDATHGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\nc\nc\nc\tLngStH\t= LStH\nc\tHStHAnfang = Hakt\nc\tHStHLzEnde = HAkt\nc\nc\tSuLXLStLz = HAkt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc\t\t\tFixLng(NParFixLng*MMaxFixLng)= SuLXLStLz\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc\t\t?nderung <<29.08.03>> :...schwaches Stangenholz Du < 10 cm --------------------------\n\nc\t\tnoch zu ?ndern\n\nc\t\t################### IH bis AufarbeitungsZopf Rest uvD ###############################\n\nc\t...<<17.09.03>> : ?nderung :............................................................\n\n\nc     ###################################################################\nc      SUBroutine Iter\nc     ###################################################################\n\nc      IF(Sokz.eq.3) then\n\nc\t\tanfit=1\nc\t\tanzit=4\n\nc\t...<<10.05.03>> : ?nderung :............................................................\n\n\nc     ##################################################################\nc      SUBROUTINE BDAT20(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\nc    2\t\t\t\t\tSkl,Vol,Bhd,Ifeh,\nc\t3\t\t\t\t\tFixLngDef,NMaxFixLng,FixLng,NFixLng)\nc     ##################################################################\nc\nc\t\tif\t(BDATBArtNr.gt.14) then\nc\t\t\t\t\t\t\t\t\tHMaxFixLng = Hges*0.7\nc\t\t\telse\t\t\t\t\t\t\t\t\t\t\t! SKZ Nadelholz\nc\t\t\t\t\t\t\t\t\twSkz=0\nc\t\t\t\t\t\t\t\t\tHMaxFixLng=Hges\nc\t\t\tend if\nc\nc\t...<<14.03.03>> : ?nderung :............................................................\n\n\nc     ##################################################################\nc      SUBROUTINE BDAT10(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\nc    2\t\t\t\t\tSkl,Vol,Bhd,Ifeh)\nc     ##################################################################\n\n\nc     ##################################################################\nc      SUBROUTINE xBDAT10(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\nc    2\t\t\t\t\tSkl,Vol,Bhd,Ifeh)\nc     ##################################################################\n\nc\t...<<07.03.03>> : ?nderung :............................................................\n\nc\t***************************************************************************************\nc\tReal*4 Function FNBDATHxDxoR(\tBDATBArtNr,D1,H1,D2,H2,H,\nc\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\nc\t***************************************************************************************\nc\tReal*4 Function FNBDATHxDxoRFoRu(\tBDATBArtNr,D1,H1,D2,H2,H,\nc\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\nc\t***************************************************************************************\nc\tReal*4 Function FNBDATDxFoRu(Dx)\nc\t***************************************************************************************\n\nc\t...<<20.01.03>> : ?nderung :............................................................\n\nc\t****************************************************************************************\nc     SUBROUTINE BDAT20(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc\t****************************************************************************************\n\nc\t****************************************************************************************\nc\tsubroutine xBDATD2H2Trans (\twBDATBArtNr, wD1, wH1, wD2, wH2,wHges)\nc\t****************************************************************************************\n\n\nc\t...<<05.11.02>> : ?nderung :............................................................\nc\nc     IF(Azop.eq.0) THEN\n\n\nc\t?nderung  <<20.09.02>> :----------------------------------------------------------------\nc\nc\tif ((SuVoloR>0).and.(SuVoloR<Vol(1))) then\nc\nc\t?nderung <<10.09.02>> :-----------------------------------------------------------------\nc\nc     ##################################################################\nc      SUBROUTINE BDAT10(\tBDATBArtNr, D1,\tH1, D2, H2, H,\nc\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\nc    2\t\t\t\t\tSkl,Vol,Bhd,Ifeh)\nc     ##################################################################\nc\nc\t?nderungen: <<16.08.02>> :--------------------------------------------------------------\nc\nc \treal*4 function xFNBDATVolDHmR(\tBDATBArtNr, D1, H1, D2, H2,\tHges,\nc\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nc\t----------------------------------------------------------------------------------------\nc\nc\nc\t?nderungen: <<01.07.02>> :--------------------------------------------------------------\nc\nc\tSUBroutine Iter:\tIF(H.lt.22) Volr=Volr*.98\nc\nc\t----------------------------------------------------------------------------------------\nc\nc\tProzeduren:\nc\nc\tglobal:\tBDAT20\nc\nc\t\t\tBDATDmRHx\t\tBDATDoRHx\t\tBDATRinde2Hx\tBDATVolABmR\t\tBDATVolABoR\nc\t\t\tFNBDATDmRHx\t\tFNBDATDoRHx\t\tFNBDATRinde2Hx\tFNBDATVolABmR\tFNBDATVolABoR\nc\nc\t\t\tBDATVolDHmR\nc\t\t\tFNBDATVolDHmR\nc\nc\t\t\tFNBDATHxDx\t\tFNBDATQ03VHDx\nc\nc\t\t\tBDATMwQ03BWI\tBDATPctQ03BWI\tBDATD2H2Trans\nc\t\t\tFNBDATEstQ032\tEQ03ParIni\nc\nc\tlokal:   BDAT (1.0)\nc\nc\t\t\txBDATD2H2Trans\tyFNBDATDmRHx\nc\t\t\txBDATDmRHx\nc\t\t\txBDATDoRHxx\nc\t\t\txFNBDATHxDx\nc\t\t\txFNBDATVolDHmR\nc\nc\t\t\txBDATMwQ03BWI\nc\nc\t\t\t BDATNullStellenSuche\nc\t\t\t BDATNullStellenFkt\nc\nc\nc\nc\t\t\t CDFNORM (NUM)\tCDFNORMInv (NUM)\nc\nc\t----------------------------------------------------------------------------------------\nc\nc\tFormigkeit (D2,H2):\nc\nc\t\tInterpretation (~) der Eingabeparameter D2 und H2 :\nc\nc\t\tD2 > 0\nc\nc\t\t\tD2 (ein) ~ Durchmesserwert\nc\nc\t\t\tH2 > 0\nc\nc\t\t\t\tD2 (aus) = D2 (ein)\nc\t\t\t\tH2 (aus) = H2 (ein)\nc\nc\t\t\tH2 <= 0\nc\nc\t\t\t\tD2 (aus) = D2 (ein)\nc\t\t\t\tH2 (aus) = 7 m (Standardwert BWI)\nc\nc\t\t-1 < D2 < 0\nc\nc\t\t\tFormigkeit: q0.3:= D0.30/D095\nc\nc\t\t\tD2 (ein) ~ - q0.3;\nc\nc\t\t\tD2 (aus) = D2 (ein)\nc\t\t\tH2 (aus) = 0.3*Hges\nc\nc\t\tD2 <= -1\nc\nc\t\t\tFormigkeit: BWI-?quivalenz (MEDIAN q0.3)\nc\nc\t\t\tD2 (aus) = - EST MED [q0.3 |BHD,Hges;BWI]\nc\t\t\tH2 (aus) = 0.3*Hges\nc\nc\t\tD2 = 0\nc\nc\t\t\tD2 ~ ?ber H2 (ein) festlegen\nc\nc\t\t\tH2 <= 0\nc\nc\t\t\t\tFormigkeit: MassenTafel-?quivalenz (BDAT 1.0)\nc\nc\t\t\t\tD2 (aus) = 0\nc\t\t\t\tH2 (aus) = 0\nc\nc\t\t\t0 < H2 < 100\nc\nc\t\t\t\tFormigkeit: BWI-?quivalenz (PCTL q0.3)\nc\nc\t\t\t\tH2 (ein) ~\tPercentilWert * 100\nc\nc\t\t\t\tD2 (aus) =\t- EST PCTL [q0.3 | BHD,Hges,H2(ein);BWI]\nc\t\t\t\tH2 (aus) =\t0.3*Hges\nc\nc\t\t\t100 <= H2\nc\nc\t\t\t\tFormigkeit: BWI-?quivalenz (MEDIAN q0.3)\nc\nc\t\t\t\tD2 (aus) =\t- EST MED [q0.3 |BHD,Hges;BWI]\nc\t\t\t\tH2 (aus) =\t0.3*Hges\nc\nc\t----------------------------------------------------------------------------------------\n\nc     ##################################################################\n      SUBROUTINE BDAT20(\tBDATBArtNr, D1,\tH1, D2, H2, H,\n\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\n     2\t\t\t\t\tSkl,Vol,Bhd,Ifeh,\n     3\t\t\t\t\tFixLngDef,NMaxFixLng,FixLng,NFixLng)\nc     ##################################################################\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDAT20\nc!cdec$ declare\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\tparameter\t(NParFixLngDef=4, NParFixLng=6, MMaxFixLng=30)\n\t\tparameter\t(MFixLng=NParFixLng*MMaxFixLng)\n\t\tparameter\t(StammFussPrz =1)\n\nc  \t\timplicit logical (a-z)\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\nc\t\t?nderung <<03.11.05>> :--------------------------------------------------------------\n\t\tReal*4\t\tDx\n\t\tReal*4\t\tHx\n\t\tInteger*2\tHkz\n\t\tInteger*2\tSkz\n\t\tReal*4\t\tAz\n\t\tReal*4\t\tHsh\n\t\tReal*4\t\tZsh\n\t\tReal*4\t\tZab\n\t\tInteger*2\tSokz\n\t\tInteger*2\tSkl(1:6)\n\t\tReal*4\t\tVol(1:7)\n\t\tReal*4\t\tBhd\n\t\tInteger*2\tIfeh\n\n\t\tReal*4\t\tFixLngDef(1:NParFixLngDef)\n\t\tInteger*2\tNMaxFixLng\n\t\tReal*4\t\tFixLng(1:NParFixLng*MMaxFixLng)\n\t\tInteger*2\tNFixLng\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twH\n\n\t\tReal*4\t\twHx\n\t\tInteger*2\twHkz\n\t\tInteger*2\twSkz\n\t\tReal*4\t\twAz\n\t\tReal*4\t\twHsh\n\t\tReal*4\t\twZsh,wwZsh\n\nc\t\t?nderung <<03.11.05>> :--------------------------------------------------------------\n\n\t\tReal*4\t\twHZsh\n\t\tReal*4\t\twZab\n\t\tInteger*2\twSokz\n\n \t\tInteger*2\twSkl(1:6)\t/6*0/\n \t\tReal*4\t\twVol(1:7)\t/7*0/\n\n\t\tReal*4\t\twBhd\n\t\tInteger*2\twIfeh\n\n\t\tInteger*2\twNMaxFixLng\n\t\tReal*4\t\twFixLng(1:MMaxFixLng, 1:NParFixLng)\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tinteger*2\ti,j,ij, IErr\n\t\treal*4\t\tHges, HDMinFixLng, H0FixLng,H1FixLng,HMaxFixLng\n\t\treal*4      wH0, wL0\n\t\treal*4\t\tDMmR,DMoR,DZmR,DZoR,wDx,VoloR,SuVoloR\n\n\t\treal*4\t\tFixLngZ\t\t\t\t\t\t/7/\n\t\treal*4\t\tFixLngM\t\t\t\t\t\t/2/\n\t\treal*4\t\tFixLngZugPrz\t\t\t\t/0/\n\t\treal*4\t\tFixLngZugCm\t\t\t\t\t/0/\n\n\t\tReal*4\t\tPi\t\t\t\t\t\t\t/3.14159E0/\n\nc\t---------------------------------------------------------------------------------------\n\n\t\treal*4\t\twHAz\t\t\t\t/0/ !   H?he Aufarbeitungszopf\n\t\tReal*4\t\twDHGrz\t\t\t\t/7/\t!\tDerholzGrenze in cm\n\t\tReal*4\t\twHDHGrz\t\t\t\t/0/\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\twSekLng\t\t\t\t/2/ !   SektionsL?ngen VolBerechnung\n\t\tReal*4\t\twVolDHmR\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\n\nc\t---------------------------------------------------------------------------------------\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\tReal*4\t\tA,B,SekLng,VolABmR,VolDHmR\n\t\tReal*4\t\twH0FixLng\n\nc\t---------------------------------------------------------------------------------------\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\tREAL*4\t\tHStockEnde\t/0/\n\t\tREAL*4\t\tHStHAnfang\t/0/\n\t\tREAL*4\t\tLngStH\t\t/0/\n\t\tREAL*4\t\tHStHLzEnde\t/0/\n\t\tREAL*4\t\tHBDATGes\t/0/\n\n\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\n\nc\t...<<26.10.05>> : ?nderung :.......................................................\n\n\t\twHAz = H\n \t\tif (Az.gt.0) then\n \t\t\twHAz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\n \t2\t\twHAz,Az,IErr)\n\t\tend if\n\n\t\twHDHGrz = H\n\n \t\tif (wDHGrz .gt. 0) then\n \t\t\twHDHGrz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\n \t2\t\twHDHGrz,wDHGrz,IErr)\n\t\telse\n\t\t\twDHGrz=7\n \t\t\twHDHGrz = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,\n \t2\t\twHDHGrz,wDHGrz,IErr)\n\t\tend if\n\nc\t...<<03.11.05>> : ?nderung :.......................................................\n\n\t\tIf (Hsh.gt.0) then\n\t\t\twHsh=MIN(Hsh,H,wHAz,wHDHGrz)\n\t\telse\n\t\t\twHsh=MIN(H,wHAz,wHDHGrz)\n\t\tend if\n\n\n\t\twZsh= xFNBDATDoRHx (BDATBArtNr,D1, H1, D2, H2,\n\t1\t\t\t\t\t\t\t\tH, wHsh, IErr, wZsh)\n\nc\t\t?nderung <<05.11.05>> :--------------------------------------------------------------\n\t\twZsh=xFNBDATDxFoRu(wZsh)\n\nc\t\tKontrolle DmoR\nc\t\tHx=xFNBDATHxDxoRFoRu(BDATBArtNr,D1,H1,D2,H2,H,\nc\t2\t\t\t\t\t\t\t\tHx,wZsh,IErr)\n\n \t\tif(Zsh.gt.0) then\n \t\t\twwZsh=MAX(Zsh,wZsh)\n \t\telse\n \t\t\twwZsh=wZsh\n \t\tend if\n\n\nc \t\tZsh=MAX(Az,Zsh,wDHGrz)\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\twBDATBArtNr=BDATBArtNr\n\t\twD1=D1\n\t\twH1=H1\n\t\twD2=D2\n\t\twH2=H2\n\t\twH=H\n\t\twHx=Hx\n\t\twHkz=Hkz\n\t\twSkz=Skz\n\t\twAz=Az\n \t\twHsh=Hsh\n\t\twZsh=wwZsh\n\t\twZab=Zab\n\t\twSokz=Sokz\n\n\t\tFixLngZ=FixLngDef(1)\n\t\tFixLngM=FixLngDef(2)\n\t\tFixLngZugCm=FixLngDef(3)\n\t\tFixLngZugPrz=FixLngDef(4)\n\n\t\tif (FixLngM<2) FixLngM=2\n\nc\t\tif (FixLngZugPrz*0.01*FixLngM*0.01>FixLngZugCm)\nc\t1\t\tFixLngZugCm=FixLngZugPrz*0.01*FixLngM*0.01\n\nc\t...<<10.06.05> : ?nderung :------------------------------------------------------------\n\n\t\tif (FixLngZugPrz*FixLngM>FixLngZugCm)\n\t1\t\tFixLngZugCm=FixLngZugPrz*FixLngM\n\n\t\tdo i=1,6\n\t\t\twSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\twVol(i)=-1\n\t\tend do\n\n\t\tPi\t= 3.14159\n\n\t\twBhd=0\n\t\twIfeh=0\n\nc\t...<<17.01.03>> : ?nderung :------------------------------------------------------------\n\nc\t...StammH?he Hges = H(Hkz) :........................................................\n\n\t\tif (Hkz.eq.1) then\n\t\t\tHges=H+2\n\t\telse if (Hkz.eq.2) then\n\t\t\tif (30.lt.D1) then\n\t\t\t\tHges=30+(D1-30)*0.3\n\t\t\telse\n\t\t\t\tHges=D1\n\t\t\tend if\n\t\t\tif (H.gt.Hges-3) Hges=H+4\n\t\telse\n\t\t\tHges=H\n\t\tend if\n\n\t\tHBDATGes=Hges\n\t\tHStockEnde=Hges*StammFussPrz*0.01\n\t\tHStockEnde=MIN(HStockEnde,H)\n\nc\t\tBDAT 1.0 - X-Holz:------------------------------------------------------------------\n\nc\t...<<17.01.03>> : ?nderung :------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (wBDATBArtNr,wD1,wH1,wD2,wH2,Hges)\nc\t\tcall xBDATD2H2Trans (wBDATBArtNr,wD1,wH1,wD2,wH2,wH)\n\nc\t\twrite (*,*)\nc \t\twrite (*,*) \" BDAT2.0 --> BDAT (X-Holz):\"\nc \t\twrite (*,*)\n\n\t\tCall BDAT(\twBDATBArtNr,wD1,wH1,wD2,wH2,wH,wHx,wHkz,\n\t1\t\t\t\twSkz,wAz,wHsh,wZsh,wZab,wSokz,\n\t2\t\t\t\twSkl(1),wVol(1),wBhd,wIfeh)\n\nc\t\tX-HolzVolumen (Efm oR) :.............................................................\n\n\t\tVol(2)\t= wVol(2)\n\t\tSkl(1)\t= wSkl(1)\n\t\tSkl(2)\t= wSkl(2)\n\n\t\tBHD\t\t= wBHD\n\n\t\tIfeh\t= wIfeh\n\n\t\tSuVoloR = Vol(2)\n\nc\t\t?nderung <<16.08.02>> :--------------------------------------------------------------\n\nc\t\tDerbHolzVolumen (Vfm mR) :...........................................................\n\nc\t\tVol(1)\t= wVol(1)\nc\t\tvol(1)  = xFNBDATVolDHmR(wBDATBArtNr,wD1,wH1,wD2,wH2,wH,\nc\t\t\t\t\t\t\twDHGrz,wHDHGrz,wSekLng,wIfeh,wVolDHmR)\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\twHDHGrz\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\twHDHGrz,wDHGrz,IErr)\n\t\twHDHGrz\t= MIN(wHDHGrz,H)\n\n\t\tA=0\n\t\tB=wHDHGrz\n\t\tSekLng=2\n\n\t\tVolDHmR = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\t\t\t\t\t\t\tA,B,SekLng,IErr,VolABmR)\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\nc \t\tvol(1)  = xFNBDATVolDHmR(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\nc\t2\t\t\t\t\t\t\twDHGrz,wHDHGrz,wSekLng,wIfeh,wVolDHmR)\n\n\t\tvol(1) = VolDHmR\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\tif((0<Ifeh).and.(Ifeh<5)) return\n\nc\t\tBDAT 2.0 - FixL?ngen:---------------------------------------------------------------\n\n\t\twBDATBArtNr=BDATBArtNr\n\t\twD1=D1\n\t\twH1=H1\n\t\twD2=D2\n\t\twH2=H2\n\t\twH=H\n\t\twHx=Hx\n\t\twHkz=Hkz\n\t\twSkz=Skz\n\t\twAz=Az\n\t\twHsh=Hsh\n\nc\t\t?nderung <<05.11.05>> :--------------------------------------------------------------\n\t\twZsh=wwZsh\n\t\twZab=Zab\n\t\twSokz=Sokz\n\n\t\tdo i=1,6\n\t\t\twSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\twVol(i)=-1\n\t\tend do\n\n\t\twBhd=0\n\t\twIfeh=0\n\n\t\tdo i=1,MMaxFixLng\n\t\t\tdo j=1,NParFixLng\n\t\t\t\twFixLng(i,j)=0\n\t\t\tend do\n\t\tend do\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc\t\t...Aufarbeitungsgrenze HFixLngMax  = H( Hges, Skz) ! Hges bei Bruchh?hen falsch:....\n\n\t\tif\t\t(Skz.eq.0) then\n\t\t\t\t\t\t\t\t\tHMaxFixLng=H\n\t\telseif\t(Skz.eq.1) then\n\nc\t...<<10.05.03>> : ?nderung :............................................................\n\n\t\t\tif\t(BDATBArtNr.gt.14) then\n\t\t\t\t\t\t\t\t\tHMaxFixLng = H*0.7\n\t\t\telse\t\t\t\t\t\t\t\t\t\t\t! SKZ Nadelholz\n\t\t\t\t\t\t\t\t\tSkz=0\n\t\t\t\t\t\t\t\t\tHMaxFixLng=H\n\t\t\tend if\n\n\t\telse if (Skz.eq.2) then\n\t\t\t\t\t\t\t\t\tHMaxFixLng = 5\n\t\telse if (Skz.eq.3) then\n\t\t\t\t\t\t\t\t\tHMaxFixLng = 0\n\t\telse if (Skz.eq.4) then\n\t\t\t\t\t\t\t\t\tHMaxFixLng = H\n\t\telse\n\t\t\t\t\t\t\t\t\tHMaxFixLng = 0\n\t\tend if\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc\t\t...Fixl?ngenaushaltung nur im Stammholzbereich :...............................\n\n\t\tif ((wHsh>0).and.(HMaxFixLng>wHsh)) then\n\t\t\tHMaxFixLng=wHsh\n\t\tend if\n\n\t\twNMaxFixLng=NMaxFixLng\n\n\t\tif (wNMaxFixLng<0) wNMaxFixLng=0\n\t\tif (MMaxFixLng<wNMaxFixLng) wNMaxFixLng=MMaxFixLng\n\n\t\tNFixLng=0\n\t\tH0FixLng\t= 0\n\t\twH0FixLng\t= Hges*StammFussPrz*0.01 + Hx\n\n\t\tDo\n\t\tif ((wNMaxFixLng<=NFixLng).or.(HMaxFixLng<=wH0FixLng))\n\t1\tgoto 100\n\n \t\t\twHx = wH0FixLng\n\t1\t\t\t+ FixLngM\n\t2\t\t\t+ FixLngZugCm*0.01\n\n\nc\t\t\twHx = wH0FixLng\nc\t1\t\t\t+ FixLngM\nc\t2\t\t\t+ FixLngZugCm\nc\n\n\t\tif (HMaxFixLng<wHx)\n\t1\tgoto 100\n\n\t\t\twHx = wH0FixLng+FixLngM\n\nc\t\t\t...Zopfdurchmesser o.R. (stat. Erwartungswert gerundet) pr?fen :................\n\n\t\t\tDZoR=xFNBDATDoRHx(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\n\t1\t\t\t\t\t\twHx, iErr,DZoR)\n\n\t\t\tDZoR=DZoR - 0.5\n\n\t\tif (DZoR<FixLngZ)\n\t1\tgoto 100\n\nc\t\t...Fixl?ngenaushaltung nur im Stammholzbereich :...............................\n\n\t\tif ((wZsh>0).and.(DZoR<wZsh))\n\t1\tgoto 100\n\n\t\t\tNFixLng = NFixLng + 1\n\nc\t\t\t...MittenDurchmesser o.R. Fixl?nge (stat. Erwartungswert gerundet) :............\n\n\t\t\twHx = wH0FixLng+FixLngM*0.5\n\n\t\t\tDMoR=xFNBDATDoRHx(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\n\t1\t\t\t\t\t\twHx, iErr,DMoR)\n\n\t\t\tif (DMoR<20) then\n\t\t\t\tDMoR=DMoR-0.5\n\t\t\telse\n\t\t\t\tDMoR=DMoR-0.75\n\t\t\tend if\n\nc\t\t\t...Volumen o.R. Fixl?nge (stat. Erwartungswert gerundet) :......................\n\n\t\t\twDx = DMoR * 0.01\n\t\t\tVoloR = Pi * 0.25 * wDx * wDx * FixLngM\n\nc\t\t\t--------------------------------------------------------------------------------\n\t\t\twFixLng(NFixLng,1)\t= NFixLng\n\t\t\twFixLng(NFixLng,2)\t= wH0FixLng\n\t\t\twFixLng(NFixLng,3)\t= FixLngM\n\t\t\twFixLng(NFixLng,4)\t= DMoR\n\t\t\twFixLng(NFixLng,5)\t= DZoR\n\t\t\twFixLng(NFixLng,6)\t= VoloR\nc\t\t\t--------------------------------------------------------------------------------\n\n\t\t\twH0FixLng\t= wH0FixLng\n\t1\t\t\t\t\t+ FixLngM\n     2\t\t\t\t\t+ FixLngZugCm*0.01\n\t\t\tH0FixLng\t= H0FixLng\n\t1\t\t\t\t\t+ FixLngM\n     2\t\t\t\t\t+ FixLngZugCm*0.01\n\n\t\t\tSuVoloR\t\t\t\t= SuVoloR + VoloR\n\n\t\tend do\n100\t\tcontinue\n\n \t\tij=0\n\t\tdo i=1,MMaxFixLng\n\t\t\tdo j=1,NParFixLng\n\t\t\t\tij=ij+1\n\t\t\t\tFixLng(ij)=wFixLng(i,j)\n\t\t\tend do\n\t\tend do\n\nc\t\tBDAT 1.0 - Sortierung StammHolz IndustrieHolz :-------------------------------------\n\n\t\twBDATBArtNr=BDATBArtNr\n\t\twD1=D1\n\t\twH1=H1\n\t\twD2=D2\n\t\twH2=H2\n\t\twH=H\n\t\twHx=Hx + H0FixLng\n\t\twHkz=Hkz\n\t\twSkz=Skz\n\t\twAz=Az\n\t\twHsh=Hsh\n\t\twZsh=wwZsh\n\t\twZab=Zab\n\t\twSokz=Sokz\n\n\t\tdo i=1,6\n\t\t\twSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\twVol(1:7)=0\n\t\tend do\n\n\t\twBhd=0\n\t\twIfeh=0\n\n\t\tcall xBDATD2H2Trans (wBDATBArtNr,wD1,wH1,wD2,wH2,Hges)\n\n\t\twIFeh=0\n\nc\t\t?nderung <<17.01.03>> :...schwaches Stangenholz Du < 10 cm --------------------------\n\nc\t\t\t...MittenDurchmesser o.R. Fixl?nge (stat. Erwartungswert gerundet) :............\n\n\t\tif (wD1 < 10) then\n\n \t\t\twH0\t= Hges*StammFussPrz*0.01 + wHx\n\n\t\t\tif(wH0>H) wH0=H\n\nc\t\t\t<<18.09.03>> : ?nderung :.......................................................\n\nc\t\t\tFixLng(NParFixLng*MMaxFixLng)= HStHLzEnde\n\nc\t\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc \t\t\twHDHGrz\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,Hges,\nc \t2\t\twHDHGrz,wDHGrz,IErr)\n\nc\t\t\t?nderung <<01.04.04>> :----------------------------------------------------\n\n\t\t\twHDHGrz\t= xFNBDATHxDx(BDATBArtNr,wD1,wH1,wD2,wH2,Hges,\n\t2\t\twHDHGrz,wDHGrz,IErr)\n\n\t\t\twHDHGrz\t= MIN(wHDHGrz,H)\n\nc\t\t\t?nderung <<22.09.03>> :----------------------------------------------------\n\nc\t \t\t<<20.01.03>> : ?nderung :..................................................\n\n\t\t\twL0 = (wHDHGrz-wH0)\n\n\t\t\tif(wL0>wHDHGrz) wL0=wHDHGrz\n\t\t\tif(wL0<0) wL0=0\n\n\t\t\twHx = wH0+wL0*0.5\n\n\t\t\tif (wHx>H) wHx=H\n\n\t\t\tDMoR=xFNBDATDoRHx(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\n\t1\t\t\t\t\t\t\twHx, iErr,DMoR)\n\n\t\t\tif (DMoR<20) then\n\t\t\t\tDMoR=DMoR-0.5\n\t\t\telse\n\t\t\t\tDMoR=DMoR-0.75\n\t\t\tend if\n\n\t\t\twDx = DMoR * 0.01\n\t\t\tVoloR = Pi * 0.25 * wDx * wDx * wL0\n\n\t\t\tdo i=3,6\n\t\t\t\tSkl(i)=0\n\t\t\tend do\n\n\t\t\tdo i=3,7\n\t\t\t\tVol(i)=0\n\t\t\tend do\n\n\t\t\tif (VoloR>(Vol(1)-SuVoloR)) VoloR = Vol(1)-SuVoloR\n\n\t\t\tif (wSokz > 0) then\n\n\t\t\t\tSuVoloR = SuVoloR+VoloR\n\t\t\t\tvol(5)=VoloR\n\n\t\t\telse\n\t\t\t\tvol(5)=0\n\t\t\tend if\n\n\t\t\tvol(7) = Vol(1) - SuVoloR\n\n\t\t\tRETURN\n\n\t\tend if\n\nc\t\t?nderung <<17.01.03>> :--------------------------------------------------------\n\nc\t\t------------------------------------------------\nc \t\twrite (*,*)\nc\t\twrite (*,*) \" VOL(5): \", VOL(5)\nc \t\twrite (*,*) \" BDAT2.0 --> BDAT (Sortierung):\"\nc \t\twrite (*,*)\nc\t\t------------------------------------------------\n\n\n\t\tCall BDAT(\twBDATBArtNr,wD1,wH1,wD2,wH2,wH,wHx,wHkz,\n\t1\t\t\t\twSkz,wAz,wHsh,wZsh,wZab,wSokz,\n\t2\t\t\t\twSkl(1),wVol(1),wBhd,wIfeh)\n\nc\t\t------------------------------------------------\nc \t\twrite (*,*) \" BDAT --> BDAT2.0 (Sortierung):\"\nc\t\twrite (*,*) \" VOL(5): \", wVOL(5)\nc\t\t------------------------------------------------\n\n\t\tdo i=3,6\n\t\t\tSkl(i)=wSkl(i)\n\t\t\tVol(i)=wVol(i)\n\t\t\tSuVoloR\t= SuVoloR + Vol(i)\n\t\tend do\n\nc\t?nderung  <<20.09.02>> :----------------------------------------------------------------\n\n\t\tif ((SuVoloR>0).and.(SuVoloR<Vol(1))) then\n\t\t\tVol(7) = Vol(1)-SuVoloR\n\t\t\tif (Vol(7)<0) Vol(7)=0\n\t\telse\n\t\t\tVol(7) = 0\n\t\tend if\n\n\t\tIfeh\t= wIfeh\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc\tFixLng(NParFixLng*MMaxFixLng)= HStHLzEnde\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n      END SUBROUTINE BDAT20\n\n\nc     ##################################################################\n      SUBROUTINE BDAT10(\tBDATBArtNr, D1,\tH1, D2, H2, H,\n\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\n     2\t\t\t\t\tSkl,Vol,Bhd,Ifeh)\nc     ##################################################################\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc\t...<<14.03.03>> : ?nderung :............................................................\n\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDAT10\n\n\t\tparameter\t(StammFussPrz =1)\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tInteger*2\tHkz\n\t\tInteger*2\tSkz\n\t\tReal*4\t\tAz\n\t\tReal*4\t\tHsh\n\t\tReal*4\t\tZsh\n\t\tReal*4\t\tZab\n\t\tInteger*2\tSokz\n\t\tInteger*2\tSkl(1:6)\n\t\tReal*4\t\tVol(1:7)\n\t\tReal*4\t\tBhd\n\t\tInteger*2\tIfeh\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twH\n\t\tReal*4\t\twHx\n\t\tInteger*2\twHkz\n\t\tInteger*2\twSkz\n\t\tReal*4\t\twAz\n\t\tReal*4\t\twHsh\n\t\tReal*4\t\twZsh\n\t\tReal*4\t\twZab\n\t\tInteger*2\twSokz\n\t\tInteger*2\twSkl(1:6)\n\t\tReal*4\t\twVol(1:7)\n\t\tReal*4\t\twBhd\n\t\tInteger*2\twIfeh\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tinteger*2\ti,ij, IErr\n\t\treal*4\t\tHges, HDMinFixLng, H0FixLng,H1FixLng,HMaxFixLng\n\t\treal*4      wH0, wL0\n\t\treal*4\t\tDMmR,DMoR,DZmR,DZoR,wDx,VoloR,SuVoloR\n\n\t\tReal*4\t\tPi\t\t\t\t\t\t\t/3.14159E0/\n\nc\t---------------------------------------------------------------------------------------\n\n\t\tReal*4\t\twDHGrz\t\t\t\t/7/\t!\tDerholzGrenze in cm\n\t\tReal*4\t\twHDHGrz\t\t\t\t\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\twSekLng\t\t\t\t/2/ !   SektionsL?ngen VolBerechnung\n\t\tReal*4\t\twVolDHmR\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\n\nc\t---------------------------------------------------------------------------------------\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\tREAL*4\t\tHStockEnde\n\t\tREAL*4\t\tHStHAnfang\n\t\tREAL*4\t\tLngStH\n\t\tREAL*4\t\tHStHLzEnde\n\t\tREAL*4\t\tHBDATGes\n\n\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\twBDATBArtNr=BDATBArtNr\n\t\twD1=D1\n\t\twH1=H1\n\t\twD2=D2\n\t\twH2=H2\n\t\twH=H\n\t\twHx=Hx\n\t\twHkz=Hkz\n\t\twSkz=Skz\n\t\twAz=Az\n\t\twHsh=Hsh\n\t\twZsh=Zsh\n\t\twZab=Zab\n\t\twSokz=Sokz\n\n\t\tdo i=1,6\n\t\t\twSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\twVol(i)=-1\n\t\tend do\n\n\t\tPi\t= 3.14159\n\n\t\twBhd=0\n\t\twIfeh=0\n\nc\t...<<17.01.03>> : ?nderung :------------------------------------------------------------\n\nc\t...StammH?he Hges = H(Hkz) :........................................................\n\n\t\tif (Hkz.eq.1) then\n\t\t\tHges=H+2\n\t\telse if (Hkz.eq.2) then\n\t\t\tif (30.lt.D1) then\n\t\t\t\tHges=30+(D1-30)*0.3\n\t\t\telse\n\t\t\t\tHges=D1\n\t\t\tend if\n\t\t\tif (H.gt.Hges-3) Hges=H+4\n\t\telse\n\t\t\tHges=H\n\t\tend if\n\n\t\tHBDATGes=Hges\n\t\tHStockEnde=Hges*StammFussPrz*0.01\n\t\tHStockEnde=MIN(HStockEnde,H)\n\nc\t\tBDAT 1.0 - X-Holz:------------------------------------------------------------------\n\nc\t...<<17.01.03>> : ?nderung :------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (wBDATBArtNr,wD1,wH1,wD2,wH2,Hges)\n\n\t\tCall BDAT(\twBDATBArtNr,wD1,wH1,wD2,wH2,wH,wHx,wHkz,\n\t1\t\t\t\twSkz,wAz,wHsh,wZsh,wZab,wSokz,\n\t2\t\t\t\twSkl(1),wVol(1),wBhd,wIfeh)\n\nc\t\tX-HolzVolumen (Efm oR) :.............................................................\n\n\t\tVol(2)\t= wVol(2)\n\t\tSkl(1)\t= wSkl(1)\n\t\tSkl(2)\t= wSkl(2)\n\n\t\tBHD\t\t= wBHD\n\n\t\tIfeh\t= wIfeh\n\n\t\tSuVoloR = Vol(2)\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\nc \t\tvol(1)  = xFNBDATVolDHmR(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\nc\t2\t\t\t\t\t\t\twDHGrz,wHDHGrz,wSekLng,wIfeh,wVolDHmR)\n\t\tDx=wDHGrz\n\n\t\twHDHGrz\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\twHDHGrz,wDHGrz,IErr)\n\t\twHDHGrz\t= MIN(wHDHGrz,H)\n\n\t\tA=0\n\t\tB=wHDHGrz\n\t\tSekLng=2\n\n\t\tVolDHmR = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\t\t\t\t\t\t\tA,B,SekLng,IErr,VolABmR)\n\t\tvol(1)  = VolDHmR\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\tif((0<Ifeh).and.(Ifeh<5)) return\n\nc\t\tBDAT 1.0 - Sortierung StammHolz IndustrieHolz :-------------------------------------\n\n\t\twBDATBArtNr=BDATBArtNr\n\t\twD1=D1\n\t\twH1=H1\n\t\twD2=D2\n\t\twH2=H2\n\t\twH=H\n\t\twHx=Hx\n\t\twHkz=Hkz\n\t\twSkz=Skz\n\t\twAz=Az\n\t\twHsh=Hsh\n\t\twZsh=Zsh\n\t\twZab=Zab\n\t\twSokz=Sokz\n\n\t\tdo i=1,6\n\t\t\twSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\twVol(1:7)=0\n\t\tend do\n\n\t\twBhd=0\n\t\twIfeh=0\n\n\t\tcall xBDATD2H2Trans (wBDATBArtNr,wD1,wH1,wD2,wH2,Hges)\n\n\t\twIFeh=0\n\nc\t\t?nderung <<17.01.03>> :...schwaches Stangenholz Du < 10 cm --------------------------\n\n\nc\t\t?nderung <<29.08.03>> :...schwaches Stangenholz Du < 10 cm --------------------------\n\n\n\nc\t\t################### IH bis AufarbeitungsZopf Rest uvD ###############################\n\n\nc\t\t\t...MittenDurchmesser o.R. Fixl?nge (stat. Erwartungswert gerundet) :............\n\n\nc\t\t?nderung <<22.09.03>> :...schwaches Stangenholz Du < 10 cm --------------------------\n\n\t\twHDHGrz\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\twHDHGrz,wDHGrz,IErr)\n\t\twHDHGrz\t= MIN(wHDHGrz,H)\n\nc\t\t?nderung <<22.09.03>> :--------------------------------------------------------------\n\n\t\tif (wD1 < 10) then\n\n \t\t\twH0\t= Hges*StammFussPrz*0.01 + wHx\n\n\t\t\tif(wH0>H) wH0=H\n\nc\t...<<20.01.03>> : ?nderung :............................................................\n\n\t\t\twL0 = (wHDHGrz-wH0)\n\n\t\t\tif(wL0>wHDHGrz) wL0=wHDHGrz\n\t\t\tif(wL0<0) wL0=0\n\n\t\t\twHx = wH0+wL0*0.5\n\n\t\t\tif (wHx>H) wHx=H\n\n\t\t\tDMoR=xFNBDATDoRHx(wBDATBArtNr,wD1,wH1,wD2,wH2,Hges,\n\t1\t\t\t\t\t\t\twHx, iErr,DMoR)\n\n\t\t\tif (DMoR<20) then\n\t\t\t\tDMoR=DMoR-0.5\n\t\t\telse\n\t\t\t\tDMoR=DMoR-0.75\n\t\t\tend if\n\n\t\t\twDx = DMoR * 0.01\n\t\t\tVoloR = Pi * 0.25 * wDx * wDx * wL0\n\n\t\t\tdo i=3,6\n\t\t\t\tSkl(i)=0\n\t\t\tend do\n\n\t\t\tdo i=3,7\n\t\t\t\tVol(i)=0\n\t\t\tend do\n\n\t\t\tif (VoloR>(Vol(1)-SuVoloR)) VoloR = Vol(1)-SuVoloR\n\n\t\t\tif (wSokz > 0) then\n\n\t\t\t\tSuVoloR = SuVoloR+VoloR\n\t\t\t\tvol(5)=VoloR\n\n\t\t\telse\n\t\t\t\tvol(5)=0\n\t\t\tend if\n\n\t\t\tvol(7) = Vol(1) - SuVoloR\n\n\t\t\tRETURN\n\n\t\tend if\n\nc\t\t?nderung <<17.01.03>> :--------------------------------------------------------------\n\n\t\tCall BDAT(\twBDATBArtNr,wD1,wH1,wD2,wH2,wH,wHx,wHkz,\n\t1\t\t\t\twSkz,wAz,wHsh,wZsh,wZab,wSokz,\n\t2\t\t\t\twSkl(1),wVol(1),wBhd,wIfeh)\n\n\t\tdo i=3,6\n\t\t\tSkl(i)=wSkl(i)\n\t\t\tVol(i)=wVol(i)\n\t\t\tSuVoloR\t= SuVoloR + Vol(i)\n\t\tend do\n\nc\t?nderung  <<20.09.02>> :----------------------------------------------------------------\n\n\t\tif ((SuVoloR>0).and.(SuVoloR<Vol(1))) then\n\t\t\tVol(7) = Vol(1)-SuVoloR\n\t\t\tif (Vol(7)<0) Vol(7)=0\n\t\telse\n\t\t\tVol(7) = 0\n\t\tend if\n\n\t\tIfeh\t= wIfeh\n\n      END SUBROUTINE BDAT10\n\n\nc\t?nderung <<04.09.02>> :-----------------------------------------------------------------\n\n\nc     ##################################################################\n      SUBROUTINE xBDAT10(\tBDATBArtNr, D1,\tH1, D2, H2, H,\n\t1\t\t\t\t\tHx, Hkz, Skz, Az, Hsh, Zsh, Zab, Sokz,\n     2\t\t\t\t\tSkl,Vol,Bhd,Ifeh)\nc     ##################################################################\n\nc\t...<<14.03.03>> : ?nderung :............................................................\n\nc!dec$ ATTRIBUTES  DLLEXPORT :: xBDAT10\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tInteger*2\tHkz\n\t\tInteger*2\tSkz\n\t\tReal*4\t\tAz\n\t\tReal*4\t\tHsh\n\t\tReal*4\t\tZsh\n\t\tReal*4\t\tZab\n\t\tInteger*2\tSokz\n\t\tInteger*2\tSkl(1:6)\n\t\tReal*4\t\tVol(1:7)\n\t\tReal*4\t\tBhd\n\t\tInteger*2\tIfeh\n\nc     ----------------------------------------------------------------------------------------\n\t\tReal*4\t\tDHGrz\t\t\t\t/7/\t!\tDerholzGrenze in cm\n\t\tReal*4\t\tHDHGrz\t\t\t\t\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\tSekLng\t\t\t\t/2/ !   SektionsL?ngen VolBerechnung\n\t\tReal*4\t\tVolDHmR\t\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\nc\t----------------------------------------------------------------------------------------\n\t\tReal*4\t\tSuVoloR\nc\t----------------------------------------------------------------------------------------\n\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\tREAL*4\t\tHStockEnde\n\t\tREAL*4\t\tHStHAnfang\n\t\tREAL*4\t\tLngStH\n\t\tREAL*4\t\tHStHLzEnde\n\t\tREAL*4\t\tHBDATGes\n\n\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\t\tdo i=1,6\n\t\t\tSkl(i)=0\n\t\tend do\n\t\tdo i=1,7\n\t\t\tVol(1:7)=0\n\t\tend do\n\n\t\tBhd=0\n\t\tIfeh=0\n\nc\t...?nderung <<10.09.02>> :..............................................................\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,H)\n\n\t\tCall BDAT(\tBDATBArtNr,D1,H1,D2,H2,H,Hx,Hkz,\n\t1\t\t\t\tSkz,Az,Hsh,Zsh,Zab,Sokz,\n\t2\t\t\t\tSkl(1),Vol(1),Bhd,Ifeh)\n\n\t \tvol(1)  = xFNBDATVolDHmR(BDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\tDHGrz,HDHGrz,SekLng,Ifeh,VolDHmR)\n\nc \t\t-------------------------------------------------------------------------------------\n\n\t\tSuVoloR = Vol(2)\n\n\t\tdo i=3,6\n\t\t\tSuVoloR\t= SuVoloR + Vol(i)\n\t\tend do\n\nc\t?nderung  <<20.09.02>> :----------------------------------------------------------------\n\n\t\tif ((SuVoloR>0) .and. (SuVoloR<Vol(1))) then\n\t\t\tVol(7)=Vol(1)-SuVoloR\n\t\t\tif (Vol(7)<0) Vol(7)=0\n\t\telse\n\t\t\tVol(7) = 0\n\t\tend if\n\nc\t\tVol(7)=Vol(1)-SuVoloR\nc\nc\t\tif (Vol(7)<0) Vol(7)=0\n\n\tEND SUBROUTINE xBDAT10\n\n\n\nc\t****************************************************************************************\n \tsubroutine BDATVolDHmR(\tBDATBArtNr, D1, H1, D2, H2,\tHges,\n\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATVolDHmR\n\nc\tDerbholzvolumen zu gegebenem DerbholzGrenzDurchmesser :.................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tDHGrz\t\t\t\t\t!\tDerholzGrenze in cm\n\t\tReal*4\t\tHDHGrz\t\t\t\t\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\tSekLng\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tVolDHmR\t\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\n\nC\t-----------------------------------------------------------------------------------------\n\t\tVolDHmR = xFNBDATVolDHmR(BDATBArtNr, D1, H1, D2, H2,Hges,\n\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nC\t-----------------------------------------------------------------------------------------\n\n\tend subroutine BDATVolDHmR\n\n\nc\t****************************************************************************************\n \treal*4 function FNBDATVolDHmR(\tBDATBArtNr, D1, H1, D2, H2,\tHges,\n\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATVolDHmR\n\nc\tDerbholzvolumen zu gegebenem DerbholzGrenzDurchmesser :.................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tDHGrz\t\t\t\t\t!\tDerholzGrenze in cm\n\t\tReal*4\t\tHDHGrz\t\t\t\t\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\tSekLng\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tVolDHmR\t\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\n\n\t\treal*4\t\tDx,Hx,A,B,VolABmR\n\nc\t----------------------------------------------------------------------------------------\n\t\tVolDHmR = xFNBDATVolDHmR(BDATBArtNr, D1, H1, D2, H2,Hges,\n\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nc\t----------------------------------------------------------------------------------------\n\n\t\tFNBDATVolDHmR=VolDHmR\n\n\tend function FNBDATVolDHmR\n\n\nc\t****************************************************************************************\n \treal*4 function xFNBDATVolDHmR(\tBDATBArtNr, D1, H1, D2, H2,\tHges,\n\t2\t\t\t\t\t\tDHGrz, HDHGrz, SekLng, IErr,VolDHmR)\nc\t****************************************************************************************\n\nc\tDerbholzvolumen zu gegebenem DerbholzGrenzDurchmesser :.................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tDHGrz\t\t\t\t\t!\tDerholzGrenze in cm\n\t\tReal*4\t\tHDHGrz\t\t\t\t\t!\tH?he der DerbHolzGrenze (aus)\n\t\treal*4\t\tSekLng\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tVolDHmR\t\t\t\t\t!\tVolumenDerbHolz\t\t(aus)\n\n\t\treal*4\t\tDx,Hx,A,B,VolABmR\n\nc\t-----------------------------------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\n\t\tDx=DHGrz\n\t\tHDHGrz= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,Hges,Hx,Dx,IErr)\n\n\t\tA=0\n\t\tB=HDHGrz\n\t\tSekLng=2\n\n\t\tVolDHmR = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,Hges,\n\t2\t\t\t\t\t\t\tA,B,SekLng,IErr,VolABmR)\n\n\t\txFNBDATVolDHmR=VolDHmR\n\n\tend function xFNBDATVolDHmR\n\n\nc\t****************************************************************************************\n \tsubroutine BDATVolABmR(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wA, wB, wSekLng, wIErr,\n     2\t\t\t\t\t\twVolABmR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATVolABmR\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung\nc\t\tin Form von Walzen der L?nge SekLng.\n\nc\t\tInteger*2\tBDATBArtNr\t-\tBDATBaumArtSchl?ssel\nc\t\tReal*4\t\tD1\t\t\t\t-\tDurchmesser (cm) in H?he wH1 (wH1 = 0 : H1 = 1.3 m)\nc\t\tReal*4\t\tH1\t\t\t\t-\tH?he (m) Durchmesser 1 (0: wH1 = 1.3)\nc\t\tReal*4\t\tD2\t\t\t\t-\tDurchmesser(cm) in H?he wH2 (vgl. BDAT)\nc\t\tReal*4\t\tH2\t\t\t\t-\tH?he (m) Durchmesser 2 (0: wH2 = 7.0)\nc\t\tReal*4\t\tHges\t\t\t-\tStammh?he (m)\nc\t\tReal*4\t\tA\t\t\t\t-\tAbschnittsanfang (m) f?r die Voluminierung\nc\t\tReal*4\t\tB\t\t\t\t-\tAbschnittsende (m) f?r die Voluminierung\nc\t\tReal*4\t\tSekLng\t\t\t-\tSektionsl?nge (m)\nc\t\tInteger*2\tIErr\t\t\t-\tFehlerindikator\nc\t\tReal*4\t\tVolABmR\t\t-\tAbschnittsvolumen (m?) in Rinde\n\n \t\tInteger*2\twBDATBArtNr\n \t\tReal*4\t\twD1\n \t\tReal*4\t\twH1\n \t\tReal*4\t\twD2\n \t\tReal*4\t\twH2\n \t\tReal*4\t\twHges\n \t\tReal*4\t\twA\n \t\tReal*4\t\twB\n \t\tReal*4\t\twSekLng\n \t\tInteger*2\twIErr\n \t\tReal*4\t\twVolABmR\n\nc\t----------------------------------------------------------------------------------------\n\t\twVolABmR = xFNBDATVolABmR(\twBDATBArtNr,wD1,wH1,wD2,wH2,wHges,\n     2\t\t\t\t\t\t\t\twA, wB, wSekLng,wIErr, wVolABmR)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Subroutine BDATVolABmR\n\n\nc\t****************************************************************************************\n\treal*4 Function FNBDATVolABmR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABmR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATVolABmR\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung in\nc\t\tForm von Walzen der L?nge SekLng.\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twA\n\t\tReal*4\t\twB\n\t\tReal*4\t\twSekLng\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twVolABmR\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATVolABmR = xFNBDATVolABmR(\twBDATBArtNr,wD1,wH1,wD2,wH2,\n     2\t\t\t\t\t\twHges,wA, wB, wSekLng,wIErr, wVolABmR)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Function FNBDATVolABmR\n\n\nc\t****************************************************************************************\n\treal*4 Function xFNBDATVolABmR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABmR)\nc\t****************************************************************************************\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung in\nc\t\tForm von Walzen der L?nge SekLng.\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twA\n\t\tReal*4\t\twB\n\t\tReal*4\t\twSekLng\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twVolABmR\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHes\n\t\tReal*4\t\tA\n\t\tReal*4\t\tB\n\t\tReal*4\t\tSekLng\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tVolABmR\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\nc\t........................................................................................\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tHxM\n\t\tReal*4\t\tVolAx\n\t\tReal*4\t\tVolBx\n\t\tReal*4\t\tAx\n\t\tReal*4\t\tBx\n\t\tReal*4\t\tABx\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tH=Hges\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu,\n\t1\t\t\t\tHkz,Sk, Azop, sthh, Zost, Zoab, sok,\n     2\t\t\t\tklasse(1), volum(1), BHDz,ifeh)\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tA =\twA\n\t\tB = wB\n\t\tSekLng = wSekLng\n\t\tIErr = wIErr\n\t\tVolABmR=wVolABmR\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tVolBx = 0\n\t\tVolAx = 0\n\n\t\tAx = A\n\n\t\tIf (Ax > H) Then\n\t\t\tAx = H\n\t\tEnd If\n\n\t\tBx = B\n\t\tIf (Bx <= Ax) Then\n\t\t\tBx = Ax\n\t\t\txFNBDATVolABmR = 0\n\t\t\twVolABmR = xFNBDATVolABmR\n\t\t\treturn\n\t\tEnd If\n\n\t\tHx = 0\n\n\t\tABx = SekLng\n\n\t\tIf (Ax > 0) Then\n\n\t\t\tLoopExit = 0\n\t\t\tHx = 0\n\n\t\t\tDo While (LoopExit .eq. 0)\n\n\t\t\t\tIf (Hx + ABx <= Ax) Then\n\n\t\t\t\t\tHxM = Hx + ABx * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\nc\t\t\t\t\t----------------------------------\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolAx = VolAx + Pi * 0.25 * Dx * 0.01 * Dx *\n\t1\t\t\t\t 0.01 * ABx\n\t\t\t\t\tHx = Hx + ABx\n\n\t\t\t\tElse\n\n\t\t\t\t\tHxM = (Ax + Hx) * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\nc\t\t\t\t\t----------------------------------\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolAx = VolAx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * (Ax - Hx)\n\t\t\t\t\tLoopExit = 1\n\n\t\t\t\tEnd If\n\n\t\t\tend do\n\n\t\tElse\n\t\t\tVolAx = 0\n\t\tEnd If\n\n\t\tIf (Bx > 0) Then\n\n\t\t\tLoopExit = 0\n\t\t\tHx = 0\n\n\t\t\tDo While (LoopExit .eq. 0)\n\n\t\t\t\tIf (Hx + ABx <= Bx) Then\n\n\t\t\t\t\tHxM = Hx + ABx * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\nc\t\t\t\t\t----------------------------------\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolBx = VolBx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * ABx\n\t\t\t\t\tHx = Hx + ABx\n\n\t\t\t\tElse\n\n\t\t\t\t\tHxM = (Bx + Hx) * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\nc\t\t\t\t\t----------------------------------\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolBx = VolBx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * (Bx - Hx)\n\n\t\t\t\t\tLoopExit = 1\n\n\t\t\t\tEnd If\n\n\t\t\tend do\n\t\tElse\n\t\t\tVolBx = 0\n\t\tEnd If\n\n\t\tIf (VolBx > VolAx) Then\n\t\t\txFNBDATVolABmR = VolBx - VolAx\n\t\tElse\n\t\t\txFNBDATVolABmR = 0\n\t\tEnd If\n\n\t\t\twVolABmR = xFNBDATVolABmR\n\n\tEnd Function xFNBDATVolABmR\n\n\nc\t****************************************************************************************\n\tsubroutine BDATVolABoR(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wA, wB, wSekLng, wIErr,\n     2\t\t\t\t\t\twVolABoR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATVolABoR\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung\nc\t\tin Form von Walzen der L?nge SekLng.\n\nc\t\tInteger*2\tBDATBArtNr\t-\tBDATBaumArtSchl?ssel\nc\t\tReal*4\t\tD1\t\t\t\t-\tDurchmesser (cm) in H?he wH1 (wH1 = 0 : H1 = 1.3 m)\nc\t\tReal*4\t\tH1\t\t\t\t-\tH?he (m) Durchmesser 1 (0: wH1 = 1.3)\nc\t\tReal*4\t\tD2\t\t\t\t-\tDurchmesser(cm) in H?he wH2 (vgl. BDAT)\nc\t\tReal*4\t\tH2\t\t\t\t-\tH?he (m) Durchmesser 2 (0: wH2 = 7.0)\nc\t\tReal*4\t\tHges\t\t\t-\tStammh?he (m)\nc\t\tReal*4\t\tA\t\t\t\t-\tAbschnittsanfang (m) f?r die Voluminierung\nc\t\tReal*4\t\tB\t\t\t\t-\tAbschnittsende (m) f?r die Voluminierung\nc\t\tReal*4\t\tSekLng\t\t\t-\tSektionsl?nge (m)\nc\t\tInteger*2\tIErr\t\t\t-\tFehlerindikator\nc\t\tReal*4\t\tVolABoR\t\t-\tAbschnittsvolumen (m?) in Rinde\nc\nc\t----------------------------------------------------------------------------------------\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twA\n\t\tReal*4\t\twB\n\t\tReal*4\t\twSekLng\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twVolABoR\n\nc\t----------------------------------------------------------------------------------------\n\t    wVolABoR=xFNBDATVolABoR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABoR)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Subroutine BDATVolABoR\n\n\nc\t****************************************************************************************\n\treal*4 Function FNBDATVolABoR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABoR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATVolABoR\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung in\nc\t\tForm von Walzen der L?nge SekLng.\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twA\n\t\tReal*4\t\twB\n\t\tReal*4\t\twSekLng\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twVolABoR\n\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATVolABoR = xFNBDATVolABoR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABoR)\nc\t----------------------------------------------------------------------------------------\n\n\n\tEnd Function FNBDATVolABoR\n\nc\t****************************************************************************************\n\treal*4 Function xFNBDATVolABoR(\twBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\t\twH2, wHges, wA, wB, wSekLng,\n     2\t\t\t\t\t\t\t\twIErr, wVolABoR)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATVolABoR\n\nc\t...\tBaumVolumen [m?] f?r den Abschnitt Stammh?he A - B durch sektionsweise Kubierung in\nc\t\tForm von Walzen der L?nge SekLng.\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twA\n\t\tReal*4\t\twB\n\t\tReal*4\t\twSekLng\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twVolABoR\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHes\n\t\tReal*4\t\tA\n\t\tReal*4\t\tB\n\t\tReal*4\t\tSekLng\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tVolABoR\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\nc\t........................................................................................\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tHxM\n\t\tReal*4\t\tVolAx\n\t\tReal*4\t\tVolBx\n\t\tReal*4\t\tAx\n\t\tReal*4\t\tBx\n\t\tReal*4\t\tABx\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tH=Hges\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu,\n\t1\t\t\t\tHkz,Sk, Azop, sthh, Zost, Zoab, sok,\n     2\t\t\t\tklasse(1), volum(1), BHDz,ifeh)\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tA =\twA\n\t\tB = wB\n\t\tSekLng = wSekLng\n\t\tIErr = wIErr\n\t\tVolABmR=wVolABmR\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tVolBx = 0\n\t\tVolAx = 0\n\n\t\tAx = A\n\n\t\tIf (Ax > H) Then\n\t\t\tAx = H\n\t\tEnd If\n\n\t\tBx = B\n\t\tIf (Bx <= Ax) Then\n\t\t\tBx = Ax\n\t\t\tFNBDATVolABmR = 0\n\t\t\twVolABmR = FNBDATVolABmR\n\t\t\treturn\n\t\tEnd If\n\n\t\tHx = 0\n\n\t\tABx = SekLng\n\n\t\tIf (Ax > 0) Then\n\n\t\t\tLoopExit = 0\n\t\t\tHx = 0\n\n\t\t\tDo While (LoopExit .eq. 0)\n\n\t\t\t\tIf (Hx + ABx <= Ax) Then\n\n\t\t\t\t\tHxM = Hx + ABx * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\n\t\t\t\t\tCall RINDE (1 - HxM / Hges, tmp, R2, 0, 0)\nc\t\t\t\t\t-----------------------------------------\n\n\t\t\t\t\tIf (tmp < 0) Then\n\t\t\t\t\t\ttmp = 0.0\n\t\t\t\t\tEnd If\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolAx = VolAx + Pi * 0.25 * Dx * 0.01 * Dx *\n\t1\t\t\t\t 0.01 * ABx\n\t\t\t\t\tHx = Hx + ABx\n\n\t\t\t\tElse\n\n\t\t\t\t\tHxM = (Ax + Hx) * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t----------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\n\t\t\t\t\tCall RINDE (1 - HxM / Hges, tmp, R2, 0, 0)\nc\t\t\t\t\t-----------------------------------------\n\n\t\t\t\t\tIf (tmp < 0) Then\n\t\t\t\t\t\ttmp = 0.0\n\t\t\t\t\tEnd If\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolAx = VolAx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * (Ax - Hx)\n\t\t\t\t\tLoopExit = 1\n\n\t\t\t\tEnd If\n\n\t\t\tend do\n\n\t\tElse\n\t\t\tVolAx = 0\n\t\tEnd If\n\n\t\tIf (Bx > 0) Then\n\n\t\t\tLoopExit = 0\n\t\t\tHx = 0\n\n\t\t\tDo While (LoopExit .eq. 0)\n\n\t\t\t\tIf (Hx + ABx <= Bx) Then\n\n\t\t\t\t\tHxM = Hx + ABx * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t------------------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\n\t\t\t\t\tCall RINDE (1 - HxM / Hges, tmp, R2, 0, 0)\nc\t\t\t\t\t------------------------------------------\n\n\t\t\t\t\tIf (tmp < 0) Then\n\t\t\t\t\t\ttmp = 0.0\n\t\t\t\t\tEnd If\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolBx = VolBx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * ABx\n\t\t\t\t\tHx = Hx + ABx\n\n\t\t\t\tElse\n\n\t\t\t\t\tHxM = (Bx + Hx) * 0.5\n\n\t\t\t\t\tIf (HxM > Hges) Then\n\t\t\t\t\t\tHxM = Hges\n\t\t\t\t\tEndIf\n\nc\t\t\t\t\t------------------------------------------\n\t\t\t\t\tCall KUWERT(1 - HxM / Hges, tmp)\n\t\t\t\t\tCall RINDE (1 - HxM / Hges, tmp, R2, 0, 0)\nc\t\t\t\t\t------------------------------------------\n\n\t\t\t\t\tIf (tmp < 0) Then\n\t\t\t\t\t\ttmp = 0.0\n\t\t\t\t\tEnd If\n\n\t\t\t\t\tDx = tmp\n\n\t\t\t\t\tVolBx = VolBx + Pi * 0.25 * Dx * 0.01 * Dx * 0.01\n\t1\t\t\t\t * (Bx - Hx)\n\n\t\t\t\t\tLoopExit = 1\n\n\t\t\t\tEnd If\n\n\t\t\tend do\n\t\tElse\n\t\t\tVolBx = 0\n\t\tEnd If\n\n\t\tIf (VolBx > VolAx) Then\n\t\t\txFNBDATVolABoR = VolBx - VolAx\n\t\tElse\n\t\t\txFNBDATVolABoR = 0\n\t\tEnd If\n\n\t\t\twVolABoR = xFNBDATVolABoR\n\n\tEnd Function xFNBDATVolABoR\n\n\nc\t****************************************************************************************\n\tsubroutine BDATDmRHx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wHx, wIErr, wDmRHx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATDmRHx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDmRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\twDmRHx = xFNBDATDmRHx(wBDATBArtNr, wD1, wH1, wD2, wH2\n\t1\t\t\t\t\t\t\t,wHges,wHx, wIErr, wDmRHx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd subroutine BDATDmRHx\n\n\nc\t****************************************************************************************\n\tReal*4 Function FNBDATDmRHx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wDmRHx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATDmRHx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDmRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATDmRHx = xFNBDATDmRHx(wBDATBArtNr, wD1, wH1, wD2, wH2\n\t1\t\t\t\t\t\t\t\t,wHges,wHx, wIErr, wDmRHx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Function FNBDATDmRHx\n\n\nc\t****************************************************************************************\n\tReal*4 Function xFNBDATDmRHx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wHx, wIErr, wDmRHx)\nc\t****************************************************************************************\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDmRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHx\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tDmRHx\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tHx = wHx\n\t\tIErr = wIErr\n\t\tDmRHx = wDmRHx\n\n\t\tH=Hges\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\nc\t....Liefert den Durchmesser an der Stelle Hx im Schaft als Funktion der Baumart\nc\t\tDurchmesser(H?he 1/2) (D1,H1) (D2,H2)und der GesamtH?he H\n\nc\t----------------------------------------------------------------------------------------\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu, Hkz,\n\t1\tSk, Azop, sthh, Zost, Zoab, sok, klasse(1), volum(1), BHDz,\n     2\tifeh)\nc\t----------------------------------------------------------------------------------------\n\n\t\twIErr = ifeh\n\n\t\tIf (Hx .gt. Hges) Then\n\t\t\tHx = Hges\n\t\tEndIf\n\nc\t\t----------------------------------\n\t\tCall KUWERT(1 - Hx / Hges, tmp)\nc\t\t----------------------------------\n\n\t\tIf (tmp .lt. 0) Then\n\t\t\ttmp = 0\n\t\tendif\n\n\t\twDmRHx = tmp\n\t\txFNBDATDmRHx = wDmRHx\n\n\tEnd Function xFNBDATDmRHx\n\nc\t****************************************************************************************\n\tReal*4 Function yFNBDATDmRHx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wHx, wIErr, wDmRHx)\nc\t****************************************************************************************\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDmRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHx\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tDmRHx\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tHx = wHx\n\t\tIErr = wIErr\n\t\tDmRHx = wDmRHx\n\n\t\tH=Hges\n\nc\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\nc\t....Liefert den Durchmesser an der Stelle Hx im Schaft als Funktion der Baumart\nc\t\tDurchmesser(H?he 1/2) (D1,H1) (D2,H2)und der GesamtH?he H\n\nc\t----------------------------------------------------------------------------------------\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu, Hkz,\n\t1\tSk, Azop, sthh, Zost, Zoab, sok, klasse(1), volum(1), BHDz,\n     2\tifeh)\nc\t----------------------------------------------------------------------------------------\n\n\t\twIErr = ifeh\n\n\t\tIf (Hx .gt. Hges) Then\n\t\t\tHx = Hges\n\t\tEndIf\n\nc\t\t----------------------------------\n\t\tCall KUWERT(1 - Hx / Hges, tmp)\nc\t\t----------------------------------\n\n\t\tIf (tmp .lt. 0) Then\n\t\t\ttmp = 0\n\t\tendif\n\n\t\twDmRHx = tmp\n\t\tyFNBDATDmRHx = wDmRHx\n\n\tEnd Function yFNBDATDmRHx\n\n\nc\t****************************************************************************************\n\tSubroutine BDATDoRHx (\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wHx, wIErr, wDoRHx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATDoRHx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDoRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\twDoRHx=xFNBDATDoRHx (\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\twHges, wHx, wIErr, wDoRHx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Subroutine BDATDoRHx\n\n\nc\t****************************************************************************************\n\tReal*4 Function FNBDATDoRHx (\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wDoRHx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATDoRHx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDoRHx\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATDoRHx=xFNBDATDoRHx (\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wDoRHx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Function FNBDATDoRHx\n\n\nc\t****************************************************************************************\n\tReal*4 Function xFNBDATDoRHx (\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wDoRHx)\nc\t****************************************************************************************\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twDoRHx\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHx\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tDoRHx\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tkw\t\t\t/0.0/\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tHx = wHx\n\t\tIErr = wIErr\n\t\tDoRHx = wDoRHx\n\n\t\tH = Hges\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\n\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu,\n\t1\t\t\t\tHkz,Sk, Azop, sthh, Zost, Zoab, sok,\n     2\t\t\t\tklasse(1), volum(1), BHDz,ifeh)\n\nc\t----------------------------------------------------------------------------------------\n\nc\t\t-----------------------------------------\n\t\tCall KUWERT(1 - Hx / Hges, kw)\n\t\tCall RINDE (1 - Hx / Hges, Kw, R2, 0, 0)\nc\t\t-----------------------------------------\n\n\t\tIf (Kw < 0) Then\n\t\t\tKw = 0.0\n\t\tEnd If\n\n\t\twDoRHx = Kw\n\t\txFNBDATDoRHx = Kw\n\n\tEnd Function xFNBDATDoRHx\n\n\nc\t****************************************************************************************\n\tsubroutine BDATRinde2Hx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\twHges, wHx, wIErr, wRinde2Hx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATRinde2Hx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twRinde2Hx\n\nc\t----------------------------------------------------------------------------------------\n\t\twRinde2Hx = xFNBDATRinde2Hx(wBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\twH2,wHges, wHx, wIErr, wRinde2Hx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd subroutine BDATRinde2Hx\n\n\nc\t****************************************************************************************\n\tReal*4 Function FNBDATRinde2Hx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wRinde2Hx)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATRinde2Hx\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twRinde2Hx\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATRinde2Hx = xFNBDATRinde2Hx(wBDATBArtNr, wD1, wH1, wD2,\n\t1\t\t\t\t\t\t\twH2,wHges, wHx, wIErr, wRinde2Hx)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd Function FNBDATRinde2Hx\n\n\nc\t****************************************************************************************\n\tReal*4 Function xFNBDATRinde2Hx(\twBDATBArtNr, wD1, wH1, wD2, wH2,\n\t1\t\t\t\t\t\t\t\twHges, wHx, wIErr, wRinde2Hx)\nc\t****************************************************************************************\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\t\tReal*4\t\twHx\n\t\tInteger*2\twIErr\n\t\tReal*4\t\twRinde2Hx\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\t\tReal*4\t\tHx\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tRinde2Hx\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\n\t\tReal*4\t\tkw\t\t\t/0.0/\n\n\t\tReal*4\t\tBHD\n\t\tReal*4\t\tD7\n\t\tReal*4\t\tH\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\t\tHx = wHx\n\t\tIErr = wIErr\n\t\tRinde2Hx = wRinde2Hx\n\n\t\tH = Hges\n\n\t\tcall xBDATD2H2Trans (BDATBArtNr,D1,H1,D2,H2,Hges)\n\nc\t----------------------------------------------------------------------------------------\n\t\tCall BDAT(BDATBArtNr, D1, H1, D2, H2, Hges, Stxu, Hkz,\n\t1\tSk, Azop, sthh, Zost, Zoab, sok, klasse(1), volum(1), BHDz\n     2\t, ifeh)\nc\t----------------------------------------------------------------------------------------\n\n\t\tIErr = ifeh\n\n\t\tIf (Hx .gt. Hges) Then\n\t\t\tHx = Hges\n\t\tEndIf\n\nc\t\t-----------------------------------------\n\t\tCall KUWERT(1 - Hx / Hges, kw)\n\t\tCall RINDE (1 - Hx / Hges, kw, tmp, 0, 0)\nc\t\t-----------------------------------------\n\n\t\twRinde2Hx = tmp\n\t\txFNBDATRinde2Hx = tmp\n\n\n\tEnd Function xFNBDATRinde2Hx\n\n\nc\t****************************************************************************************\n\tsubroutine BDATD2H2Trans (\twBDATBArtNr, wD1, wH1, wD2, wH2,wHges)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATD2H2Trans\n\nc\t----------------------------------------------------------------------------------------\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\nc\t----------------------------------------------------------------------------------------\n\t\tcall xBDATD2H2Trans (\twBDATBArtNr, wD1, wH1, wD2, wH2,wHges)\nc\t----------------------------------------------------------------------------------------\n\n\tEnd subroutine BDATD2H2Trans\n\n\nc\t****************************************************************************************\n\tsubroutine xBDATD2H2Trans (\twBDATBArtNr, wD1, wH1, wD2, wH2,wHges)\nc\t****************************************************************************************\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twHges\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tHges\n\n\t\tInteger*2\tHkz\t\t\t/0/\n\t\tInteger*2\tsok\t\t\t/0/\n\t\tInteger*2\tSk\t\t\t/0/\n\t\tInteger*2\tifeh\t\t/0/\n\t\tInteger*2\tiz\t\t\t/0/\n\t\tInteger*2\tklasse(6)\t/6*0/\n\n\t\tReal*4\t\tDu\t\t\t/0.0/\n\t\tReal*4\t\tHu\t\t\t/0.0/\n\t\tReal*4\t\tddo\t\t\t/0.0/\n\t\tReal*4\t\tHo\t\t\t/0.0/\n\t\tReal*4\t\tBHDz\t\t/0.0/\n\t\tReal*4\t\ttmp\t\t\t/0.0/\n\t\tReal*4\t\tStxu\t\t/0.0/\n\t\tReal*4\t\tAzop\t\t/0.0/\n\t\tReal*4\t\tsthh\t\t/0.0/\n\t\tReal*4\t\tZost\t\t/0.0/\n\t\tReal*4\t\tZoab\t\t/0.0/\n\t\tReal*4\t\tPi\t\t\t/3.14159E0/\n\t\tReal*4\t\tvolum(7)\t/7*0.0/\n\t\tReal*4\t\tkw\t\t\t/0.0/\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tReal*4\t\tHx, Dx, Q03Pct,MwQ03BWI,StDevQ03BWI,MwQ03BWIPct\n\t\tInteger*2\tiERR\t\t/0/\n\t\tReal*4\t\tH,D2t,H2t,D2u,D2o\nc\t----------------------------------------------------------------------------------------\n\n\t\tif (wH1<=0) then\n\t\t\twH1=1.3\n\t\tend if\n\n\t\tBDATBArtNr = wBDATBArtNr\n\n\t\tD1 = wD1\n\t\tH1 = wH1\n\t\tD2 = wD2\n\t\tH2 = wH2\n\t\tHges = wHges\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tif\t\t(D2 > 0) then\n\nc\t\t\tD2 (ein) ~ Durchmesserwert\n\n\t\t\tif\t(H2>0) then\n\nc\t\t\t\tD2 (aus) = D2 (ein)\nc\t\t\t\tH2 (aus) = H2 (ein)\n\n\t\t\telse\n\nc\t\t\t\tH2 (aus) = 7 m (Standardwert BWI)\n\n\t\t\t\tH2 = 7\n\n\t\t\tend if\n\nc\t\t...<<12.11.02>> : ?nderung :........................................................\n\n\t\t\tH=Hges\n\t\t\tD2t=-0.400\n\t\t\tH2t=0.3*H\n\t\t\tHx=H2\n\n\t\t\tD2u=yFNBDATDmRHx(BDATBArtNr,D1,H1,D2t,H2t,H,Hx,iERR,Dx)\n\n\t\t\tH=Hges\n\t\t\tD2t=-0.9500\n\t\t\tH2t=0.3*H\n\t\t\tHx=H2\n\n\t\t\tD2o=yFNBDATDmRHx(BDATBArtNr,D1,H1,D2t,H2t,H,Hx,iERR,Dx)\n\n\t\t\tH=Hges\n\t\t\tD2t=D2\n\t\t\tH2t=H2\n\t\t\tHx=H2\n\n\t\t\tDx=yFNBDATDmRHx(BDATBArtNr,D1,H1,D2t,H2t,H,Hx,iERR,Dx)\n\t\t\tD2t=Dx\n\n\t\t\tif (ABS(D2o-D2)>ABS(D2u-D2)) then\n\t\t\t\tif (ABS(D2t-D2)>ABS(D2u-D2)) then\n\t\t\t\t\tD2=-0.4000\n\t\t\t\t\tH2=0.3*H\n\t\t\t\tend if\n\t\t\telse\n\t\t\t\tif (ABS(D2t-D2)>ABS(D2o-D2)) then\n\t\t\t\t\tD2=-0.9500\n\t\t\t\t\tH2=0.3*H\n\t\t\t\tend if\n\t\t\tend if\n\n\t\telse if ((-1 < D2).and.(D2 < 0))\tthen\n\nc\t\t\tFormigkeit: q0.3:= D0.30/D095\n\nc\t\t\tD2 (ein) ~ - q0.3;\n\nc\t\t\tD2 (aus) = D2 (ein)\nc\t\t\tH2 (aus) = 0.3*Hges\n\n\t\t\tH2 = 0.3*Hges\n\n\t\telse if (D2 <= -1)\t\t\t\t\tthen\n\nc\t\t\t\tFormigkeit: BWI-?quivalenz (MEDIAN q0.3)\n\nc\t\t\t\tD2 (aus) = EST MED [q0.3 |BHD,Hges;BWI]\nc\t\t\t\tH2 (aus) = 0.3*Hges\n\n\t\t\t\tQ03Pct=0.50\n\n\t\t\t\tcall xBDATMwQ03BWI (BDATBArtNr,D1,Hges,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\n\n\t\t\t\tD2 = -MwQ03BWIPct\n\t\t\t\tH2 = 0.3*Hges\n\n\t\telse\n\nc\t\t\tD2 (ein) = 0 : D2 ~ ?ber <<H2>> festlegen\n\n\t\t\tif\t(H2 <= 0) then\n\nc\t\t\t\tFormigkeit: MassenTafel-?quivalenz (BDAT 1.0)\n\n\t\t\t\tD2=0\n\t\t\t\tH2=0\n\n\t\t\telse if ((0<H2).and.(H2<100)) then\n\nc\t\t\t\tFormigkeit: BWI-?quivalenz (PCTL q0.3)\n\nc\t\t\t\tH2 (ein) ~\tPercentilWert * 100\nc\nc\t\t\t\tD2 (aus) =\tEST PCTL [q0.3 | BHD,Hges,H2(ein);BWI]\nc\t\t\t\tH2 (aus) =\t0.3*Hges\n\n\t\t\t\tQ03Pct=wH2*0.01\n\n\t\t\t\tcall xBDATMwQ03BWI (BDATBArtNr,D1,Hges,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\n\n\t\t\t\tD2 = -MwQ03BWIPct\n\t\t\t\tH2 = 0.3*Hges\n\n\t\t\telse\n\nc\t\t\t\tFormigkeit: BWI-?quivalenz (MEDIAN q0.3)\nc\nc\t\t\t\tD2 (aus) =\tEST MED [q0.3 |BHD,Hges;BWI]\nc\t\t\t\tH2 (aus) =\t0.3*Hges\n\n\t\t\t\tQ03Pct=0.50\n\n\t\t\t\tcall xBDATMwQ03BWI (BDATBArtNr,D1,Hges,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\n\n\t\t\t\tD2 = -MwQ03BWIPct\n\t\t\t\tH2 = 0.3*Hges\n\n\t\t\tend if\n\n\t\tend if\n\nc\t    AusgabeParameter :------------------------------------------------------------------\n\n\t\twD1=D1\n\t\twH1=H1\n\n\t\twD2=D2\n\t\twH2=H2\n\n\tEnd subroutine xBDATD2H2Trans\n\n\nc\t****************************************************************************************\n\tsubroutine BDATMwQ03BWI(BDATBArtNr,D,H,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\nc\t****************************************************************************************\n\nc\t\tq0.3 - Percentile = MwQ03BWIPct = F(D,H,PctlWert) / MW / STD = F(D,H)\nc\nc\t\tBDATBArtNr\tINT*2\tEIN\t- BDAT BaumArt Nummer 1-36\nc \t\tD\t\t\tREAL*4\tEIN\t- BHD [cm]\nc\t\tH\t\t\tREAL*4\tEIN\t- BaumH?he [m]\nc\t\tQ03Pct\t\tREAL*4\tEIN\t- PercentilWert (eps,1-eps) f?r MwQ03BWIPct Sch?tzung\nc\t\tMwQ03BWI\tREAL*4\tAUS - Mittelwert q0.3 (gesch?tzt)\nc\t\tStDevQ03BWI REAL*4\tAUS - Standardabweichung Mwq0.3 - Verteilung\nc\t\tMwQ03BWIPct REAL*4\tAUS - Mittlerer q0.3 - Percentilwert (gesch?tzt)\n\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATMwQ03BWI\n\nc\t----------------------------------------------------------------------------------------\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD, H, Q03Pct\n\t\tReal*4\t\tMwQ03BWI,StDevQ03BWI, MwQ03BWIPct\nc\t----------------------------------------------------------------------------------------\n\t\tcall xBDATMwQ03BWI(BDATBArtNr,D,H,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\nc\t----------------------------------------------------------------------------------------\n\n\tend subroutine BDATMwQ03BWI\n\n\nc\t****************************************************************************************\n\tsubroutine xBDATMwQ03BWI(BDATBArtNr,D,H,Q03Pct,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,MwQ03BWIPct)\nc\t****************************************************************************************\n\nc\t\tq0.3 - Percentile = MwQ03BWIPct = F(D,H,PctlWert) / MW / STD = F(D,H)\nc\nc\t\tBDATBArtNr\tINT*2\tEIN\t- BDAT BaumArt Nummer 1-36\nc \t\tD\t\t\tREAL*4\tEIN\t- BHD [cm]\nc\t\tH\t\t\tREAL*4\tEIN\t- BaumH?he [m]\nc\t\tQ03Pct\t\tREAL*4\tEIN\t- PercentilWert (eps,1-eps) f?r MwQ03BWIPct Sch?tzung\nc\t\tMwQ03BWI\tREAL*4\tAUS - Mittelwert q0.3 (gesch?tzt)\nc\t\tStDevQ03BWI REAL*4\tAUS - Standardabweichung Mwq0.3 - Verteilung\nc\t\tMwQ03BWIPct REAL*4\tAUS - Mittlerer q0.3 - Percentilwert (gesch?tzt)\n\nc\t****************************************************************************************\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD, H, Q03Pct\n\t\tReal*4\t\tMwQ03BWI,StDevQ03BWI, MwQ03BWIPct\n\n\t\treal*4\t\tEQP(1:8,1:2,1:7)\n\t\treal*4\t\tSQP(1:8,1:6)\n\n\t\tInteger*2\tBDATSKNrList(1:36)\n\n\t\tInteger*2\tBDATSKNr\n\n\t\tReal*4\t\tQ\n\t\tReal*4\t\tQ1, Q2, Q3, sQ1, sQ2, sQ3\n\t\tReal*4\t\tEQ03,StDevQ03\n\n\t\tReal*4\t\tEQ03uG /0.4000/\n\t\tReal*4\t\tEQ03oG /0.9800/\n\n\t\tReal*4\t\ta11, a12, a13, h11,\th12, H13, D1\n\t\tReal*4\t\ta21, a22, a23, h21,\th22, H23, D2\n\n\t\tReal*4\t\tPhi\n\n\t\tReal*4\t\tZ1, Z2\n\n\t\tReal*4\t\tCDFx, x\n\n\t\tReal*4\t\teps /0.001/\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tdata BDATSKNrList\t\t\t\t\t\t\t/\n\t1\t1,  1,  2,  2,  4,  4,  4,  3,  5,  5,\n     2\t5,  1,  1,  1,  6,  6,  7,  8,  8,  8,\n     3\t6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n     4\t6,  6,  7,  6,  6,  6\t\t\t\t\t\t/\n\nc\t-------------------------------- Stand 23.08.01 ----------------------------------------\n\n\t\tdata (((EQP(i,j,k),k=1,7),j=1,2),i=1,8)\t\t/\n     1 \t20,\t10,\t50,\t0.650,\t0.875,\t0.850,\t0.250,\n\t1\t55,\t10,\t50,\t0.525,\t0.860,\t0.775,\t0.000,\n     2\t20,\t10,\t50,\t0.750,\t0.950,\t0.860,\t0.500,\n\t2\t70,\t10,\t50,\t0.670,\t0.875,\t0.780,\t0.000,\n     3\t20,\t10,\t50,\t0.650,\t0.925,\t0.860,\t0.300,\n\t3\t70,\t10,\t50,\t0.500,\t0.825,\t0.700,\t0.000,\n\t4\t20,\t10,\t50,\t0.700,\t0.800,\t0.770,\t0.250,\n\t4\t50,\t10,\t50,\t0.700,\t0.790,\t0.770,\t0.000,\n\t5\t20,\t10,\t50,\t0.725,\t0.950,\t0.875,\t0.500,\n\t5\t60,\t10,\t50,\t0.630,\t0.875,\t0.750,\t0.000,\n\t6\t20,\t10,\t50,\t0.700,\t0.900,\t0.830,\t0.750,\n\t6\t60,\t10,\t50,\t0.650,\t0.870,\t0.820,\t0.000,\n\t7\t20,\t10,\t50,\t0.700,\t0.850,\t0.840,\t0.750,\n\t7\t60,\t10,\t50,\t0.675,\t0.840,\t0.825,\t0.000,\n\t8\t20,\t10,\t50,\t0.775,\t0.850,\t0.810,\t1.000,\n\t8\t60,\t10,\t50,\t0.725,\t0.800,\t0.760,\t0.000\t/\n\n\t\tdata ((SQP(i,j),j=1,6),i=1,8)\t\t\t\t\t\t/\n\t1 \t0.50,\t0.75,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t2\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0800,\t0.0000,\n\t3\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0600,\t0.0000,\n\t4\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0550,\t0.0000,\n\t5\t0.50,\t0.75,\t1.00,\t0.2000,\t0.0600,\t0.0000,\n\t6\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0900,\t0.0000,\n\t7\t0.50,\t0.80,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t8\t0.50,\t0.80,\t1.00,\t0.0300,\t0.0300,\t0.0300  /\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tBDATSKNr = BDATSKNrList(BDATBArtNr)\n\n\t\ta11 = EQP(BDATSKNr, 1, 4)\n\t\ta12 = EQP(BDATSKNr, 1, 5)\n\t\ta13 = EQP(BDATSKNr, 1, 6)\n\n\t\th11 = EQP(BDATSKNr, 1, 2)\n\t\th12 = EQP(BDATSKNr, 1, 3)\n\t\tH13 = (h12 + h11) * 0.5\n\n\t\tD1 = EQP(BDATSKNr, 1, 1)\n\n\t\ta21 = EQP(BDATSKNr, 2, 4)\n\t\ta22 = EQP(BDATSKNr, 2, 5)\n\t\ta23 = EQP(BDATSKNr, 2, 6)\n\n\t\th21 = EQP(BDATSKNr, 2, 2)\n\t\th22 = EQP(BDATSKNr, 2, 3)\n\t\tH23 = (h22 + h21) * 0.5\n\n\t\tD2 = EQP(BDATSKNr, 2, 1)\n\n\t\tPhi = EQP(BDATSKNr, 1, 7)\n\nc     ****************************************************************************************\nc    \t* Z(H|D(i)) = MW [Q0.3| H | a(H(i,j)|D(i))]; j=1,2,3; i=1,2                            *\nc\t* Ratkowsky, D.A. (1990) (4.3.9), S97                                                  *\nc     ****************************************************************************************\n\n\t\tQ1 = 2 * (H - h11) / (h12 - h11)\n\t\tZ1 = a11 + (a12 - a11) * (1 - ((a12 - a13)/(a13 - a11))** Q1)\n\t1\t/ (1 - ((a12 - a13) / (a13 - a11)) ** 2)\n\n\t\tQ2 = 2 * (H - h21) / (h22 - h21)\n\t\tZ2 = a21 + (a22 - a21) * (1 - ((a22 - a23)/(a23 - a21)) ** Q2)\n\t1\t/ (1 - ((a22 - a23) / (a23 - a21)) ** 2)\n\nc     ****************************************************************************************\nc     * EQ0.3(D,H) =  E [Q0.3| D, Z(H|D(i)); i=1,2] * Ratkowsky, D.A. (1990) (4.3.23), S104  *\nc     ****************************************************************************************\n\n\t\tEQ03 = Z1 * Z2 * (D2 ** Phi - D1 ** Phi)\n\t1 /\t(Z2 * (D2 ** Phi - D ** Phi) + Z1 * (D ** Phi - D1 ** Phi))\n\n\t\tIf (EQ03 < EQ03uG) Then\n\t\t\tEQ03 = EQ03uG\n\t\tEnd If\n\n\t\tIf (EQ03 > EQ03oG) Then\n\t\t\tEQ03 = EQ03oG\n\t\tEnd If\n\nc\t\t***************\n\t\tMwQ03BWI = EQ03\nc\t\t***************\n\nc     ****************************************************************************************\nc     * sQ0.3(D,H) =  s [Q0.3| D,sQ(Q|i)); i=1,3] * Ratkowsky, D.A. (1990) (4.3.29), S106    *\nc     ****************************************************************************************\n\n\nc\t\tCall BDATStDevQ03(BDATBArtNr, MwQ03, BDATSKNr, StDevQ03)\n\n\t\tQ1 = SQP(BDATSKNr, 1)\n\t\tQ2 = SQP(BDATSKNr, 2)\n\t\tQ3 = SQP(BDATSKNr, 3)\n\n\t\tsQ1 = SQP(BDATSKNr, 4)\n\t\tsQ2 = SQP(BDATSKNr, 5)\n\t\tsQ3 = SQP(BDATSKNr, 6)\n\n\t\tQ = EQ03\n\n\t\tif (ABS(sQ3-sQ1) < eps) then\n\t\t\tStDevQ03 = sQ3\n\t\telse\n\t\t\tStDevQ03 = (Q-Q3)*(Q2-Q1)*sQ1*sQ2 + (Q-Q2)*(Q1-Q3)*sQ1*sQ3\n\t1\t\t+ (Q-Q1)*(Q3-Q2)*sQ2*sQ3\n\n\t\t\tStDevQ03 = StDevQ03/((Q-Q1)*(Q2-Q3)*sQ1 + (Q - Q2)*(Q3-Q1)\n\t1\t\t* sQ2 + (Q-Q3)*(Q1-Q2)*sQ3)\n\t\tend if\n\nc\t\t********************\n\t\tStDevQ03BWI=StDevQ03\nc\t\t********************\n\n\t\tCDFx = Q03Pct\n\n\t\tif (CDFx < eps) then\n\t\t\tCDFx=0.5\n\t\tend if\n\n\t\tif (CDFx > 1 - eps) then\n\t\t\tCDFx=0.5\n\t\tend if\n\nc\t\t*****************************************\n\t\tCall CDFNORMInv(EQ03, StDevQ03, CDFx, x)\nc\t\t*****************************************\n\n\nc\t\t***************\n\t\tMwQ03BWIPct = x\nc\t\t***************\n\n\t\tif (MwQ03BWIPct>1) then\n\t\t\tMwQ03BWIPct=1\n\t\tend if\n\n\t\tif (MwQ03BWIPct<0) then\n\t\t\tMwQ03BWIPct=0\n\t\tend if\n\n\tend subroutine xBDATMwQ03BWI\n\n\nc\t****************************************************************************************\n\tsubroutine BDATPctQ03BWI(BDATBArtNr,D,H,Q03,\n\t1\t\t\t\t\t\tMwQ03BWI,StDevQ03BWI,PctQ03BWI)\nc\t****************************************************************************************\n\nc\t\tq0.3 - PercentilWert = PctQ03BWI = F(D,H,q0.3) / Mittelwert / Standardabweichung = F(D,H)\n\nc\t\tBDATBArtNr\tINT*2\tEIN\t- BDAT BaumArt Nummer 1-36\nc \t\tD\t\t\tREAL*4\tEIN\t- BHD [cm]\nc\t\tH\t\t\tREAL*4\tEIN\t- BaumH?he [m]\nc\t\tQ03   \t\tREAL*4\tEIN\t- Formquotient f?r die Percentilbestimmung\nc\t\tMwQ03BWI\tREAL*4\tAUS - Mittelwert q0.3 (gesch?tzt)\nc\t\tStDevQ03BWI REAL*4\tAUS - Standardabweichung Mwq0.3 - Verteilung\nc\t\tPctQ03BWI\tREAL*4\tAUS - q0.3 - Percentilwert (gesch?tzt) zu q0.3, D, H\n\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: BDATPctQ03BWI\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD, H, Q03\n\t\tReal*4\t\tMwQ03BWI, StDevQ03BWI, PctQ03BWI\n\n\t\treal*4\t\tEQP(1:8,1:2,1:7)\n\t\treal*4\t\tSQP(1:8,1:6)\n\n\t\tInteger*2\tBDATSKNrList(1:36)\n\n\t\tInteger*2\tBDATSKNr\n\n\t\tReal*4\t\tQ\n\t\tReal*4\t\tQ1, Q2, Q3, sQ1, sQ2, sQ3\n\n\t\tReal*4\t\tEQ03,StDevQ03\n\t\tReal*4\t\tEQ03uG /0.4000/\n\t\tReal*4\t\tEQ03oG /0.9800/\n\n\t\tReal*4\t\ta11, a12, a13, h11,\th12, H13, D1\n\t\tReal*4\t\ta21, a22, a23, h21,\th22, H23, D2\n\n\t\tReal*4\t\tPhi\n\n\t\tReal*4\t\tZ1, Z2\n\n\t\tReal*4\t\tCDFx, x\n\n\t\tReal*4\t\teps /0.001/\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tdata BDATSKNrList\t\t\t\t\t\t/\n\t1\t1,  1,  2,  2,  4,  4,  4,  3,  5,  5,\n     2\t5,  1,  1,  1,  6,  6,  7,  8,  8,  8,\n     3\t6,  6,  6,  6,  6,  6,  6,  6,  6,  6,\n     4\t6,  6,  7,  6,  6,  6\t\t\t\t\t/\n\nc\t-------------------------------- Stand 23.08.01 ----------------------------------------\n\n\t\tdata (((EQP(i,j,k),k=1,7),j=1,2),i=1,8)\t\t/\n     1 \t20,\t10,\t50,\t0.650,\t0.875,\t0.850,\t0.250,\n\t1\t55,\t10,\t50,\t0.525,\t0.860,\t0.775,\t0.000,\n     2\t20,\t10,\t50,\t0.750,\t0.950,\t0.860,\t0.500,\n\t2\t70,\t10,\t50,\t0.670,\t0.875,\t0.780,\t0.000,\n     3\t20,\t10,\t50,\t0.650,\t0.925,\t0.860,\t0.300,\n\t3\t70,\t10,\t50,\t0.500,\t0.825,\t0.700,\t0.000,\n\t4\t20,\t10,\t50,\t0.700,\t0.800,\t0.770,\t0.250,\n\t4\t50,\t10,\t50,\t0.700,\t0.790,\t0.770,\t0.000,\n\t5\t20,\t10,\t50,\t0.725,\t0.950,\t0.875,\t0.500,\n\t5\t60,\t10,\t50,\t0.630,\t0.875,\t0.750,\t0.000,\n\t6\t20,\t10,\t50,\t0.700,\t0.900,\t0.830,\t0.750,\n\t6\t60,\t10,\t50,\t0.650,\t0.870,\t0.820,\t0.000,\n\t7\t20,\t10,\t50,\t0.700,\t0.850,\t0.840,\t0.750,\n\t7\t60,\t10,\t50,\t0.675,\t0.840,\t0.825,\t0.000,\n\t8\t20,\t10,\t50,\t0.775,\t0.850,\t0.810,\t1.000,\n\t8\t60,\t10,\t50,\t0.725,\t0.800,\t0.760,\t0.000  /\n\n\t\tdata ((SQP(i,j),j=1,6),i=1,8)\t\t\t\t\t/\n\t1\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t2\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0800,\t0.0000,\n\t3\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0600,\t0.0000,\n\t4\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0550,\t0.0000,\n\t5\t0.50,\t0.75,\t1.00,\t0.2000,\t0.0600,\t0.0000,\n\t6\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0900,\t0.0000,\n\t7\t0.50,\t0.80,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t8\t0.50,\t0.80,\t1.00,\t0.0300,\t0.0300,\t0.0300  /\n\nc\t-------------------------------- Stand 23.08.01 ----------------------------------------\n\n\t\tBDATSKNr = BDATSKNrList(BDATBArtNr)\n\n\t\ta11 = EQP(BDATSKNr, 1, 4)\n\t\ta12 = EQP(BDATSKNr, 1, 5)\n\t\ta13 = EQP(BDATSKNr, 1, 6)\n\n\t\th11 = EQP(BDATSKNr, 1, 2)\n\t\th12 = EQP(BDATSKNr, 1, 3)\n\t\tH13 = (h12 + h11) * 0.5\n\n\t\tD1 = EQP(BDATSKNr, 1, 1)\n\n\t\ta21 = EQP(BDATSKNr, 2, 4)\n\t\ta22 = EQP(BDATSKNr, 2, 5)\n\t\ta23 = EQP(BDATSKNr, 2, 6)\n\n\t\th21 = EQP(BDATSKNr, 2, 2)\n\t\th22 = EQP(BDATSKNr, 2, 3)\n\t\tH23 = (h22 + h21) * 0.5\n\n\t\tD2 = EQP(BDATSKNr, 2, 1)\n\n\t\tPhi = EQP(BDATSKNr, 1, 7)\n\nc     ****************************************************************************************\nc    \t* Z(H|D(i)) = MW [Q0.3| H | a(H(i,j)|D(i))]; j=1,2,3; i=1,2                            *\nc\t* Ratkowsky, D.A. (1990) (4.3.9), S97                                                  *\nc     ****************************************************************************************\n\n\t\tQ1 = 2 * (H - h11) / (h12 - h11)\n\t\tZ1 = a11 + (a12 - a11) * (1 - ((a12 - a13) / (a13 - a11))**Q1)\n\t1\t/ (1 - ((a12 - a13) / (a13 - a11)) ** 2)\n\n\t\tQ2 = 2 * (H - h21) / (h22 - h21)\n\t\tZ2 = a21 + (a22 - a21) * (1 - ((a22 - a23) / (a23 - a21))**Q2)\n\t1\t/ (1 - ((a22 - a23) / (a23 - a21)) ** 2)\n\nc     ****************************************************************************************\nc     * EQ0.3(D,H) =  E [Q0.3| D, Z(H|D(i)); i=1,2] * Ratkowsky, D.A. (1990) (4.3.23), S104  *\nc     ****************************************************************************************\n\n\t\tEQ03 = Z1 * Z2 * (D2 ** Phi - D1 ** Phi)\n\t1\t/ (Z2 * (D2 ** Phi - D ** Phi) + Z1 * (D ** Phi - D1 ** Phi))\n\n\n\t\tIf (EQ03 < EQ03uG) Then\n\t\t\tEQ03 = EQ03uG\n\t\tEnd If\n\n\t\tIf (EQ03 > EQ03oG) Then\n\t\t\tEQ03 = EQ03oG\n\t\tEnd If\n\n\nc\t\t***************\n\t\tMwQ03BWI = EQ03\nc\t\t***************\n\nc\t\tCall BDATStDevQ03(BDATBArtNr, MwQ03, BDATSKNr, StDevQ03)\n\n\t\tQ1 = SQP(BDATSKNr, 1)\n\t\tQ2 = SQP(BDATSKNr, 2)\n\t\tQ3 = SQP(BDATSKNr, 3)\n\n\t\tsQ1 = SQP(BDATSKNr, 4)\n\t\tsQ2 = SQP(BDATSKNr, 5)\n\t\tsQ3 = SQP(BDATSKNr, 6)\n\n\t\tQ = EQ03\n\n\t\tif (ABS(sQ3-sQ1) < eps) then\n\t\t\tStDevQ03 = sQ3\n\t\telse\n\t\t\tStDevQ03 = (Q-Q3)*(Q2-Q1)*sQ1*sQ2 + (Q-Q2)*(Q1-Q3)*sQ1*sQ3\n\t1\t\t+ (Q-Q1)*(Q3-Q2)*sQ2*sQ3\n\n\t\t\tStDevQ03 = StDevQ03/((Q-Q1)*(Q2-Q3)*sQ1 + (Q - Q2)*(Q3-Q1)\n\t1\t\t* sQ2 + (Q-Q3)*(Q1-Q2)*sQ3)\n\t\tend if\n\nc\t\t********************\n\t\tStDevQ03BWI=StDevQ03\nc\t\t********************\n\n\t\tif (Q03 < eps) then\n\t\t\tPctQ03BWI=0\n\t\telse if (Q03 > 1 - eps) then\n\t\t\tPctQ03BWI=1\n\t\telse\n\nc\t\t\t**************************************\n\t\t\tx=Q03\n\t\t\tCall CDFNORM(EQ03, StDevQ03, x, CDFx)\n\t\t\tPctQ03BWI = CDFx\nc\t\t\t**************************************\n\n\t\tend if\n\n\n\tend subroutine BDATPctQ03BWI\n\n\nc\t****************************************************************************************\n\tsubroutine EQ03ParIni(WEQP,WSQP)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: EQ03ParIni\n\n\t\treal*4 WEQP(1:8,1:2,1:7)\n\t\treal*4 WSQP(1:8,1:6)\n\n\t\treal*4 EQP(1:8,1:2,1:7)\n\t\treal*4 SQP(1:8,1:6)\n\n\nc\t\tCOMMON / EQ03 / EQP, SQP\n\nc\t-------------------------------- Stand 23.08.01 ----------------------------------------\n\n\t\tdata (((EQP(i,j,k),k=1,7),j=1,2),i=1,8)\t\t/\n     1\t20,\t10,\t50,\t0.650,\t0.875,\t0.850,\t0.250,\n\t1\t55,\t10,\t50,\t0.525,\t0.860,\t0.775,\t0.000,\n     2\t20,\t10,\t50,\t0.750,\t0.950,\t0.860,\t0.500,\n\t2\t70,\t10,\t50,\t0.670,\t0.875,\t0.780,\t0.000,\n     3\t20,\t10,\t50,\t0.650,\t0.925,\t0.860,\t0.300,\n\t3\t70,\t10,\t50,\t0.500,\t0.825,\t0.700,\t0.000,\n\t4\t20,\t10,\t50,\t0.700,\t0.800,\t0.770,\t0.250,\n\t4\t50,\t10,\t50,\t0.700,\t0.790,\t0.770,\t0.000,\n\t5\t20,\t10,\t50,\t0.725,\t0.950,\t0.875,\t0.500,\n\t5\t60,\t10,\t50,\t0.630,\t0.875,\t0.750,\t0.000,\n\t6\t20,\t10,\t50,\t0.700,\t0.900,\t0.830,\t0.750,\n\t6\t60,\t10,\t50,\t0.650,\t0.870,\t0.820,\t0.000,\n\t7\t20,\t10,\t50,\t0.700,\t0.850,\t0.840,\t0.750,\n\t7\t60,\t10,\t50,\t0.675,\t0.840,\t0.825,\t0.000,\n\t8\t20,\t10,\t50,\t0.775,\t0.850,\t0.810,\t1.000,\n\t8\t60,\t10,\t50,\t0.725,\t0.800,\t0.760,\t0.000\t/\n\n\tdata ((SQP(i,j),j=1,6),i=1,8)\t\t\t\t\t\t/\n\t1\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t2\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0800,\t0.0000,\n\t3\t0.50,\t0.75,\t1.00,\t0.2500,\t0.0600,\t0.0000,\n\t4\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0550,\t0.0000,\n\t5\t0.50,\t0.75,\t1.00,\t0.2000,\t0.0600,\t0.0000,\n\t6\t0.50,\t0.75,\t1.00,\t0.3000,\t0.0900,\t0.0000,\n\t7\t0.50,\t0.80,\t1.00,\t0.2500,\t0.0700,\t0.0000,\n\t8\t0.50,\t0.80,\t1.00,\t0.0300,\t0.0300,\t0.0300  /\n\nc\t-------------------------------------------------------------------------------------------\n\n\t\tdo i= 1,8,1\n\t\t\tdo j= 1,2,1\n\t\t\t\tdo k = 1,7,1\n\t\t\t\t\tWEQP(i,j,k)=EQP(i,j,k)\n\t\t\t\tend do\n\t\t\tend do\n\t\tend do\n\n\t\tdo i= 1,8,1\n\t\t\tdo j= 1,6,1\n\t\t\t\tWSQP(i,j)=SQP(i,j)\n\t\t\tend do\n\t\tend do\n\n\tend subroutine EQ03ParIni\n\n\nc\tq03 - Fortschreibung :_____________________________________________________________________\n\n\nc\t*******************************************************************************************\n\treal*4 Function FNBDATEstQ032(BDATBArtNr, BHD1, D71, H1, BHD2, H2,\n\t1\t\t\t\t\t\t\tEstq032, EstD72, iErr)\nc\t*******************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATEstQ032\n\n\t\tinteger*2\tBDATBArtNr\n\t\treal*4\t\tBHD1\n\t\treal*4\t\tD71\n\t\treal*4\t\tH1\n\t\treal*4\t\tBHD2\n\t\treal*4\t\tH2\n\t\treal*4\t\tEstq032\n\t\treal*4\t\tEstD72\n\t\tinteger*2\tiErr\n\n\t\treal*4\t\tD1,HD1,D2,HD2,H,Hx\n\t\treal*4\t\tq03Pct,MwQ03BWI,StDevQ03BWI,MwQ03BWIPct\n\t\treal*4\t\tq031,MWq031,MWq032\n\n\t\treal*4\t\tD005,D03\n\nc\t--------------------------------------------------------------------------------------------\n\n\t\tiErr = 0\n\n\t\tIf ((BDATBArtNr < 1).Or.(BDATBArtNr > 36)) Then\n            BDATBArtNr = 1\n            iErr = 1\n\t\tEnd If\n\nc        '...q03 = F(BHD,D7=0,H,INV 2) :...............................................\n\n\t\tD1 = BHD2\n\t\tHD1 = 1.3\n\t\tD2 = 0\n\t\tHD2 = 50\n\t\tH = H2\n\n\t\tq03Pct = 0.5\n\n\t\tCall xBDATMwQ03BWI(BDATBArtNr, BHD2, H2, q03Pct, MwQ03BWI,\n\t1\t\t\t\t\t\tStDevQ03BWI, MwQ03BWIPct)\n\t\tMWq032 = MwQ03BWI\n\n\t\tIf (D71 <= 0) Then\n\n\t\t\tEstq032 = MWq032\n\n\t\t\tD1 = BHD2\n\t\t\tHD1 = 1.3\n\t\t\tD2 = -Estq032\n\t\t\tHD2 = 0.3 * H2\n\t\t\tH = H2\n\n\t\t\tHx = 7\n\t\t\tDx = 0\n\n\t\t\tDx=xFNBDATDmRHx(BDATBArtNr, D1, HD1, D2, HD2, H, Hx, iErr\n\t1\t\t, Dx)\n\n\t\t\tEstD72 = Dx\n\n\t\tElse\n\nc\t\t'...q03 = F(BHD,D7=0,H,INV 1) :..............................................\n\n\t\t\tD1 = BHD1\n\t\t\tHD1 = 1.3\n\t\t\tD2 = 0\n\t\t\tHD2 = 50\n\t\t\tH = H1\n\n\t\t\tq03Pct = 0.5\n\n\t\t\tCall xBDATMwQ03BWI(BDATBArtNr, BHD1, H1, q03Pct, MwQ03BWI,\n\t1\t\t\t\t\t\t\tStDevQ03BWI, MwQ03BWIPct)\n\t\t\tMWq031 = MwQ03BWI\n\nc\t\t'...q03 = F(BHD,D7,H,INV 1) :................................................\n\n\t\t\tD1 = BHD1\n\t\t\tHD1 = 1.3\n\t\t\tD2 = D71\n\t\t\tHD2 = 7\n\t\t\tH = H1\n\n\t\t\tHx = 0.05 * H\n\t\t\tDx = xFNBDATDmRHx(BDATBArtNr, D1, HD1, D2, HD2, H, Hx,\n\t1\t\t\t\t\t\tiErr, D005)\n\n\t\t\tHx = 0.3 * H\n\t\t\tDx = xFNBDATDmRHx(BDATBArtNr, D1, HD1, D2, HD2, H, Hx,\n\t1\t\t\t\t\t\tiErr, D03)\n\n\t\t\tq031 = D03 / D005\n\nc\t\t'...Fortschreibung :........................................................\n\n\t\t\tEstq032 = q031 + (MWq032 - MWq031)\n\n\t\tEnd If\n\n\t\tD1 = BHD2\n\t\tHD1 = 1.3\n\t\tD2 = -Estq032\n\t\tHD2 = 0.3 * H2\n\t\tH = H2\n\n\t\tHx = 7\n\t\tDx = 0\n\n\t\tDx = xFNBDATDmRHx(BDATBArtNr, D1, HD1, D2, HD2, H, Hx, iErr, Dx)\n\nc\t\t******************************\n\t\tIf (Dx > D71) Then\n\t\t\tEstD72 = Dx\n\t\tElse\n\t\t\tiErr = iErr + 1\n\t\t\tEstD72 = D71 * BHD2 / BHD1\n\t\tEnd If\nc\t\t******************************\n\n\nc\t\t******************************\n\t\tFNBdatEstq032 = Estq032\nc\t\t******************************\n\n\tEnd Function FNBDATEstQ032\n\n\nc\t***************************************************************************************\n\tReal*4 Function FNBDATHxDx(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHxDx\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser (Dx) :...........................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATHxDx = xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,Hx,Dx,IErr)\nc\t----------------------------------------------------------------------------------------\n\n\tEND Function FNBDATHxDx\n\n\nc\t***************************************************************************************\n\tReal*4 Function xFNBDATHxDx(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser (Dx) :...........................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\n \t\tInteger*2\tNSFktNr\t\t\t/1/\n\t\tReal*4\t\tNSFktPar\t\t/0/\n\n\t\tReal*4\t\tA\t\t\t\t/0/\n\t\tReal*4\t\tB\n\t\tReal*4\t\tNSFktAbsErr\t\t/1e-3/\n\t\tReal*4\t\tNSFktXAbsErr\t/0/\n\t\tReal*4\t\tNSFktXRelErr\t/1e-3/\n\n\t\tInteger*2\tMIt\t\t\t\t/100/\n\t\tReal*4\t\tx1\n\t\tReal*4\t\tx2\n\t\tReal*4\t\tXNS\n\t\tInteger*2\tNIt\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tA = 0\n\t\tB =\tH\n\n\t\tcall BDATNullStellenSuche\n\t1\t\t(\tBDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t2\t\t\tNSFktNr, Dx,A, B,\n     3\t\t\tNSFktAbsErr, NSFktXAbsErr, NSFktXRelErr,\n     4\t\t\tMIt, x1, x2, Hx, NIt, IErr\n\t5\t\t)\n\n\t\txFNBDATHxDx = Hx\n\n\tEND Function xFNBDATHxDx\n\n\nc\t...<<07.03.03>> : ?nderung :............................................................\n\n\nc\t***************************************************************************************\n\tReal*4 Function FNBDATHxDxoR(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHxDxoR\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser oR (Dx) :.......................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATHxDxoR = xFNBDATHxDxoR(BDATBArtNr,D1,H1,D2,H2,H,Hx,Dx,\n\t1\tIErr)\nc\t----------------------------------------------------------------------------------------\n\n\tEND Function FNBDATHxDxoR\n\n\nc\t***************************************************************************************\n\tReal*4 Function xFNBDATHxDxoR(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser oR (Dx) :.......................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\n \t\tInteger*2\tNSFktNr\t\t\t/2/\n\t\tReal*4\t\tNSFktPar\t\t/0/\n\n\t\tReal*4\t\tA\t\t\t\t/0/\n\t\tReal*4\t\tB\n\t\tReal*4\t\tNSFktAbsErr\t\t/1e-3/\n\t\tReal*4\t\tNSFktXAbsErr\t/0/\n\t\tReal*4\t\tNSFktXRelErr\t/1e-3/\n\n\t\tInteger*2\tMIt\t\t\t\t/100/\n\t\tReal*4\t\tx1\n\t\tReal*4\t\tx2\n\t\tReal*4\t\tXNS\n\t\tInteger*2\tNIt\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tA = 0\n\t\tB =\tH\n\n\t\tcall BDATNullStellenSuche\n\t1\t\t(\tBDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t2\t\t\tNSFktNr, Dx,A, B,\n     3\t\t\tNSFktAbsErr, NSFktXAbsErr, NSFktXRelErr,\n     4\t\t\tMIt, x1, x2, Hx, NIt, IErr\n\t5\t\t)\n\n\t\txFNBDATHxDxoR = Hx\n\n\tEND Function xFNBDATHxDxoR\n\n\nc\t...<<07.03.03>> : ?nderung :............................................................\n\n\nc\t***************************************************************************************\n\tReal*4 Function FNBDATHxDxoRFoRu(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHxDxoRFoRu\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser oR mit forstlicher Rundung [Dx]:................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\t\tFNBDATHxDxoRFoRu = xFNBDATHxDxoRFoRu(BDATBArtNr,D1,H1,D2,H2,H\n\t1\t,Hx,Dx,IErr)\nc\t----------------------------------------------------------------------------------------\n\n\tEND Function FNBDATHxDxoRFoRu\n\n\nc\t***************************************************************************************\n\tReal*4 Function xFNBDATHxDxoRFoRu(\tBDATBArtNr,D1,H1,D2,H2,H,\n\t2\t\t\t\t\t\t\t\tHx,Dx,IErr)\nc\t***************************************************************************************\n\nc    \t...\tH?he (Hx) zu gegebenem Durchmesser (Dx) :...........................................\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\n \t\tInteger*2\tNSFktNr\t\t\t/3/\n\t\tReal*4\t\tNSFktPar\t\t/0/\n\n\t\tReal*4\t\tA\t\t\t\t/0/\n\t\tReal*4\t\tB\n\t\tReal*4\t\tNSFktAbsErr\t\t/1e-3/\n\t\tReal*4\t\tNSFktXAbsErr\t/0/\n\t\tReal*4\t\tNSFktXRelErr\t/1e-3/\n\n\t\tInteger*2\tMIt\t\t\t\t/100/\n\t\tReal*4\t\tx1\n\t\tReal*4\t\tx2\n\t\tReal*4\t\tXNS\n\t\tInteger*2\tNIt\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tA = 0\n\t\tB =\tH\n\n\t\tcall BDATNullStellenSuche\n\t1\t\t(\tBDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t2\t\t\tNSFktNr, Dx,A, B,\n     3\t\t\tNSFktAbsErr, NSFktXAbsErr, NSFktXRelErr,\n     4\t\t\tMIt, x1, x2, Hx, NIt, IErr\n\t5\t\t)\n\n\t\txFNBDATHxDxoRFoRu = Hx\n\n\tEND Function xFNBDATHxDxoRFoRu\n\n\nc\t...<<07.03.03>> : ?nderung :............................................................\n\n\nc\t****************************************************************************************\n\treal*4 function FNBDATQ03VHDx\n\t1\t\t(\tBDATBArtNr,\tD1,\tH1, H, Dx, VolHDx,\n     2\t\t\tMIt, q031, q032, q03x, NIt, IErr\n\t3\t\t)\nc\t****************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATQ03VHDx\n\nc\t---------------------------------------------------------------------------------------\nc     Formquotient q0.3x zu VolHDx (Volumen bis zum GrenzDurchmesser Dx)\nc\t---------------------------------------------------------------------------------------\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tH\n\t\tReal*4\t\tDx\n\t\tReal*4\t\tVolHDx\n\n\t\tInteger*2\tMIt\n\t\tReal*4\t\tq031\n\t\tReal*4\t\tq032\n\t\tReal*4\t\tq03x\t\t\t\t\t\t! Nullstelle\n\n\t\tInteger*2\tNIt\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tInteger*2\tNSFktNr\n\t\tReal*4\t\tNSFktPar\n\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\n\t\tReal*4\t\tNSFktAbsErr\t\t\t\t/1E-5/\n\t\tReal*4\t\tNSFktXAbsErr\t\t\t/0.00/\n\t\tReal*4\t\tNSFktXRelErr\t\t\t/1E-3/\n\n\t\tReal*4\t\tx1\n\t\tReal*4\t\tx2\n\t\tReal*4\t\tXNs\n\n\t\tReal*4\t\tSekLng\t\t\t\t\t/2/\n\t\tReal*4\t\tVolABmR\t\t\t\t\t/0/\n\n\t\tReal*4\t\tHDx1\n\t\tReal*4\t\tHDx2\t\t\t\t\t/0/\n\t\tReal*4\t\tHDx3\t\t\t\t\t/0/\n\n\t\tReal*4\t\tA\t\t\t\t\t\t/0/\n\t\tReal*4\t\tB\t\t\t\t\t\t/0/\n\n\t\tReal*4\t\tVolHDx1\t\t\t\t\t/0/\n\t\tReal*4\t\tVolHDx2\t\t\t\t\t/0/\n\t\tReal*4\t\tVolHDx3\t\t\t\t\t/0/\n\nc\t----------------------------------------------------------------------------------------\n\n \t\tReal*4\t\tX3\n\t\tReal*4\t\tf1\n\t\tReal*4\t\tf2\n\t\tReal*4\t\tf3\n\t\tReal*4\t\ts12\n \t\tInteger*2\tIt\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tIt = 0\n\t\tA=0\n\t\tx1 = q031\n\t\tx2 = q032\n\nc\tGrenzh?he/Volumen zu Dx und q031 :......................................................\n\n\t\tH2=0\n\t\tD2=-x1\n\n\t\tHDx1\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,Hx,Dx,IErr)\n\n\t\tA=0\n\t\tB=HDx1\n\n\t\tVolHDx1 = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,H,A,HDx1\n     2\t\t\t\t\t\t,SekLng,IErr,VolABmR)\n\n\t\tf1= VolHDx1 - VolHDx\n\nc\tGrenzh?he/Volumen zu Dx und q032 :......................................................\n\n\t\tH2=0\n\t\tD2=-x2\n\t\tHDx2\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,Hx,Dx,IErr)\n\n\t\tA=0\n\t\tB=HDx2\n\t\tVolHDx2 = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,H,A,B,SekLng,\n     2\t\t\t\t\t\tIErr,VolABmR)\n\n\t\tf2= VolHDx2 - VolHDx\n\n\t\tIf (f1 * f2.lt.0) Then\n\t\tElseIf (f1 * f2.gt.0) Then\n\t\t\tIErr = 1\n\t\t\tq03x = XNs\n\n\t\t\tFNBDATQ03VHDx = q03x\n\n\t\t\treturn\n\t\tElse\n\t\t\tIErr = 0\n\t\t\tIf (Abs(f1).lt.Abs(f2)) Then\n\t\t\t\tXNs = x1\n\t\t\tElse\n\t\t\t\tXNs = x2\n\t\t\tEnd If\n\t\t\tq03x = XNs\n\n\t\t\tFNBDATQ03VHDx = q03x\n\n\t\t\treturn\n\t\tEnd If\n\n\t\tIt = 0\n\n\t\tDo While (It.lt.MIt)\n\t\t\tIt = It + 1\n\t\t\tIf (Abs(f2).lt.NSFktAbsErr) Then\n\t\t\t\tXNs = x2\n\t\t\t\tIErr = 0\n\t\t\t\tq03x = XNs\n\n\t\t\t\tFNBDATQ03VHDx = q03x\n\n\t\t\t\treturn\n\t\t\tElseIf\n\t1\t\t\t(Abs(x2 - x1).le.(Abs(x2) * NSFktXRelErr+NSFktXAbsErr))\n\t2\t\tThen\n\t\t\t\tXNs = x2\n\t\t\t\tIf (Abs(f1).lt.Abs(f2)) Then\n\t\t\t\t\tXNs = x1\n\t\t\t\tEnd If\n\nc\t...<<11.12.02>> : ?nderung :............................................................\n\n\t\t\t\tiErr=0\n\t\t\t\treturn\n\t\t\tElse\n\t\t\t\ts12 = (f2 - f1) / (x2 - x1)\n\t\t\t\tX3 = x2 - f2 / s12\n\nc\t\t\tGrenzh?he/Volumen zu Dx und q032 :..............................................\n\n\t\t\t\tH2=0\n\t\t\t\tD2=-x3\n\t\t\t\tHDx3\t= xFNBDATHxDx(BDATBArtNr,D1,H1,D2,H2,H,Hx,Dx\n\t1\t\t\t\t\t\t\t\t\t,IErr)\n\n\t\t\t\tA=0\n\t\t\t\tB=HDx3\n\t\t\t\tVolHDx3 = xFNBDATVolABmR(BDATBArtNr,D1,H1,D2,H2,H,A,B,\n     2\t\t\t\t\t\t\t\tSekLng,IErr,VolABmR)\n\n\t\t\t\tf3= VolHDx3 - VolHDx\n\n\t\t\t\tIf (f2 * f3.le.0) Then\n\t\t\t\t\tx1 = x2\n\t\t\t\t\tf1 = f2\n\t\t\t\tElse\n\t\t\t\t\tf1 = f1 * f2 / (f2 + f3)\n\t\t\t\tEnd If\n\t\t\t\tx2 = X3\n\t\t\t\tf2 = f3\n\t\t\tEnd If\n\t\tend do\n\nc\t...Zul?ssige Anzahl von Iterationen erreicht ohne Konvergenz\n\n\t\tIErr = 3\n\n\tEnd Function FNBDATQ03VHDx\n\n\nc\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nc\t+++\t\t\t\t\t\t\t\t\tlokale Prozeduren\t \t\t\t\t\t\t\t +++\nc\t++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nc\tlokal:\tCDFNORM (NUM)\t CDFNORMInv (NUM)\nc\nc\t****************************************************************************************\n\tsubroutine CDFNORM (mw,StDev,x,CDFx)\nc\t****************************************************************************************\n\nc\tSummenfunktion (CDF) der Normalverteilung :.............................................\n\nc\t\tUSE numerical_libraries\n\t\treal*4 mw\n\t\treal*4 StDev\n\t\treal*4 x\n\t\treal*4 CDFx\n\n\t\treal*4 N01\n\n\t\tif (StDev <=0) then\n\t\t\tCDFx = -1\n\t\t\treturn\n\t\tend if\n\n\t\tN01 = (x-mw)/StDev\n\nc\t\tCDFx=ANORDF(N01)\n\t\tCDFx=-1\n\n\tend subroutine CDFNORM\n\n\nc\t****************************************************************************************\n\tsubroutine CDFNORMInv (mw,StDev,CDFx,x)\nc\t****************************************************************************************\n\nc\tInverse Summenfunktion (Percentile) der Normalverteilung :..............................\n\nc\t\tUSE numerical_libraries\n\n\t\treal*4 mw\n\t\treal*4 StDev\n\t\treal*4 CDFx\n\t\treal*4 x\n\n\t\treal*4 N01\n\n\t\tif (CDFx <= 0.0001) then\n\t\t\tx=-999999\n\t\t\treturn\n\t\telse if (CDFx>0.9999) then\n\t\t\tX=999999\n\t\t\treturn\n\t\telse\nc\t\t\tN01=ANORIN(CDFx)\n\t\t\tN01=1\n\t\t\tx=mw+N01*StDev\n\t\tend if\n\n\tend subroutine CDFNORMInv\n\n\nc\t****************************************************************************************\n\tSubroutine BDATNullStellenSuche\n\t1\t\t(\tBDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t2\t\t\tNSFktNr, NSFktPar,A, B,\n     3\t\t\tNSFktAbsErr, NSFktXAbsErr, NSFktXRelErr,\n     4\t\t\tMIt, x1, x2, XNs, NIt, IErr\n\t5\t\t)\nc\t****************************************************************************************\n\nc\t---------------------------------------------------------------------------------------\nc     NullStelle einer stetigen Funktion nach dem PegasusVerfahren vgl. Engeln-M?llges P2.8.2\nc\t---------------------------------------------------------------------------------------\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\n\t\tInteger*2\tNSFktNr\n\t\tReal*4\t\tNSFktPar\n\n\t\tReal*4\t\tA\n\t\tReal*4\t\tB\n\t\tReal*4\t\tNSFktAbsErr\n\t\tReal*4\t\tNSFktXAbsErr\n\t\tReal*4\t\tNSFktXRelErr\n\n\t\tInteger*2\tMIt\n\t\tReal*4\t\tx1\n\t\tReal*4\t\tx2\n\t\tReal*4\t\tXNs\t\t\t\t\t\t! Nullstelle\n\t\tInteger*2\tNIt\n\t\tInteger*2\tIErr\n\nc\t----------------------------------------------------------------------------------------\n\n \t\tReal*4\t\tX3\n\t\tReal*4\t\tf1\n\t\tReal*4\t\tf2\n\t\tReal*4\t\tf3\n\t\tReal*4\t\ts12\n \t\tInteger*2\tIt\n\nc\t----------------------------------------------------------------------------------------\n\n\t\tIt = 0\n\t\tx1 = A\n\t\tx2 = B\n\n\t\tCall BDATNullStellenFkt(BDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t1\t\t\t\t\t\t\tNSFktNr, NSFktPar, x1, f1)\n\n\t\tCall BDATNullStellenFkt(BDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t1\t\t\t\t\t\t\tNSFktNr, NSFktPar, x2, f2)\n\n\t\tIf (f1 * f2.lt.0) Then\n\t\tElseIf (f1 * f2.gt.0) Then\n\t\t\tIErr = 1\n\t\t\treturn\n\t\tElse\n\t\t\tIErr = 0\n\t\t\tIf (Abs(f1).lt.Abs(f2)) Then\n\t\t\t\tXNs = x1\n\t\t\tElse\n\t\t\t\tXNs = x2\n\t\t\tEnd If\n\t\t\treturn\n\t\tEnd If\n\n\t\tIt = 0\n\n\t\tDo While (It.lt.MIt)\n\t\t\tIt = It + 1\n\t\t\tIf (Abs(f2).lt.NSFktAbsErr) Then\n\t\t\t\tXNs = x2\n\t\t\t\tIErr = 0\n\t\t\t\treturn\n\t\t\tElseIf\n\t1\t\t\t(Abs(x2 - x1).le.(Abs(x2) * NSFktXRelErr+NSFktXAbsErr))\n\t2\t\tThen\n\t\t\t\tXNs = x2\n\t\t\t\tIf (Abs(f1).lt.Abs(f2)) Then\n\t\t\t\t\tXNs = x1\n\t\t\t\tEnd If\n\nc\t...<<11.12.02>> : ?nderung :............................................................\n\n\t\t\t\tiErr=0\n\t\t\t\treturn\n\t\t\tElse\n\t\t\t\ts12 = (f2 - f1) / (x2 - x1)\n\t\t\t\tX3 = x2 - f2 / s12\n\n\t\t\t\tCall BDATNullStellenFkt(BDATBArtNr,\tD1,\tH1,\tD2, H2, H,\n\t1\t\t\t\t\t\t\t\tNSFktNr, NSFktPar, x3, f3)\n\n\t\t\t\tIf (f2 * f3.le.0) Then\n\t\t\t\t\tx1 = x2\n\t\t\t\t\tf1 = f2\n\t\t\t\tElse\n\t\t\t\t\tf1 = f1 * f2 / (f2 + f3)\n\t\t\t\tEnd If\n\t\t\t\tx2 = X3\n\t\t\t\tf2 = f3\n\t\t\tEnd If\n\t\tend do\n\nc\t...Zul?ssige Anzahl von Iterationen erreicht ohne Konvergenz\n\n\t\tIErr = 3\n\n\tEnd Subroutine BDATNullStellenSuche\n\n\nc\t***************************************************************************************\n\tSubroutine BDATNullStellenFkt (\tBDATBArtNr,D1,H1,D2,H2,H,\n\t1\t\t\t\t\t\t\t\tNSFktNr,NSFktPar,X,Fx)\nc\t***************************************************************************************\n\n\nc    \t...NullStellen Funktion f?r das PegasusVerfahren :.....................................\n\n\n\t\tInteger*2\twBDATBArtNr\n\t\tReal*4\t\twD1\n\t\tReal*4\t\twH1\n\t\tReal*4\t\twD2\n\t\tReal*4\t\twH2\n\t\tReal*4\t\twH\n\n \t\tInteger*2\twNSFktNr\n\t\tReal*4\t\twNSFktPar\n\t\tReal*4\t\twX\n\t\tReal*4\t\twFx\n\n\t\tInteger*2\tBDATBArtNr\n\t\tReal*4\t\tD1\n\t\tReal*4\t\tH1\n\t\tReal*4\t\tD2\n\t\tReal*4\t\tH2\n\t\tReal*4\t\tH\n\n \t\tInteger*2\tNSFktNr\n\t\tReal*4\t\tNSFktPar\n\t\tReal*4\t\tX\n\t\tReal*4\t\tFx\n\nc\t---------------------------------------------------------------------------------------\n\n\t\tInteger*2\tIErr\n\t\tReal*4\t\tHx\n\t\tReal*4\t\tDx\n\t\tReal*4\t\tDmRHx,DoRHx\n\nc\t----------------------------------------------------------------------------------------\n\n\n\n\t\tIf (NSFktNr .eq. 1) Then\n\nc\t\t\t...X: H?he zu gegebenem Durchmesser: Hx = H (Dx) :...............................\n\n\t\t\tDx = NSFktPar\n\t\t\tHx = X\n\n\t\t\tDmRHx = xFNBDATDmRHx(BDATBArtNr, D1, H1, D2, H2, H, Hx\n\t1\t\t\t\t\t\t\t,IErr,DmRHx)\n\t\t\tFx = Dx - DmRHx\n\n\t\tElse If (NSFktNr .eq. 2) Then\n\n\nc\t\t\t...X: H?he zu gegebenem Durchmesser oR: Hx = H (Dx) :............................\n\n\n\t\t\tDx = NSFktPar\n\t\t\tHx = X\n\n\t\t\tDoRHx = xFNBDATDoRHx(BDATBArtNr, D1, H1, D2, H2, H, Hx\n\t1\t\t\t\t\t\t\t,IErr,DoRHx)\n\t\t\tFx = Dx - DoRHx\n\n\t\tElse If (NSFktNr .eq. 3) Then\n\n\nc\t\t\t...X: H?he zu gegebenem Durchmesser oR mit forstlicher Rundung Hx = H (Dx) :.....\n\n\n\t\t\tDx = NSFktPar\n\t\t\tHx = X\n\n\t\t\tDoRHx = xFNBDATDoRHx(BDATBArtNr, D1, H1, D2, H2, H, Hx\n\t1\t\t\t\t\t\t\t,IErr,DoRHx)\n\n\t\t\tFx = Dx - xFNBDATDxFoRu(DoRHx)\n\n\t\tElse\n\n\t\t\tDx = NSFktPar\n\t\t\tHx = X\n\n\t\t\tDmRHx = xFNBDATDmRHx(BDATBArtNr, D1, H1, D2, H2, H, Hx\n\t1\t\t\t\t\t\t\t,IErr,DmRHx)\n\n\t\t\tFx = Dx - DmRHx\n\n\t\tEnd If\n\n\tEND Subroutine BDATNullStellenFkt\n\n\nc\t...<<07.03.03>> : ?nderung :............................................................\n\n\nc\t***************************************************************************************\n\tReal*4 Function FNBDATDxFoRu(Dx)\nc\t***************************************************************************************\n\n!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATDxFoRu\n\nc    \t...\tDurchmesser forstlich gerundet [Dx] :..............................................\n\n\t\tReal*4\t\tDx\n\n\t\t\tFNBDATDxFoRu=xFNBDATDxFoRu(Dx)\n\n\tEND Function FNBDATDxFoRu\n\n\nc\t***************************************************************************************\n\tReal*4 Function xFNBDATDxFoRu(Dx)\nc\t***************************************************************************************\n\nc    \t...\tDurchmesser forstlich gerundet [Dx] :..............................................\n\n\t\tReal*4\t\tDx\n\n\t\tif (20.le.Dx) then\n\t\t\txFNBDATDxFoRu=Dx-0.75\n\t\telse\n\t\t\txFNBDATDxFoRu=Dx-0.50\n\t\tend if\n\n\tEND Function xFNBDATDxFoRu\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n!c\t***************************************************************************************\n!\tReal*4 Function FNBDATHStockEnde\n!c\t***************************************************************************************\n!\n!\t\tREAL*4\t\tHStockEnde\n!\t\tREAL*4\t\tHStHAnfang\n!\t\tREAL*4\t\tLngStH\n!\t\tREAL*4\t\tHStHLzEnde\n!\t\tREAL*4\t\tHBDATGes\n!\n!\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n!\t1\t\t\t\t\t,\tHBDATGes\n!\n!!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHStockEnde\n!\n!\t\tFNBDATHStockEnde=HStockEnde\n!\n!\tEND Function FNBDATHStockEnde\n\n!c\t***************************************************************************************\n!\tReal*4 Function FNBDATHStHAnfang\n!c\t***************************************************************************************\n!\n!\t\tREAL*4\t\tHStockEnde\n!\t\tREAL*4\t\tHStHAnfang\n!\t\tREAL*4\t\tLngStH\n!\t\tREAL*4\t\tHStHLzEnde\n!\t\tREAL*4\t\tHBDATGes\n!\n!\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n!\t1\t\t\t\t\t,\tHBDATGes\n!\n!!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHStHAnfang\n!\n!\t\tFNBDATHStHAnfang=HStHAnfang\n!\n!\tEND Function FNBDATHStHAnfang\n\n!c\t***************************************************************************************\n!\tReal*4 Function FNBDATLngStH\n!c\t***************************************************************************************\n!\n!\t\tREAL*4\t\tHStockEnde\n!\t\tREAL*4\t\tHStHAnfang\n!\t\tREAL*4\t\tLngStH\n!\t\tREAL*4\t\tHStHLzEnde\n!\t\tREAL*4\t\tHBDATGes\n!\n!\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n!\t1\t\t\t\t\t,\tHBDATGes\n!\n!!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATLngStH\n!\n!\t\tFNBDATLngStH=LngStH\n!\n!\tEND Function FNBDATLngStH\n\n!c\t***************************************************************************************\n!\tReal*4 Function FNBDATHStHLzEnde\n!c\t***************************************************************************************\n!\n!\t\tREAL*4\t\tHStockEnde\n!\t\tREAL*4\t\tHStHAnfang\n!\t\tREAL*4\t\tLngStH\n!\t\tREAL*4\t\tHStHLzEnde\n!\t\tREAL*4\t\tHBDATGes\n!\n!\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n!\t1\t\t\t\t\t,\tHBDATGes\n!\n!!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHStHLzEnde\n!\n!\t\tFNBDATHStHLzEnde=HStHLzEnde\n!\n!\tEND Function FNBDATHStHLzEnde\n\n!c\t***************************************************************************************\n!\tReal*4 Function FNBDATHBDATGes\n!c\t***************************************************************************************\n!\n!\t\tREAL*4\t\tHStockEnde\n!\t\tREAL*4\t\tHStHAnfang\n!\t\tREAL*4\t\tLngStH\n!\t\tREAL*4\t\tHStHLzEnde\n!\t\tREAL*4\t\tHBDATGes\n!\n!\t\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n!\t1\t\t\t\t\t,\tHBDATGes\n!\n!!dec$ ATTRIBUTES  DLLEXPORT :: FNBDATHBDATGes\n!\n!\t\tFNBDATHBDATGes=HBDATGes\n!\n!\tEND Function FNBDATHBDATGes\n\nc\t#############################  BWI BDAT 1.0  ###########################################\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\nc\t?nderungen: <<05.11.02>> :--------------------------------------------------------------\nc\t?nderungen: <<01.07.02>> :--------------------------------------------------------------\n\nC....\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tVersion:17.10.01\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n\nc      REAL wH095\n\nc\t...<<17.10.01>> :...(Rindenfunktion)  ..................................................\n\nc.... ?nderung 23.10.00 Kublin :.........................................\n\nc     M?glichkeit (Ddo,Hho) abweichend vom D7 oder q0.30 vorzugeben\n\nc.... ?nderung 23.10.00 Kublin :.........................................\n\nC     *******************************************************************\nC     * Voluminierung & Sortierung  ***  VOL = INTEGRAL(SPLINE(Du,Do,H) *\nC     *******************************************************************\nC     * FILE: BDAT_B.FOR * STAND: 13.12.90 * AUTOREN: SCHARNAGL/KUBLIN  *\nC     *******************************************************************\n\n\nc     ###################################################################\n      SUBROUTINE BDAT(ibba,Ddu,Hhu,Ddo,Hho,Hoe,Stx,Hkz,Sk,Azopf,\n     *                     ksthh,zzost,Zzoab,Sok,Klasse,Volum,Bhd,ifeh)\nc     ###################################################################\n\n\nc                                               VERSION: 13.12.90 Kublin\nc  Eingabe(E)/ Ausgabe(A) - Variable\nc\nc        Name(bei Eingabe-Ausgabe)\nc             Name (im Programm) bei m?glicher Wert?nderung\nc                        Variablentyp  (i=Integer,R=Real)\nc                               Beschreibung\nc                               ============\nc  E     Ibba(Iba)       I      Baumart nach Baumartenschluessel\nc                               s. Block data\nc                               iba bleibt konstant !\nc  E     Ddu (Du)        R      Unterer Durchmesser (cm)\nc  E     Hhu (Hu)        R      H?he des  unt.Durchmessers am Stamm (cm)\nc  E     Ddo (Do)        R      Oberer Durchmesser (cm)\nc                               Ddo > 0 und Hho=0 und ->                     Hho = 7\nc                               Ddo < 0               -> q0.3 = ABS(Ddo) und Hho = 0.3*Hoe\nc            (D7m)       R                  \"\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\nc  E     HHo                    H?he oberer Durchmesser 0 und Ddo>0 -> Hho = 7m\nc                                                             Ddo<0 -> Q0.3 = ABS (Ddo) Hho = 0.3*Hoe\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\nc  E     Hoe (H)         R      H?he des Baumes (m)\nc            (Hbr)       R      Hilfsv. fuer H,H wird durch Hkz\nc                               ge?ndert\nc  E     Stx (Stxu)      R      L?nge X-Holz am Stammfuss\nc  E     Hkz             I      H?henkennziffer 1 = Wipfelbruch\nc                                               2 = Gipfelbruch\nc  E     Sk              I      Stammkennziffer  s. Dokum. S.83\nc  E     Azopf(Azop)     R      Aufarbeitungszopf(cm)\nc  E     Ksthh(sthh)     R      H?he bis zu der Stammholz ausgehalten\nc                                     werden darf\nc  E     Zzost(zost)     R      Zopf bis zu dem Stammholz ausgehalten\nc                               werden darf\nc  E     Zzoab(zoab)     R      Zopf bis zu dem Abschnitt ausgehalten\nc                               werden darf\nc  E     Sok(Sokz)       I      Sortierkennziffer 0=keine Sortierung\nc                                     1=Mittenst. 2=Heilbronner\nc  A     Klasse          I      St?rkeklassen (Feld 1-6)\nc         (1...Kl )      I      Klasse     Stammholz          a\nc         (2...Ukl)      I      Unterklasse    \"     werden fuer Ausg.\nc         (3...Klx)      I      Klasse       X-Holz         in Klasse\nc         (4...Uklx)     I      Unterklasse    \"          uebertragen\nc         (5...Kla )     I      Klasse    Abschnitt\nc         (6...Ukla)     I      Unterklasse    \"\nc\nc\nc  A     Volum           R      Volumenfeld  (Feld 1-7)\nc         ( 1...Vol )           Hilsgr??e f?r Indh.ber.Laubholz\nc                                (Stammholz o.R. incl. X-Holz)\nc         ( 2...Volx)           X-Holz Efm. o. Ri.\nc         ( 3...Vols)           Stammholz   \"\nc         ( 4...Vola)           Stammteil(-abschnitt)  \"\nc         ( 5...Voli)           Industrieholz          \"\nc         ( 6...Volu)           nicht verwertetes Derbholz  \"\nc         ( 7...Volr)           Ernteverlust                \"\nc\nc  A     Bhd             R      BHD aus Schaftk. wenn Du <>1,30\nc  A     Ifeh            I      Fehler der Eingabegr?ssen\nc                               nach Fehlertabelle s.Doc.  S.84 ff.\nc\nc==================================================================\nc   Variable im Programm:\nc        Hazop           R      H?he (Lage) des Aufarbeitungszopfes\nc        Hdgren          R       \"            \"  Derbholzgrenze\nc        Hsthzop         R       \"            \"  Stammholzzopfes\nc        Habzop          R       \"            \"  Abschnittzopfes\nc        Ba              I      zugeordneter Baumarten-Index fuer\nc                               best.Funktion\nc\nc   Schaft\nc\nc==================================================================\nc        Konstante :\nc        ===========\nc  K     Dgr (Dgrenz)    R      Derbholzgrenze  = 7 cm\nc\nc =================================================================\nc\nc  K     Volk(6,30,3)    I      Volumen nach Krenn (ba,mm-St,h?-St)\nc                               s.BD.\nc  K     Hoehr(6,6)      R      H?henrahmen fur Krenn-Vol.(h?-st)\nc  K     Azo(7,3)        R      Durchschn. Aufarbeitungszopf der\nc                               Baumarten\nc  K     Rin(28,4,3)     R      Koeffizienten fuer Rindenfunktionen\nc                               Rin(Ba,H?hen-St im Baum,Koeffz-Nr)\nc  K     Rinh(3,5,3)     R      wie Rin jedoch fuer H-Sortierung\nc  K     Ban (36,7)      I      Baumartenindex verschiedene\nc                               Funktionen nach Zuordnungstabelle\nc\nc  Schaftkurvenvariable:                 s.Dok.\nc  K     Nnp,Np,Nxk,B,Xk\nc  K     nxk95a,nxk95b,xk95a,xk95b,a95,b95\nc  K     Add07,Md07,Snxkn7,Sxk07,Sdo7\nc  K     Add07(14,5:45,3)I      Addresse der D07-Werte im Feld\nc                               Md07(20333)   Add07(Ba,BHD,  )\nc  K     Md07(20333)     I      Feld der Massentafel-D07 (*1000)\nc\nc\nc        Yy              R      Hilfsvariable\nc        Durel           R\nc        Hurel           R      relative Lage des unteren Durchmessers\nc        Horel           R      relative Lage des oberen Durchmessers\nc  K     Ho              R      H?he (Lage) des oberen Durchmessers\nc                                auf 7m festgesetzt\nc        D095            R      Gesch?tzter Durchmesser in 5% der H?he\nc        Dnorm           R      Normungsdurchmesser (=Du)\nc        D07             R      Relativdurchmesser in 30% der H?he\nc                                 iteriert oder aus Tabelle (SUB D07tab)\nc        Xsi             R      Hilfsgr?sse bei D07-Iteration\nc        Ifehl           I      Fehler-Zeiger zeigt an, ob Iteration\nc                                 erfolgreich war\nc\nc\nc        D07lu           R      untere Iterationsgrenze fuer D07\nc        D07lo           R      obere  Iterationsgrenze fuer D07\nc\nc\n      implicit logical (a-z)\n\n\nc\t...<<11.11.02>> : ?nderung :.......................................................\nc\nc\treal DuTmp,HuTmp,DoTmp,HoTmp,HTmp,DoLoTmp,DoLuTmp,DTmp\n\nc............................................?nderung: 17.01.91 Kublin\n\n      REAL ABS,AMAX1,AMIN1\nc     real hhxx\n\nc.....................................................................\n\n      INTEGER Nnp,Np,Nxk,Sk,Sokz,Sok,Hkz,I\n      REAL B(1:80,1:8),Xk(1:6) ,Azopf,Stx,Hoe,Ddu,Ddo,Hhu,X,D7m,Ksthh\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\n      REAL Hho, wDdu\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\n      REAL Rin(1:28,1:4,1:3)\n      REAL Rinh(1:3,1:5,1:3)\n      REAL a95(1:24,1:8),b95(1:24,1:8)\n      REAL xk95a(7,8),xk95b(7,8)\n      INTEGER nxk95a(8),nxk95b(8)\n      REAL Yy,Durel,Xsi\n      INTEGER Nbaum,ibba,ifeh\n      REAL D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      REAL Spline,hhrel,kw\n      REAL Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zzost,Zost\n      REAL Zzoab,Zoab,Hbr\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n      REAL wH095\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n\nC\n      INTEGER Ifehl,Ianz\n      REAL F1,F2,D07lo,D07lu,Bb,Aa\n      REAL Azo(7,0:3)\n      INTEGER Kl,Ukl,Klx,Uklx,Kla,Ukla\n      REAL Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      INTEGER Ba,Iba,Ban(36,7)\n      REAL sthh,Stxu\n      INTEGER Volk(6,30,3),Klasse(6)\n      REAL Volum(7),bhd ,dgr,hoehr(6,6)\n      integer*2 md07(20333)\n      INTEGER Add07(14,5:45,3)\n      REAL Sxk07(7,8),Sd07(24,8)\n      INTEGER Snxkn7(8)\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tREAL*4\t\tHStockEnde\n\tREAL*4\t\tHStHAnfang\n\tREAL*4\t\tLngStH\n\tREAL*4\t\tHStHLzEnde\n\tREAL*4\t\tHBDATGes\n\n\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n      COMMON /Volk/Volk,hoehr\n      COMMON /Wert1/ sthh,Sokz,Stxu\n      COMMON /Klasse/ Kl,Ukl,Klx,Uklx,Kla,Ukla\n      COMMON /Volum/ Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      COMMON /Duazop/ Azo\n      COMMON /It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Rind/Rin,Rinh\n      COMMON /Baum/ Ba,Iba,Ban\n      COMMON /Schaft/  Nnp,Np,Nxk,B,Xk\n      COMMON /d95/nxk95a,nxk95b,xk95a,xk95b,a95,b95\n      COMMON /D07/ Add07,Md07,Snxkn7,Sxk07,Sd07\n      COMMON /Sk/ Yy,Durel\n      COMMON /Baum0/ Nbaum\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n\nc\t----------------------------------------------------------------------------------------\n\nc     return\nc     write(*,*) '***** Hallo *****'\nc     return\nC\n      do 10 i=1,6\n        Klasse(i)=0\n        Volum(i)=0\n   10 continue\n\n      hstzop=0\n      habzop=0\n      hazop=0\n      ifeh=0\n      Volum(7)=0\n\n      Nbaum=1\nc                                        ....?nderung 31.01.91 Kublin\n      Iba=ibba\n      if(iba.lt.1.or.iba.gt.36)ifeh=1\n      Stxu=Stx\n      Azop=Azopf\n      dgr=7\n      Dgrenz=dgr\n\n      Du=Ddu\n      Bhd=Ddu\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\n      wDdu=Ddu\n      Do=Ddo\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\nc.....                   oberer Durchmesser darf nicht > unterer sein\n\n      if(do.gt.du*.99)do=du*.99\n\n      Hu=Hhu\n      H=Hoe\n      if(h.le.0.and.du.ge.10)ifeh=2\n\nc\t\t?nderung <<15.12.03>> :--------------------------------------------------------------\n\n      if(du.le.0)ifeh=3\nc     if(hu.gt.2.5)ifeh=4\n      if(ifeh.gt.0)return\n      sthh=Ksthh\n      Zost=Zzost\n      Zoab=Zzoab\n      Hbr=h\n      Sokz=Sok\n\nc.....                                     Hoehenkorrektur bei Hkz > 0\n\n      if(hkz.eq.1)H=h+2\n      if(hkz.eq.2)THEN\n        IF(Du.gt.30)THEN\n          H=30+(DU-30)*.3\n        ELSE\n          H=Du\n        END IF\n\nc.....                              Mindestzuschlag bei Wipfelbruch 4 m\n\n        IF(Hbr.gt.H-3)H=Hbr+4\n      END IF\nc     write(10,*) 'h,hbr',h,hbr\n      IF (Hu.le.0)  Hu=1.3\n\n\nc\tDuTmp=DDu\nc\tHuTmp=Hu\nc\tDoTmp=DDo\nc\tHoTmp=HHo\nc\tHTmp = H\n\n\nc.....................................................................\n\n      IF(h.ge.3)then\n\n        Ho=Hho\n        Horel=1.-Ho/H\n        Hurel=1.-Hu/H\n\n        D7m=Do\n        dnorm=du\n\nc.....  ?nderung 23.10.00 Kublin :....................................\n\nC       IF(Sk.eq.0.AND.Du.lt.20) D7m=0\nC\nc.....  ?nderung 23.10.00 Kublin :....................................\n\nC.....  ............D095-Sch?tzung aus Du u H  (Du wird =D1.3 gesetzt)\nC\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\nc     REAL wH095\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n\n\t  if (h>60) then\n\t\twH095=60\n\t  else\n\t    wH095=H\n\t  end if\n\n        Ba=Ban(iba,1)\n        Aa=Spline(wH095,Ba,Nxk95a,Xk95a,A95)\n        Bb=Spline(wH095,Ba,Nxk95b,Xk95b,B95)\n        D095=Aa+Bb*Du\n\nc\t?nderungen: <<19.01.04>> :--------------------------------------------------------------\n\nc\n        IF (D7m.GT.0.)  THEN\n\nC.....    d07-Startwert :..............................................\n\nc         Do=D7m                            (?nderung: 12.12.90 Kublin)\n\n          D07lu=.4\n          D07lo=.99\n\n          Ifehl=-1\n\n          CALL Fkt(D07lu,F1)\n          CALL Fkt(D07lo,F2)\n\nc\t\tF=Fdrel(D095,X,H,1-Ho/H)/Fdrel(D095,X,H,1-Hu/H)-Do/Du\n\n          Ianz=0\n          Xsi=0\n\n          CALL Pegasu(Ifehl,Ianz,F1,F2,Xsi,d07lu,d07lo)\n\nc         write(10,*)'ifehl,d07lu,xsi,d07lo',ifehl,d07lu,xsi,d07lo\n\n          IF (Ifehl.LT.3.AND.Ifehl.GE.0) THEN\n            D07=AMAX1(D07lu,AMIN1(Xsi,D07lo))\n          ELSE\n\n            IF(ifehl.eq.-1)THEN\n\nc\t\t\t...<<11.11.02>> : ?nderung :...............................................\n\nc\t\t\td07=D07lu\nc\t\t\tcall Kuwert(HHo,DoLuTmp)\n\nc\t\t\treal DuTmp,HuTmp,DoTmp,HoTmp,HTmp,DoLoTmp,DoLuTmp\n\n\nc\t\t\tDoLuTmp = xFNBDATDmRHx(\tIba, 135.0, 1.3,65.0,\nc\t1\t\t\t\t\t\t 7.0,HTmp,7,ifehl, DTmp)\nc\t\t\tDoTmp=-0.90\nc\t\t\tHoTmp=0.0\nc\t\t\tDuTmp=135\nc\t\t\tHuTmp=0.0\nc\t\t\tHTmp=60\nc\t\t\tx=7.0\nc\t\t\tIba=3\nc\t\t\tifehl=0\nc \t\t\tDoLuTmp = xFNBDATDmRHx(\tIba,DuTmp, HuTmp, DoTmp,\nc \t1\t\t\t\t\t\t HoTmp,HTmp, x, ifehl, DTmp)\n\nc\t--------------------------------------------------------------------\nc\t\t\tDoTmp=-.40\nc\t\t\tHoTmp=0.0\nc\t\t\tDuTmp=135\nc\t\t\tHuTmp=0.0\nc\t\t\tHTmp=60\nc\t\t\tx=7\nc\t\t\tIba=3\nc\t\t\tifehl=0\nc\t\t\tDTmp=0.0\n\nc \t\t\tDoLoTmp = xFNBDATDmRHx(\tIba, DuTmp, HuTmp, DoTmp,\nc \t1\t\t\t\t\t\t HoTmp,HTmp,x, ifehl, DTmp)\n\nc\t\t   if (DoLoTmp>65) then\nc\t\t\t  d07=.9333\nc\t\t   else\nc\t\t      d07=.40\nc\t\t   endif\n\nc\t--------------------------------------------------------------------\n\n \t\t\td07=D07lo\n\nc\nc\t...<<11.12.02>> : ?nderung :............................................................\n\nc \t\t\tcall Kuwert(HHo,DoLoTmp)\n\n\nc.....                                       (?nderung: 12.12.90 Kublin)\n                 ifeh=12\n\n                 CALL D07tab(ifehl)\n                 if (ifehl.eq.0) then\n                   ifeh=13\n                 end if\nc.....\n            ELSE\n               ifeh=14\n               d07=Xsi\n            END IF\n          END IF\n\n        ELSE\n\nc.....    ?nderung 23.10.00 Kublin :....................................\n\n          IF (D7m.LT.0.)        THEN\n\n\t\t\tHorel=.7\n\t\t\tD07 = ABS(D7m)\n\t\t\tHo=H*.3\n\nc.....\t\t?nderung 29.08.01 (Kublin) :....................................................\n\n\t\t\tif (1<=D07) then\n\t\t\t\tCALL D07tab(ifehl)\n\t\t\t\tiFEH = 15\n\t\t\tend if\n\nc\t\t\t?nderung 03.09.01 :.......................................\nc\nc \t\t\tD07=AMAX1(D07lu,AMIN1(D07,D07lo))\n\n          ELSE\n\nc.....      ?nderung 23.10.00 Kublin :..................................\n\n            Horel=.7\n            CALL D07tab(ifehl)\nc.....                                       (?nderung: 12.12.90 Kublin)\n            if (ifehl.eq.0) then\n              ifeh=13\n            end if\nc.....\n            Ho=H*.3\n          END IF\n        END IF\n\nC........................Unterer Durchmesser nicht bei 1.30m gemessen :\n\n        IF(ABS(hu-1.3).gt.0.005) then\nc                                        ....?nderung 31.01.91 Kublin\n          hhrel=1.-1.3/h\n          call Kuwert(Hhrel,Kw)\n          bhd=kw\n        END IF\n\n      ELSE\nc       ...................................(?nderung: 12.12.90 Kublin)\n\nc       H < 3 m : Anpassen einer Schaftkurve f?r Testzwecke. Wird bei\nc       bei der BWI nicht gebraucht, da f?r diese B?ume kein Volumen\nc       berechnet wird\n\nc       ..............................................................\n\nc       Ba=Ban(iba,1)\nc       Aa=Spline(H,Ba,Nxk95a,Xk95a,A95)\nc       Bb=Spline(H,Ba,Nxk95b,Xk95b,B95)\nc       D095=Aa+Bb*Du\nc\nc       if(hu.le.0) then\nc         hu=1.3\nc       end if\nc       hurel=1.0-hu/h\nc\nc       Horel=.7\nc       CALL D07tab(ifehl)\nc\nc       if (ifehl.eq.0) then\nc         ifeh=13\nc       end if\nc\nc       Ho=H*.3\nc\nc       dnorm=du\nc.....  .............................................................\n\n      END IF\n\n      IF(D07.gt..95) D07=.95\n      if(d07.lt..40) D07=.40\n\nc............................................?nderung 11.12.90 Kublin\n\n      nbaum = 1\n\nc............................................?nderung 17.01.91 Kublin\n\nc\nc     Ausgabe der Baumparameter und der Durchmesser bei 0.0(0.1)1.0\nc     f?r Testzwecke. Ausgabe auf FILE # 10.\nc\nc.....................................................................\nc\nc     write(10,'(3(/),5x,a5,f10.3  )') 'H:   ',H\nc     write(10,'(     5x,a5,f10.3  )') 'Hu:  ',hu\nc     write(10,'(     5x,a5,f10.3  )') 'Du:  ',du\nc     write(10,'(     5x,a5,f10.3,/)') 'BHD: ',bhd\nc\nc     write(10,'(     5x,a5,f10.3  )') 'D095:',d095\nc     write(10,'(     5x,a5,f10.3,/)') 'D070:',d07\nc\nc     if (du.gt.0) then\nc\nc       hhxx  = 1.-1./h\nc       call kuwert(hhxx,kw)\nc       write(10,'(5x,a5,3f10.3)')     'D1 : ',1.0-hhxx,kw/du,kw\nc\nc       hhxx=1.-1.3/h\nc       call kuwert(hhxx,kw)\nc       write(10,'(5x,a5,3f10.3)')     'BHD:  ',1.0-hhxx,kw/du,kw\nc\nc       if (h.gt.7) then\nc         hhxx=1.-7./h\nc         call kuwert(hhxx,kw)\nc         write(10,'(5x,a5,3f10.3)')    'D7 : ',1.0-hhxx,kw/du,kw\nc       else\nc         write(10,*)\nc       end if\nc\nc       write(10,'(/)')\nc\nc       do 12300 hhxx=0.00,1.0001,.1\nc         call kuwert(1.-hhxx,kw)\nc         write(10,'(10x,3f10.3)') hhxx,kw/du,kw\nc12300  continue\nc\nc     end if\nc\nc......................................................................\n\nc     Liegt der Du bei 1.30m H?he und ist < 10, wird eine Durchmesser-\nc     abrundung durch + 0.5 ausgeglichen :\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\n      if(Bhd.eq.Ddu)wDdu=Ddu+.5\n\nc...................................................Volumen nach Krenn\nc..............................................?nderung 11.03.94 St?hr\n\n      IF(wDdu.lt.10)then\n\t IF(wDdu.lt.7) then\n           ifeh=15\n           RETURN\n         ENDIF\n         ba=ban(iba,6)\n\t Volr=Volk(ba,INT((wDdu-7)*10.0001)+1,2)*0.0001\n         Volum(1)=Volr\n         Volum(7)=volr*.3\n         Volum(5)=volr-volum(7)\n\nc.....?nderung 23.10.00 Kublin :..........................................\n\n         RETURN\n      ELSE\n        IF(H.lt.3)then\n\t  ifeh=15\n          RETURN\n        ENDIF\n      ENDIF\n\nc        Sch?tzung des Aufarbeitungszopfes mit Funktionen falls nicht\nc\t\t\t\t\t\t\t\t  eingegeben:\n\nc\t?nderungen: <<05.11.02>> :--------------------------------------------------------------\n\nc     IF(Azop.eq.0) THEN\n\n\tIF(Azop.lt.0.001) THEN\n        Ba=Ban(Iba,3)\n        X=Bhd\n        Azop=EXP(Azo(Ba,0)+Azo(Ba,1)*LOG(X)+Azo(Ba,2)*(LOG(X)**2)+\n     *           Azo(Ba,3)*X)\n      END IF\n\n      IF(Sk.gt.4) THEN\n\t RETURN\n      END IF\n\nc     Ueberpruefung der Sortier-Eingabeparameter bei Laubholz:.......\n\n      IF(Iba.gt.14) THEN\n        if(sokz.gt.0) sokz=3\n        IF(Sk.eq.1) then\n          IF(sthh.gt.0) ifeh=6\n          sthh=hbr*.7\n        end if\nc.....                                    (?nderung: 12.12.90 Kublin)\n\n        IF(Sk.eq.2) then\n          if (sthh.gt.0) then\n            IF(sthh.gt.7.or.sthh.lt.1.3) then\n              ifeh=7\n              sthh=5\n            endif\n          else\n            sthh=5.0\n          end if\n        endif\nc.....                                     (?nderung: 12.12.90 Kublin)\n        IF(Sk.eq.3.)then\n          if (sthh.gt.0) then\n            if (sthh.gt.3.or.sthh.lt.1.3) then\n              ifeh=8\n              sthh=.1\n            end if\n          else\n            sthh=0.1\n          end if\n        end if\nc.....                                   (?nderung: 12.12.90 Kublin)\n        IF(Sk.eq.4) then\n          if (sthh.gt.0) then\n            IF(sthh.gt.Hbr*.66) then\n              ifeh = 9\n              sthh = hbr*.66\n              hazop= hbr*.70\n            else\n              hazop  = hbr*.7\n            end if\n          else\n            sthh   = hbr*.66\n            hazop  = hbr*.7\n          end if\n        end if\n\n      ELSE\n\nc       .................................................Nadelholz :\n\n        IF(Sokz.gt.2) sokz=1\n\nc       write(10,*)'sokz,sthh,zost'\nc       write(10,*) sokz,sthh,zost\n\n        IF(Sokz.eq.1.and.Sthh.le.0.and.zost.le.0) Sokz=4\n\nc       write(10,*)'sokz'\nc       write(10,*) sokz\n\n        if(sk.eq.0.or.sk.eq.1)then\n          IF(sthh.gt.0) THEN\n             ifeh=10\n          ELSE\n             Sthh=Hbr\n          END IF\n        END IF\nc\n        if(sk.eq.2)then\n          sthh=5\n          habzop=5\n          hstzop=5\n        end if\n        if(sk.eq.3)then\n          sthh=.1\n          habzop=.1\n          hstzop=.1\n        end if\n\nc.....                                     (?nderung: 12.12.90 Kublin)\n\n        if(sk.eq.4)then\n          if (hkz.eq.0) then\n            ifeh=11\n          end if\n          if (sthh.gt.0) then\n            if(sthh.gt.hbr*.66)then\n              ifeh=9\n              sthh = hbr*.66\n              hazop= hbr*.70\n            else\n              hazop  = hbr*.7\n            end if\n          else\n            sthh   = hbr*.66\n            hazop  = hbr*.7\n          end if\n        end if\n      END IF\nc\nc.................................................Volumen Vfm mit Rinde\nc\n         volx=0\n         volu=0\n         vols=0\n         voli=0\n         vola=0\n         kl=0\n         ukl=0\n         kla=0\n         ukla=0\n         klx=0\n         uklx=0\n\nc.....Berechnung Vorrats, Lage Grenzdm und -h?hen fuer die Sortierung...\n\n        CALL Iter\n        Volum(1)=Volr\n\nc .......................................Aufruf eines Sortierprogrammes:\n\n      IF(Sokz.gt.0) then\n          IF(iba.gt.14)sokz=3\n          IF(Sokz.eq.1)then\n             CALL Sortmi\n          ELSE\n             IF(sokz.eq.2.or.sokz.eq.4)then\n                CALL sorthl\n             ELSE\n                CALL sortlb\n             ENDIF\n          ENDIF\nc\nc...................................Klassen und Unterklassen der Sorten:\nc\nc    X-Holz\n         Klasse(1)=Klx\n         Klasse(2)=Uklx\nc    Stammholz\n         Klasse(3)=Kl\n         Klasse(4)=Ukl\nc    Stammholz-Abschnitt\n         Klasse(5)=Kla\n         Klasse(6)=Ukla\n      do 20  i=1,6,2\n      if(klasse(i).gt.6) then\n        klasse(i)=6\n        klasse(i+1)=1\n      endif\n  20  continue\n\nc \twrite (*,*) \" BDAT ! VOLi: \", VOLi\nc\nc Volumina\nc    X-holz\n         Volum(2)=Volx\nc    Stammholz\n         Volum(3)=Vols\nc    Stammholz-Abschnitt\n         Volum(4)=Vola\nc    Industrieholz\n         Volum(5)=Voli\nc    nicht verwertetes Derbholz\n         Volum(6)=Volu\nc    Ernteverlust\n         Volum(7)=Volum(1)-volx-vols-vola-voli-volu\n      ENDIF\n      RETURN\nc     debug subchk\n      END SUBROUTINE\n\n\nc     ################## BDAT - Unterprogramme #########################\n\n\nc     ###################################################################\n      SUBROUTINE D07tab(mt)\nc     ###################################################################\n\n      implicit logical (a-z)\nc.....                                       (?nderung: 12.12.90 Kublin)\n      integer mt\nc.....\n      integer*2 md07(20333)\n      INTEGER Add07(14,5:45,3)\n      INTEGER Ba,Iba,Ban(36,7)\n      REAL hh,dd,Ad1,Spline\n      REAL Sxk07(7,8),Sd07(24,8)\n      INTEGER Snxkn7(8)\n      REAL D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\nc\n      COMMON /D07/ Add07,Md07,Snxkn7,Sxk07,Sd07\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      COMMON /Baum/ Ba,Iba,Ban\nc\n      Ba=Ban(Iba,7)\n\nc.....Rundung auf ganze H?hen und Durchmesser fuer den Tabellenzugriff:\n\n      Hh=int(H+.5)\n      Dd=int(Du+.5)\n\nc.....                 Begrenzung auf Minimal und Maximal-H?hen-Werte :\n\n      IF(Hh.gt.45)Hh=45\n      IF(Hh.lt.5)Hh=5\n\nc.....                        Durchmesser innerhalb/au?erhalb  Tabelle:\n\n      IF(Dd.gt.Add07(Ba,Hh,3).or.Dd.lt.Add07(Ba,HH,2).or.\n     *   Add07(Ba,Hh,1).le.0)Then\n         Ba=Ban(iba,1)\n\nc.....                           Sch?tzung ueber Spline-Sch?tzfunktion:\n\n\n         D07=Spline(H,Ba,Snxkn7,Sxk07,Sd07)\nc        write(10,*)'d07spline  ',d07,h,ba\n\nc.....                                       (?nderung:12.12.90 Kublin)\n         mt = 0\nc.....\n\n      ELSE\n\n         Ad1=Add07(Ba,HH,1)+Dd-Add07(Ba,Hh,2)\n         D07=Md07(Ad1)*.001\nc        write(10,*)'md07  ', d07,ad1,ba,add07(ba,hh,1),add07(ba,hh,2)\n\nc.....                                       (?nderung:12.12.90 Kublin)\n         mt = 1\nc.....\n\n      END IF\n      END SUBROUTINE\n\n\nc     ###################################################################\n      SUBROUTINE KUWERT(Hhrel,Kw)\nc     ###################################################################\n\n\n\nc!dec$ ATTRIBUTES  DLLEXPORT :: KUWERT\n\nc     Das Unterprogramm gibt an der relativen Lage (Hhrel) des Schaftes\nc     den Durchmesser aus.\nc\n      implicit logical (a-z)\n        REAL D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n        INTEGER Nbaum\n        INTEGER Ba,Iba,Ban(36,7)\n        REAL Yy,Durel,D1rel\nc\tREAL Ddo,Ddu,Fdrel,Hhrel\n\tREAL Fdrel,Hhrel\n        REAL Kw ,eins\n        COMMON /Baum0/ Nbaum\n        COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n        COMMON /Sk/ Yy,Durel\n        COMMON /Baum/ Ba,Iba,Ban\nC\n        ba=ban(iba,1)\n        eins=1.\n        IF (Nbaum.GT.0) THEN\n\nc.....         Durel,Yy,Ddo,Ddu werden nur beim ersten Aufruf berechnet\nc                                                         (wenn Nbaum>0\n\n          Nbaum=0\n          Durel=Fdrel(D095,D07,H,Hurel)\n          Yy=1./Durel\n\nc.....    ...................................(?nderung: 12.12.90 Kublin)\nc         Ddo=Fdrel(D095,D07,H,Horel)*Yy*Dnorm\nc         Ddu=Fdrel(D095,D07,H,Hurel)*Yy*Dnorm\nc.....    ..............................................................\n\n        END IF\nC\n        IF (Hhrel.GT.Hurel) THEN\n            D1rel=Fdrel(D095,D07,H,eins)\n            IF(D1rel.lt.Durel)THEN\n               Kw=Dnorm\n               RETURN\n            ELSE\n               Kw=Fdrel(d095,d07,H,Hhrel)*Yy*Dnorm\n            ENDIF\n        ELSE\n          Kw=Fdrel(d095,d07,H,Hhrel)*Yy*Dnorm\n        END IF\n      RETURN\nc     debug subchk\n      END SUBROUTINE\n\n\nc     ###################################################################\n      SUBROUTINE Pegasu(Ifehl,Ianz,F1,F2,Xsi,A,Bb)\nc     ###################################################################\n\nc     Iterationsprogramm f?r die D07 Berechnung :\n\nc      delt             Genauigkeitsminimum\nc      Nmax             Maximale Anzahl der Iterationen\nc\n      implicit logical (a-z)\n        REAL S12,F1,F2,X1,X2,Xsi,A,BB,Delt,X3,F3\n        INTEGER Ifehl,Ianz,Nmax,I\n        data delt/.01/,Nmax/20/\nC\n        Ianz=0\n        X1=A\n        X2=Bb\n        IF (F1*F2.GT.0) THEN\n          Ifehl=-1\n          RETURN\n        END IF\n        IF (F1*F2.EQ.0) THEN\n          Ifehl=0\n          RETURN\n        END IF\nC----------------------------------------------------------\n        DO 30   I= 1, Nmax\n          Ianz=I\n          IF (F2.EQ.0) THEN\n            Xsi=X2\n            Ifehl=1\n            RETURN\n          END IF\n          IF (ABS(X2-X1).LE.Delt) THEN\n            Xsi=X2\n            IF (ABS(F1).LT.ABS(F2))  Xsi=X1\n            Ifehl=2\n            RETURN\n          ELSE\n            S12=(F2-F1)/(X2-X1)\n            X3=X2-F2/S12\n            CALL Fkt(X3,F3)\n            IF (F2*F3.LE.0)  THEN\n              X1=X2\n              F1=F2\n            ELSE\n              F1=F1*F2/(F2+F3)\n            END IF\n            X2=X3\n            F2=F3\n            Xsi=X3\n          END IF\n 30     CONTINUE\n        Ifehl=3\n      RETURN\nc     debug subchk\n      END SUBROUTINE\n\n\nc     ###################################################################\n      SUBROUTINE Fkt(X,F)\nc     ###################################################################\n\n      implicit logical (a-z)\n        REAL D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n        COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n        REAL X,F,Fdrel\n        F=Fdrel(D095,X,H,1-Ho/H)/Fdrel(D095,X,H,1-Hu/H)-Do/Du\nC\n      RETURN\n      END SUBROUTINE\n\n\nc     ###################################################################\n      REAL FUNCTION Fdrel(D095,D07,H,Hhrel)\nc     ###################################################################\n\n        implicit logical (a-z)\n        INTEGER Nnp,Np,Nxk,Ftint\n        REAL B(1:80,1:8),Xk(1:6),D095,D07,h,Hhrel\n        INTEGER ba,ban(1:36,1:7),iba\n        REAL X(1:4)\n        COMMON /Schaft/  Nnp,Np,Nxk,B,Xk\n        COMMON /Baum/ Ba,Iba,Ban\n        INTEGER I,Ii,Ix\n        REAL A,Bb,C,D,T,U\n        REAL Klein\nc\nc       write (10,*) ba,ban(iba,1)\n        Klein=1.E-4\n        fdrel=0.\n        X(1)=1.0\n        X(2)=H\n        X(3)=D095\n        X(4)=D07\n        Ix=Ftint(Hhrel)\n        DO 40  I= 1,4\n          Ii=(Ix-1)*4+(I-1)*Nnp\n          T=(Hhrel-Xk(Ix))/(Xk(Ix+1)-Xk(Ix))\n          U=1.-T\nC....                                              Splinekoeffizienten:\n          A=B(Ii+1,ba)\n          Bb=B(Ii+2,ba)\n          C=B(Ii+3,ba)\n          D=B(Ii+4,ba)\n          Fdrel=Fdrel+X(I)*(A*U+Bb*T+C*U*U*U+D*T*T*T)\n 40     CONTINUE\n        IF (Hhrel.LT.Klein) THEN\n          Fdrel=0\n        END IF\n        RETURN\n      END FUNCTION\n\n\nc     ###################################################################\n      INTEGER FUNCTION Ftint(Hhrel)\nc     ###################################################################\n\n        implicit logical (a-z)\n        INTEGER Nnp,Np,Nxk\n        REAL B(1:80,1:8),Xk(1:6),Hhrel\n        COMMON /Schaft/  Nnp,Np,Nxk,B,Xk\n        INTEGER I\n        DO 50  I=1, nxk\n          IF (Hhrel.LT.Xk(I)) THEN\n            Ftint=I-1\n            GOTO 60\n          END IF\n 50     CONTINUE\n          Ftint=Nxk-1\n          Hhrel=Xk(Nxk)\n 60     IF (FTINT.EQ.0) THEN\n          Ftint=1\n          Hhrel=0\n        END IF\n        RETURN\n      END FUNCTION\n\n\nc     ###################################################################\n      REAL FUNCTION   Spline(x,ba,nk,Xk,B)\nc     ###################################################################\n\nc\nc  Berechnung (d/dx)**a [SPLINE(x)] ; a=0,1,2\nc=======================================================================\nc\nc X         - EIN: Abszissenwert\nc Nk        - EIN: # Knotenpunkte der Zerlegung des Def.-Ber. <a,b>\nc Xk(nk)    - EIN: Knotenpunkte der Zerlegung: a=xk(1)<...<xk(nk)=b\nc B(4(nk-1))- EIN: Splinekoeffizienten\nc\nc=======================================================================\nc\n        implicit logical (a-z)\n       INTEGER I,Iu,Io,Fehler,nk(8),ba\n       REAL Eps,U,T,x,xk(7,8),b(24,8)\n       Eps=1.E-6\n       Fehler=0\nc\nc=======================================================================\nc\n       Spline=0.\nc\n       if (x.lt.Xk(1,ba)-Eps)then\n         Fehler=1\n       ELSE IF(x.lt.Xk(1,ba)+Eps)then\n         T=0.\n         I=1\n       ELSE IF(x.lt.Xk(Nk(ba),ba)-Eps)then\n         Iu=1\n         Io=Nk(ba)\n         CALL Bisekt(X,ba,Xk,Iu,Io,I)\n         T=(X-Xk(I,ba))/(Xk(I+1,ba)-Xk(I,ba))\n       ELSE IF(x.lt.Xk(Nk(ba),ba)+Eps)then\n         T=1.\n         I=Nk(ba)-1\n       ELSE\n         Fehler=1\n       ENDIF\n       IF (Fehler.eq.0) THEN\n         U=1.-T\n         Iu=(I-1)*4\nc...y=Spline(x)\n      Spline=B(Iu+1,ba)*U+B(Iu+2,ba)*T+B(Iu+3,ba)*U*U*U+B(Iu+4,ba)*T*T*T\n       ENDIF\n       RETURN\nc\nc     debug subchk\n      END FUNCTION\n\n\nc     ###################################################################\n      SUBROUTINE Bisekt(X,ba,Xk,Iu,Io,Iku)\nc     ###################################################################\n\n\nC     ==================================================================\nc     Iku: xk(iku) <= x < xk(iku+1) / Bin?res Suchen des Teilintervalls\nc     ==================================================================\nc\n        implicit logical (a-z)\n       REAL X,Xk(7,8)\n       INTEGER Ba,Iko,Mitte,Iu,Io,Iku\n       Iku=Iu\n       Iko=Io\nc\n  10   IF((Iko-Iku).lt.2)return\n         Mitte=INT((Iko+Iku)/2)\n         IF (X.lt.Xk(Mitte,ba))THEN\n           Iko=Mitte\n         ELSE\n           Iku=Mitte\n         END IF\n       go to 10\nc\nc     debug subchk\n      END SUBROUTINE\nc\n\nc     ###################################################################\n      SUBroutine RINDE(Hhrel,Kw,Ri,Hsga,Zo)\nc     ###################################################################\n\nc!dec$ ATTRIBUTES  DLLEXPORT :: RINDE\n\nc     Ausgabe der Rindenst?rken ..................\nc     Hsg=1,2,3 ...nach Heilbronner Sortierung ...\nc                  Hsg gibt Funktions-Nr an (min.Aush-L?nge=1,max.Kl-L?nge=2\nc                                         max.Draufholz=3)\nc                  Baumart mu? stimmen (Fi,Ta,Dgl)  sonst Hsg=0 !\nc                  Zo=1 Rindenfunktion f?r Zopfdurchmesser\nc                  Zo=0    \"            \"  Mittendurchmesser\nc     Hsg=0 ...\"normale Rindenfunktion\"\nc               Algorithmus f?r H?henlagenbest.\nc\nc\n      implicit logical (a-z)\n        INTEGER Hsg,Zo,hsga\n        INTEGER Ba,Iba,Ban(36,7)\n        REAL Hhrel,Ri\n        REAL Kw\n        REAL Rin(1:28,1:4,1:3),Rinh(1:3,1:5,1:3)\n        COMMON /Baum/ Ba,Iba,Ban\n        COMMON /Rind/Rin,Rinh\n        INTEGER Bi,I\n        hsg=hsga\nc\n        IF(zo.gt.0.and.ban(iba,1).gt.3) hsg=0\nc\n        IF (Hsg.eq.0) THEN\n\nc\t...<<17.10.01>> :...........................................................................\n\nc          I=3-INT((.8999-hhrel)/.3)\nc          IF(I.eq.0) I=1\nc          IF(I.gt.3) I=3\n\n\t\tif (hhrel<=0.4) then\n\t\t\ti=3\n\t\telseif(hhrel<=0.7) then\n\t\t\ti=2\n\t\telse\n\t\t\ti=1\n\t\tend if\n\nc\t...<<17.10.01>> :...........................................................................\n\n          Bi=Ban(Iba,2)\n          Ri=(Rin(Bi,i,1)+Rin(Bi,i,2)*Kw+Rin(Bi,i,3)*Kw*Kw)*.1\n        ELSE\n          IF(Zo.gt.0) THEN\n            I=Hsg\n            Bi=Ban(Iba,1)\n            Ri=(Rinh(Bi,I,1)+Rinh(Bi,I,2)*Kw+Rinh(Bi,I,3)*Kw*Kw)*.1\n          ELSE\n            Bi=Ban(Iba,2)\n            I=Hsg\n            Ri=(Rin(Bi,I,1)+Rin(Bi,I,2)*Kw+Rin(Bi,I,3)*Kw*Kw)*.1\n          END IF\n        END IF\n        Kw=Kw-Ri\n      RETURN\n      END SUBroutine\n\n\nc     ###################################################################\n      REAL FUNCTION Rund(kw)\nc     ###################################################################\n\n      REAL Kw\n      IF (Kw.ge.20) THEN\n         Rund=Kw-0.75\n      ELSE\n         Rund=Kw-0.5\n      END IF\n      RETURN\nc     debug subchk\n      END FUNCTION\n\n\nc     ###################################################################\n      SUBroutine Sorthl\nc     ###################################################################\n\n      implicit logical (a-z)\n      REAL D095,D07,Du,Do,Dnorm,H,Hu,\n     *hurel,Ho,Horel\n      REAL Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      REAL Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      REAL sthh,Stxu,Hakt,Rund,Lxu,Ri,Met\n      INTEGER Rif,Ikl,Lind,Sokz\n      REAL Hhrel,Kw,Li,Hsth,Lsth,Zdrh,Hdrh,Labsch,Luv\n      REAL Dhs(1:6),Hhs(1:6)\n      INTEGER Kl,Ukl,Klx,Uklx,Kla,Ukla\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tREAL*4\t\tHStockEnde\n\tREAL*4\t\tHStHAnfang\n\tREAL*4\t\tLngStH\n\tREAL*4\t\tHStHLzEnde\n\tREAL*4\t\tHBDATGes\n\n\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\nc\n      COMMON /Klasse/ Kl,Ukl,Klx,Uklx,Kla,Ukla\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      COMMON/It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Volum/ Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      COMMON /Wert1/ sthh,Sokz,Stxu\n\nc     Erl?uterung der lokalen Variablen :\nc\nc        Hakt     R.... H?he der aktuellen Sortierungsstelle\nc        Met      R.... Rundungsdivisor\nc        Lxu      R.... L?nge X-Holz\nc        Dhs(6)   R.....Durchmesser der H-Sortierklassen\nc        Hhs(6)   R.....H?he der H-Sortierklassen\nc        Rif      I.....Rindenfunktion Nr\nc        Lind     I.....L?nge Industrie-Holz\nc        Ikl      I.....Klasse\nc\nc        Hsthh    R.....H?he Stammholz\nc        Lsthh    R.....L?nge    \"\nc        Zdrh     R.....Z?hler Draufholz (Meterschritte)\nc        Hdrh     R.....H?he       \"\nc        Hstzop   R.....H?he Stammholzzopf\nc        Habzop   R.....H?he Abschnittzopf\nc        Luv      R.....L?nge unverwertetes Derbholz\nc\nc\nc\nc\nc..................Durchm. HS:\n      DATA Dhs/10.,12.,14.,17.,22.,30./\nc..................L?ngen HS:\n      DATA Hhs/8.,10.,14.,16.,18.,18./\nc       Klasse 1   2   3   4   5   6\nc\nc ........... Met  1= Sortierung auf 0.10 m\nc                 10      \"          1 m\nc\n      Met=1\n      IF(Sokz.eq.4)Met=10\nc\nc\n      sthh=hazop\nc\nc................................Klasse u Vol.des X-Holzes-unten\n\n      Hakt=Stxu+H*.01\n      Lxu=Stxu\n      IF(Lxu.gt.3) Lxu=int(Lxu*10.0001)*.1\n      Rif=1\n      IF(Lxu.gt.0)then\n         Hhrel=1.-(Lxu*.5+H*.01)/H\n         CALL Kuwert(Hhrel,Kw)\n         CALL Rinde(Hhrel,Kw,Ri,0,0)\n         Kw=Rund(Kw)\n         Klx=INT(Kw*.1)\n         Uklx=INT((Kw-Klx*10)*.2)\n         hakt=h*.01+lxu\n         Volx=Lxu*Kw*Kw*PI\n         Rif=2\n      END IF\nc     write(10,*)'Hl-  volx,kw,lxu,hakt',volx,kw,lxu,hakt\n\nc...................................... H - Sortierung\n\n      DO 100 Ikl=6 ,1,-1\n       if(sthh.ge.hhs(ikl)+hakt)then\n        Hhrel=1.-(Hhs(Ikl)+hakt)/H\n        if(hhrel.gt.0) then\n          CALL Kuwert(Hhrel,Kw)\n          CALL Rinde(Hhrel,Kw,Ri,5,1)\n          kw=rund(kw)\nc     write(10,*)'kw,dhs(ikl),hhs(ikl),ikl,sthh,hhrel'\nc     write(10,*)kw,dhs(ikl),hhs(ikl),ikl,sthh,hhrel\n          if(Kw.ge.Dhs(Ikl))then\n            Kl=Ikl\n            GOTO 180\n          END IF\n        END IF\n       END IF\n 100  CONTINUE\nc..............<<< Holz zu schwach ... kein Stammholz\n      GOTO 250\nc     ......max. Klassenl?nge\n 180  CONTINUE\n      DO 120 Li=Hhs(Kl)+hakt+1,sthh,1\n        Hhrel=1.-Li/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,5,1)\n        Kw=rund(kw)\n        IF(Kw.lt.Dhs(Kl))goto 190\n 120  CONTINUE\n 190  CONTINUE\n      Hsth=Li-1\n      IF(Hsth.gt.Hhs(kl)+Hakt+.1)Rif=2\n      IF(Sokz.eq.4)THEN\n         DO 121 Li=Hsth+.1,sthh,.1\n           Hhrel=1.-Li/H\n           CALL Kuwert(Hhrel,Kw)\n           CALL Rinde(Hhrel,Kw,Ri,5,1)\n           Kw=rund(kw)\n           IF(Kw.lt.Dhs(Kl))goto 191\n 121     CONTINUE\n 191     hsth=li-.1\n      END IF\nc.......................................max.Draufholz\n      Zdrh=0\n      IF(Kl.gt.1)THEN\n        DO 130 Li=Hsth+1 ,sthh, 1\n          Hhrel=1.-Li/H\n          CALL Kuwert(Hhrel,Kw)\n          CALL Rinde(Hhrel,Kw,Ri,5,1)\n          Kw=Rund(Kw)\n          IF(Kw.lt.Dhs(kl-1))go to 200\n          Zdrh=Zdrh+1\n  130   CONTINUE\n  200   CONTINUE\n        Hdrh=Li-1\n        IF(Hdrh.gt.Hsth+.1)Rif=3\n        IF(Kl.gt.4.AND.Zdrh.ge.4) THEN\n           Hdrh=Hsth+4\n        ELSE\n           IF(Sokz.eq.4)THEN\n              DO 131 Li=Hdrh+.1 ,sthh,.1\n                Hhrel=1.-Li/H\n                CALL Kuwert(Hhrel,Kw)\n                CALL Rinde(Hhrel,Kw,Ri,5,1)\n                Kw=Rund(Kw)\n                IF(Kw.lt.Dhs(kl-1))go to 201\n  131         CONTINUE\n  201         Hdrh=Li-.1\n           END IF\n        END IF\n      ELSE\n        Hdrh=Hsth\n      END IF\n      Lsth=Hdrh-hakt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tLngStH\t= LStH\n\tHStHAnfang = Hakt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc\nc     write(10,*)'hakt lsth',hakt,lsth\nc....................... Stammholzvolumen:\n      if(lsth.gt.0)then\n        Hhrel=1.-(hakt+Lsth*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,Rif,1)\nc       write(10,*) 'rif' ,rif ,kw\n        Kw=Rund(Kw)\nc       write (10,*) kw\n        Hakt=Hakt+Lsth*1.01\n        IF(Sokz.eq.4)THEN\n          Kl=INT(Kw*.1)\n          Ukl=INT((Kw-Kl*10)*.2)\n        END IF\n        Vols=Kw*Kw*Lsth*PI\nc     write(10,*)'Hl-  vols,kw,lsth,hakt',vols,kw,lsth,hakt\nc     write(10,*)'hhrel,ri',hhrel,ri,rif\n      end if\nc\nc     ...................zus?tzlich Kronenst?ck nach Mittenst?rkens.:\n 250  continue\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tHStHLzEnde\t= MIN(HAkt,Hbr)\n\nc\t...<<16.06.05> : ?nderung :------------------------------------------------------------\n\n\tif (sthh.gt.0) then\n\t\tHStHLzEnde = MIN(HStHLzEnde,sthh)\n\telse\n\tend if\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n      Labsch=INT((habzop+.0001-Hakt)*Met)/Met\n      IF(Labsch.ge.3) THEN\n        Hhrel=1.-(Hakt+Labsch*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Kla=INT(Kw*.1)\n        Ukla=INT((Kw-Kla*10)*.2)\n\nc       Volumenabsch.\n\n        Vola=Labsch*Kw*Kw*PI\n        Hakt=Hakt+Labsch*1.01\nc       write(10,*)'Hl-  vola,kw,labsch,hakt',vola,kw,labsch,hakt\nc       write (10,*)'ri hhrel',ri,hhrel\n\n      END IF\nc..................................Industrieholz:\n      Voli=0\n      IF(Hazop.gt.Hakt+.999)THEN\n        Lind=int(Hazop+.0001-Hakt)\n        Hhrel=1.-(Hakt+Lind*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(kw)\n        Voli=Lind*Kw*Kw*PI\n        Hakt=Lind+Hakt\nc     write(10,*)'Hl-  voli,kw,lind,hakt',voli,kw,lind,hakt\n      END IF\nc..................................... UVDerbholz:\n      Luv=Hdgren-Hakt\n      IF(Luv.gt.0)THEN\n        Hhrel=1.-(Hakt+Luv*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Volu=Luv*Kw*Kw*PI\nc     write(10,*)'Hl-  volu,kw,luv,hakt',volu,kw,luv,hakt\n      END IF\n      RETURN\nc     debug subchk\n      END SUBroutine\n\n\nc     ###################################################################\n      SUBroutine Sortmi\nc     ###################################################################\n\n      implicit logical (a-z)\n      REAL D095,D07,Du,Do,Dnorm,H,\n     *hu,hurel,Ho,Horel\n      REAL Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      REAL Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      REAL sthh,Stxu,Luvd,Rund,Hhrel\n      REAL Kw,Lxu,Lsth,Hakt,Labsch,Ri,Met\n      INTEGER Ba,Iba,Ban(36,7),Lind,Sokz\n      INTEGER Kl,Ukl,Klx,Uklx,Kla,Ukla\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tREAL*4\t\tHStockEnde\n\tREAL*4\t\tHStHAnfang\n\tREAL*4\t\tLngStH\n\tREAL*4\t\tHStHLzEnde\n\tREAL*4\t\tHBDATGes\n\n\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n      COMMON /Klasse/ Kl,Ukl,Klx,Uklx,Kla,Ukla\nc\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      COMMON/It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Volum/ Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      COMMON /Wert1/ sthh,Sokz,Stxu\n      COMMON /Baum/ Ba,Iba,Ban\nc\n\nc       Erl?uterung der lokalen Variablen :\nc\nc        Hakt     R.... H?he der aktuellen Sortierungsstelle\nc        Met      R.... Rundungsdivisor\nc        Lxu      R.... L?nge X-Holz\nc        Rif      I.....Rindenfunktion Nr\nc        Lind     I.....L?nge Industrie-Holz\nc        Ikl      I.....Klasse\nc\nc        Hsthh    R.....H?he Stammholz\nc        Lsthh    R.....L?nge    \"\nc        Hdrh     R.....H?he       \"\nc        Hstzop   R.....H?he Stammholzzopf\nc        Habzop   R.....H?he Abschnittzopf\nc        Labsch   R.....L?nge Abschnitt\nc        Luv      R.....L?nge unverwertetes Derbholz\nc\nc\nc\nc     .....Rundung auf 10cm\n      Met=10\nc................................Klasse u Vol.des X-Holzes-unten\n      Hakt=Stxu+H*.01\n      Lxu=Stxu\n      IF(Lxu.gt.3) Lxu=int(Lxu*10.0001)*.1\n      IF(Lxu.gt.0)THEN\n         Hhrel=1.-(Lxu*.5+H*.01)/H\n         CALL Kuwert(Hhrel,Kw)\n         CALL Rinde(Hhrel,Kw,Ri,0,0)\n         Kw=Rund(Kw)\n         Klx=INT(Kw*.1)\n         Uklx=INT((Kw-Klx*10)*.2)\n         hakt=h*.01+lxu\n         Volx=Kw*Kw*Lxu*PI\n      END IF\nc     write(10,*)'Mi-  volx,kw,lxu,hakt',volx,kw,lxu,hakt\nc ....Stammholz.................................................\n\n\n\n      Lsth=INT((hstzop+.0001-Hakt)*Met)/Met\n\nc\t?nderung <<16.06.04>> :------------------------------------------------------------------\n\nc\t(Trennschnitt 20m )\n\n\tif (Lsth>20) then\n\t\tLsth=20\n\tend if\n\n      Hstzop=Lsth+hakt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tLngStH\t= LStH\n\tHStHAnfang = Hakt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\n      IF(Lsth.ge.3)THEN\n        Hhrel=1.-(hakt+Lsth*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Kl=INT(Kw*.1)\n        Ukl=INT((Kw-Kl*10)*.2)\n        Hakt=Hakt+Lsth*1.01\nc Stammholzvolumen\n        Vols=Lsth*Kw*Kw*PI\nc     write(10,*)'Mi-  vols,kw,lsth,hakt',vols,kw,lsth,hakt\n      END IF\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tHStHLzEnde = MIN(HAkt,Hbr)\n\nc\t...<<16.06.05> : ?nderung :------------------------------------------------------------\n\n\tif (sthh.gt.0) then\n\t\tHStHLzEnde = MIN(HStHLzEnde,sthh)\n\telse\n\tend if\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc zus?tzliches  Kronenstammholzst?ck :\nc Abschnitte:.................................................\n\n\n      Labsch=INT((Habzop+.0001-Hakt)*Met)/Met\n\nc\t?nderung <<16.06.04>> :------------------------------------------------------------------\n\nc\t(Trennschnitt 20 m)\n\n\tif (Labsch>20) then\n\t\tLabsch=20\n\tend if\n\n\tHabzop=Hakt+Labsch\n      IF(Labsch.ge.3) THEN\n        Hhrel=1.-(Hakt+Labsch*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Kla=INT(Kw*.1)\n        Ukla=INT((Kw-Kla*10)*.2)\nc   Volumenabsch:\n        Vola=Labsch*Kw*Kw*PI\n        Hakt=Habzop+Labsch*.01\nc     write(10,*)'Mi-  vola,kw,labsch,hakt',vola,kw,labsch,hakt\n      END IF\nc Industrieholz ...........................................\n      Voli=0\n      Lind=INT(Hazop+.0001-Hakt)\n      IF(Lind.gt.0.999)THEN\n        Hhrel=1.-(Hakt+(Lind*.5))/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Voli=Lind*Kw*Kw*PI\n        Hakt=Hakt+Lind\nc     write(10,*)'Mi-  voli,kw,lind,hakt',voli,kw,lind,hakt\n      END IF\nc Unverwertbares Derbholz .................................\n      Volu=0\n      IF(Hakt.lt.Hdgren) THEN\n        Luvd=Hdgren-Hakt\n        Hhrel=1.-(Hakt+Luvd*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        CALL Rinde(Hhrel,Kw,Ri,0,0)\n        Kw=Rund(Kw)\n        Volu=(Hdgren-Hakt)*Kw*Kw*PI\nc     write(10,*)'Mi-  volu,kw,hdgren-hakt',volu,kw,hdgren-hakt\n      END IF\n      RETURN\nc     debug subchk\n      END SUBroutine\n\n\nc     ###################################################################\n      SUBroutine Iter\nc     ###################################################################\n\n      implicit logical (a-z)\n      REAL D095,D07,Du,Do,Dnorm,H,\n     *hu,hurel,Ho,Horel\n      REAL Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      REAL sthh,Stxu,Hhrel,stx\n      REAL Kw,Ri,rest\n      REAL Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      INTEGER Ba,Iba,Ban(36,7)\n      INTEGER I,J,Sokz,Vorz,Anzit,anfit\n      REAL Wit(1:4),Hwit(1:4),Ix,Dis,Po,rund,bis\nc\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      COMMON/It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Wert1/ sthh,Sokz,Stxu\n      COMMON /Volum/ Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      COMMON /Baum/ Ba,Iba,Ban\n\nc\nc       Erl?uterung der lokalen Variablen :\nc         Hwit(4)       R.....H?he des iterierten Durchmessers\nc                             1 H?he der Derbholzgrenze\nc                             2  \"       Aufarbeitungszopfs\nc                             3  \"       Abschnittszopfs\nc                             4  \"       Stammholzzopfs\nc         Wit (4)       R     entsprechende Durchmesser\nc         Anfit         I     Anfangsindex der Iteration\nc         anzit         I     Anzahl der Interationen (step=1)\nc         Po            R     aktuelle Iterationsh?he (Position)\nc         Dis           R     Iterationsschrittweite\nc         Vorz          I     (Vorzeichen) Iterationsrichtung\nc         Rest          R     Hilfsgr??e\nc         Stx           R     Hilfsgr??e f?r Stx+H*0.01(=Stock)\nc\n\n      do 1 i=1,4\n         hwit(i)=0\n  1   continue\nc\nc..BHD - Zopfklasse\n      IF(Sokz.eq.0) then\n         anfit=1\n         anzit=1\n      end if\n\n\n      IF(Sokz.eq.3) then\n\n         anfit=1\n\nc\t...<<17.09.03>> : ?nderung :............................................................\n\n\t   anzit=4\nc        anzit=2\n\n      end if\n      IF(Sokz.eq.1) then\n         anfit=1\n         anzit=4\n      end if\n      IF(Sokz.eq.2.or.Sokz.eq.4) then\n         anfit=1\n         anzit=3\n      end if\n      Wit(1)=Dgrenz\n      Wit(2)=Azop\n      if(Zoab.eq.0)then\n        Wit(3)=14.\n      else\n        Wit(3)=Zoab\n      end if\nc Stammholzzopf\n      Wit(4)=Zost\nc\n      DO 160 J=anfit,Anzit\n        DO 140 I=INT(Hbr) ,1, -1\n          Hhrel=1.-I/H\n          CALL Kuwert(Hhrel,Kw)\n          IF(j.gt.2) then\n\nc\t\tDurchmesser ohne Rinde forstlich gerundet :...................................\n\n            CALL Rinde(Hhrel,Kw,Ri,0,0)\n            kw=rund(kw)\n          END IF\n          IF(Kw.gt.Wit(J))goto  220\n 140    CONTINUE\n        Hwit(J)=1\n 220    CONTINUE\nc\n        IF(Hwit(J).lt.1) THEN\n          Po=I+.5\n          Dis=.5\n          DO 150 I=1 ,18\n            Hhrel=1.-Po/H\n            CALL Kuwert(Hhrel,Kw)\n            if(j.gt.2) then\n               CALL Rinde(Hhrel,Kw,Ri,0,0)\n               kw=rund(kw)\n            END IF\n            IF(Kw.lt.Wit(J)+.1.AND.Kw.gt.Wit(J)-.1) goto 230\n            Vorz=1\n            IF(Kw.lt.Wit(J)) Vorz=(-1)\n            Dis=ABS(Dis)*.5*Vorz\n            Po=Po+Dis\n 150      CONTINUE\n 230   CONTINUE\n       if(hbr.lt.po)then\n         hwit(j)=hbr\n       else\n         Hwit(j)=po\n       END IF\nc\n      END IF\n\nc     write (10,*)'hwit(j),wit(j),azop,j'\nc     write (10,*) hwit(j),wit(j),azop,j\n\n 160  CONTINUE\nc\nc     write (10,*)'hdgren,hazop,habzop,hstzop'\nc     write (10,*) hdgren,hazop,habzop,hstzop\n\n      if(hazop.le.0.or.hazop.gt.hwit(2)) Hazop=Hwit(2)\n      Hdgren=Hwit(1)\n      if (habzop.le.0.or.habzop.gt.hwit(3))Habzop=Hwit(3)\n      IF(Habzop.gt.Hazop) Habzop=Hazop\n      if(hstzop.le.0.or.hstzop.gt.hwit(4))Hstzop=Hwit(4)\n      if(hstzop.le.0.or.hstzop.gt.sthh)hstzop=sthh\n      IF(hstzop.gt.hazop)hstzop=hazop\nc........................................Abschnittzopfh?he (1.2.94)\n      if(habzop.le.0.or.habzop.gt.sthh)habzop=sthh\n      if(habzop.le.0)habzop=hstzop\n      IF(Hbr.lt.Hdgren)Hdgren=Hbr\n      IF((stxu+h*.01).gt.hazop)stxu=hazop-h*.01\n\nc     write (10,*)'hdgren,hazop,habzop,hstzop,stxu'\nc     write (10,*) hdgren,hazop,habzop,hstzop,stxu\nc\n      Volr=0\n      Vol=0\nc..............................Volumenberechnung:   Vol Vfm.m.R.\n      if (hdgren.le.2)then\n        Hhrel=1.-Hdgren*.5/H\n        CALL Kuwert(Hhrel,Kw)\n        Volr= Kw*Kw*PI*Hdgren\n      ELSE\n        DO 240 Ix=1,Hdgren-1,2\n          Hhrel=1.-Ix/H\n          CALL Kuwert(Hhrel,Kw)\n          Volr=Volr+Kw*Kw*PI*2\n\nc         write (10,*)'volr,kw,hhrel'\nc         write (10,*) volr,kw,hhrel\n\n 240    CONTINUE\n        rest=hdgren-(ix-1)\n        Hhrel=1.-(Hdgren-rest*.5)/H\n        CALL Kuwert(Hhrel,Kw)\n        Volr=Volr+Kw*Kw*PI*rest\n      END IF\nc\n      IF(Iba.gt.14)THEN\n          stx=stxu+h*.01\n          bis=stx\n          IF(hstzop-stx.ge.2) bis=(int(hstzop*10.0001)*.1)*1.01\n          if(stx.ge.bis)then\n             hstzop=bis*.9999\n             bis=stx\n             IF(bis.ge.3)bis=(int(bis*10.0001)*.1)*1.01\n          END IF\n          vol=0\n\nc          write(10,*)'hstzop,hazop ',hstzop,hazop\n\n          DO 250 Ix=1 ,bis-1 , 2\n            Hhrel=1.-Ix/H\n            CALL Kuwert(Hhrel,Kw)\n            Vol=Vol+Kw*Kw*PI*2\n 250      CONTINUE\n          rest=bis-(ix-1)\n\nc\t\twrite(10,*)'bis,rest,ix'\nc\t\twrite(10,*) bis,rest,ix\n\n          Hhrel=1.-(bis-rest*.5)/H\n\n          CALL Kuwert(Hhrel,Kw)\n\n          Vol=Vol+Kw*Kw*Pi*rest\n\nc\t\t?nderungen: <<01.07.02>> :--------------------------------------------------------------\nc\nc\t\tSUBroutine Iter:\tIF(H.lt.22) Volr=Volr*.98\nc         IF(H.lt.22)Volr=Volr*.98\n\n      END IF\n\nc     write(10,*)'bis,rest,kw,vol'\nc     write(10,*) bis,rest,kw,vol\nc     debug subchk\n\n      END SUBroutine\n\n\nc     ###################################################################\n      SUBroutine Sortlb\nc     ###################################################################\n\n      implicit logical (a-z)\n\n      REAL*4 D095,D07,Du,Do,Dnorm,H,Volir,hu,hurel,ho,horel,zopf\n      REAL*4 Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      REAL*4 Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n \tREAL*4 Volrer,Volur\n\nc\t<<1>> ################################### 01.04.04 #################################\nc\tREAL*8 Volrer,Volur\nc\t######################################### 01.04.04 #################################\n\n      REAL*4 sthh,Stxu,Rund,Hhrel,Lxu,Kw,Hakt,Lsth,W1,W0,Vl\n\nc     INTEGER Ba,Iba,Ban(36,7),Ib,Ia,Sokz,ix\n\n      INTEGER*2\tBa,Iba,Ban(36,7),Ib,Ia,Sokz\n      REAL*4\t\tUnvd(2,27,33),Unvpr,Ddur,Riproz,Ri,Dduru,Dduri,D1,fakt\n      INTEGER*2\tKl,Ukl,Klx,Uklx,Kla,Ukla\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tREAL*4\t\tHStockEnde\n\tREAL*4\t\tHStHAnfang\n\tREAL*4\t\tLngStH\n\tREAL*4\t\tHStHLzEnde\n\tREAL*4\t\tHBDATGes\n\n\tCOMMON\t/XtrComPar/\tHStockEnde, HStHAnfang, LngStH, HStHLzEnde\n\t1\t\t\t\t\t,\tHBDATGes\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n      COMMON /Klasse/ Kl,Ukl,Klx,Uklx,Kla,Ukla\nc\n      COMMON /Baum1/ D095,D07,Du,Do,Dnorm,H,Hu,Hurel,Ho,Horel\n      COMMON/It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Volum/ Vol,Volx,Vols,Vola,Voli,Volu,Volr,Volsu\n      COMMON /Wert1/ sthh,Sokz,Stxu\n      COMMON /Baum/ Ba,Iba,Ban\n      COMMON /Uvd/ Unvd\n\nc\t---------------------------------------------\nc\nc       Erl?uterung der lokalen Variablen :\nc\nc        Hakt     R.... H?he der aktuellen Sortierungsstelle\nc        Lxu      R.... L?nge X-Holz\nc        Lind     I.....L?nge Industrie-Holz\nc        Ikl      I.....Klasse\nc\nc        Hsthh    R.....H?he Stammholz\nc        Lsthh    R.....L?nge    \"\nc        Zdrh     R.....Z?hler Draufholz (Meterschritte)\nc        Hdrh     R.....H?he       \"\nc        Hstzop   R.....H?he Stammholzzopf\nc        Luv      R.....L?nge unverwertetes Derbholz\n\nc\nc...................................Klasse u Vol.des X-Holzes-unten:\n\n\tVolRer=0\n\tVoluR=0\n\n      Hakt=Stxu+H*.01\n      Lxu=Stxu\n\n      IF(Lxu.ge.3) lxu=int(lxu*10.0001)*.1\n\n      IF(Lxu.gt.0)THEN\n\n         Hhrel=1.-(Lxu*.5+H*.01)/H\n         CALL Kuwert(Hhrel,Kw)\n         CALL Rinde(Hhrel,Kw,Ri,0,0)\n         Kw=Rund(Kw)\n         Klx=INT(Kw*.1)\n         Uklx=INT((Kw-Klx*10)*.2)\n         hakt=h*.01+ lxu\n         Volx=Kw*Kw*Lxu*PI\n\n      END IF\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tHStHAnfang = Hakt\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc     write(10,*)'b- volr,hazop,hstzop',volr,hazop,hstzop\nc     write(10,*)'Lb-  volx,kw,lxu,hakt',volx,kw,lxu,hakt\n\nc.............................................Stammholz:\n\n      if(hstzop.le.0) hstzop=stxu+h*.01\n      Vols=0\n\n      IF(hstzop.gt.0) THEN\n\n         lsth=int((hstzop+.0001-hakt)*10)*.1\n\nc\t?nderung <<16.06.04>> :------------------------------------------------------------------\n\n\t\tif (Lsth>20) then\n\t\t\tLsth=20\n\t\tend if\n\n         IF(Lsth.ge.2) THEN\n\n            Hhrel=1.-(hakt+Lsth*.5)/H\n\n            CALL Kuwert(Hhrel,Kw)\n            CALL Rinde(Hhrel,Kw,Ri,0,0)\n\n            kw=Rund(Kw)\n            Kl=INT(Kw*.1)\n            Ukl=INT((Kw-Kl*10)*.2)\n\nc......................... Stammholzvolumen\n\n            Vols=Lsth*Kw*Kw*PI\n\nc............Stammholzzopf....................................?nderung 1.2.94\n\n            Hstzop=hakt+Lsth\n            Hakt=Hakt+Lsth*1.01\n\n         ELSE\n            Hstzop=hakt\n         END IF\n      END IF\n\nc     write(10,*)'Lb-  vols,kw,lsth,hakt',vols,kw,lsth,hakt\n      Vola=0\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\n\tLngStH\t= LStH\n\n\tHStHLzEnde = MIN(HAkt,Hbr)\n\nc\t...<<16.06.05> : ?nderung :------------------------------------------------------------\n\n\tif (sthh.gt.0) then\n\t\tHStHLzEnde = MIN(HStHLzEnde,sthh)\n\telse\n\tend if\n\nc\t...<<18.09.03>> : ?nderung :.......................................................\n\nc.............................. Industrieholz:\n\nc\tRest-Holz:\n\nc\t---------------------------------------------\nc  \twrite (*,*)\nc\twrite (*,*)\t\" BDAT ! SORTLB Block3\t\"\nc \twrite (*,*) \" BDAT ! SORTLB VOL   : \", VOL\nc\twrite (*,*) \" BDAT ! SORTLB VOLx  : \", VOLx\nc\twrite (*,*) \" BDAT ! SORTLB VOLs  : \", VOLs\nc\twrite (*,*) \" BDAT ! SORTLB VOLa  : \", VOLa\nc\twrite (*,*) \" BDAT ! SORTLB VOLi  : \", VOLi\nc\twrite (*,*) \" BDAT ! SORTLB VOLu  : \", VOLu\nc\twrite (*,*) \" BDAT ! SORTLB VOLr  : \", VOLr\nc\twrite (*,*) \" BDAT ! SORTLB VOLuR : \", VOLuR\nc\twrite (*,*) \" BDAT ! SORTLB VOLsu : \", VOLsu\nc\twrite (*,*) \" BDAT ! SORTLB VOLrer: \", VOLrer\nc  \twrite (*,*)\nc\t---------------------------------------------\n\n      volrer=volr-vol\n\nc\t---------------------------------------------\n\nc\t<<2>> #################################### 01.04.04 ################################\nc  \twrite (*,*)\nc\t######################################### 01.04.04 #################################\n\nc     write(10,*)'Lb- volr,vol,volrer',volr,vol,volrer\nc\tUnverwertbares Derbholz mit Rinde\n\n      volu=0\n      volur=0\n\n      IF(azop.gt.8)THEN\n\n        Zopf=azop\n        if(zopf.gt.40)zopf=40\n\nc\t\tgesch?tzt aus  Aufarbeitungsgrenze und BHD\n\n        Hhrel=1.-1.3/H\n        CALL Kuwert(Hhrel,Kw)\n        IF(Kw.gt.60)Kw=60\n        Ia=INT(Zopf+.0001-7)\n        Ib=INT((Kw-8)*.5)+1\n        D1=Kw-(Ib*2+6)\n        Ba=Ban(Iba,4)\n        W1=Unvd(Ba,Ib,Ia)\n        IF(Ib.gt.26)then\n          W0=W1\n        ELSE\n          W0=Unvd(Ba,Ib+1,Ia)\n        END IF\n\n        Unvpr=(W1-W0)*(2-D1)/2+W0\n\nc       write(10,*)'Unvpr=(W1-W0)*(2-D1)/2+W0,ib,ia,ba'\nc       write(10,*)Unvpr,W1,W0,2,D1,2,W0,ib,ia,ba\n\n        fakt=volr/volrer*unvpr*.01\n\n        if(fakt.gt.1) fakt=1.0\n\n        volur=volrer*fakt\n\nc\t######################################### 01.04.04 #################################\nc  \t  volur=volrer\nc\t######################################### 01.04.04 #################################\n\nc\t\twrite(10,*)'Lb-  volu,volr,unvpr',volu,volr,unvpr,\n\n      END IF\n\nc     Mittlere ?stedurchmesser mit Rinde\n\n      vl=hstzop\n      if(vl.lt.h*.1)vl=h*.15\n      IF(Ban(Iba,5).eq.1) THEN\n        Ddur=8.866-.2721*vl+.2035*Du+.3546*H/vl+1.4139*vl/Du\n      ELSE\n        Ddur=6.473-.119*vl+.1578*Du+1.4236*H/vl\n      END IF\n\nc.....Industrieholz Volumen mit/ohne Rinde.....................?nderung 1.2.94\n\n      voli=0\n\tvolir=0\n\nc\t######################################### 01.04.04 #################################\nc \t  volur=volrer\nc\t######################################### 01.04.04 #################################\n\n      volir=volrer-volur\n\n      Zopf=0\n      hhrel=1.-(hstzop/h)\n\n      CALL kuwert(hhrel,zopf)\n\n\nc\t?nderung <<01.04.04>> :-------------------------------------------------------------\n\n      IF(ABS(volir).gt.1e-8) THEN\n\nc\t#################### 01.04.04 ############## FALSE bei <<1>> oder <<2>> ############\nc  \tIF(volir.gt.0) THEN\nc\t######################################### 01.04.04 #################################\n\n        IF(hazop.lt.hdgren) THEN\n          dduri=ddur+((volrer-volir)/volrer)*(zopf-ddur)\n        ELSE\n          Dduri=Ddur\n        END IF\n\n        CALL Rinde(Hhrel,Dduri,Ri,0,0)\n\n        Riproz=(Dduri)**2/(Dduri+ri)**2\n\n\t  Voli=Volir*Riproz\n\nc\t######################################### 01.04.04 #################################\nc \t  Voli=-99999\nc\t######################################### 01.04.04 #################################\nc\n      END IF\n\nc  \twrite (*,*)\nc     write (*,*) '========================='\nc  \twrite (*,*) 'BDAT!SortLb:'c\nc \twrite (*,*) 'voli   = ',voli\nc \twrite (*,*)\t'volir  = ',volir\nc \twrite (*,*) 'riproz = ', riproz\nc \twrite (*,*) '========================='\nc \twrite (*,*)\n\nc\n      Hakt=Hazop\n\nc\tUnverwertbares Derbholz ohne Rinde...........................?nderung 1.2.94\n\n      Volu=0\n      IF(hazop.lt.hdgren) THEN\n         dduru=ddur-((volrer-volur)/volrer)*(ddur-7)\n         CALL Rinde(Hhrel,Dduru,Ri,0,0)\n         Riproz=Dduru**2/(Dduru+ri)**2\n         Volu=Volur*Riproz\nc        write(10,*)'Lb-  volu,volur,riproz',volu,volur,riproz\n      END IF\nc\n      RETURN\n\n\tEND SUBroutine\n\nc**********************************************************************\nC*** FILE: BDAT_C.FOR *** Tabellen BLOCK DATA *** STAND: 13.12.90   ***\nC**********************************************************************\n\n      BLOCK DATA\n\nc======================================================================\n      REAL Rin(1:28,1:4,1:3)\n      REAL Rinh(1:3,1:5,1:3)\n      REAL a95(1:24,1:8),b95(1:24,1:8)\n      REAL xk95a(7,8),xk95b(7,8)\n      INTEGER nxk95a(8),nxk95b(8)\n      INTEGER Nnp,Np,Nxk\n      REAL B(1:80,1:8),Xk(1:6)\n      REAL Yy\n      REAL Azo(7,0:3)\n      REAL Unvd(2,27,33)\n      REAL Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      INTEGER Ba,Iba,Ban(36,7)\n      INTEGER Volk(6,30,3)\n      integer*2 md07(20333)\n      INTEGER Add07(14,5:45,3)\n      real hoehr(6,6)\n      REAL Sxk07(7,8),Sd07(24,8)\n      INTEGER Snxkn7(8)\nc\n      COMMON /D07/ Add07,Md07,Snxkn7,Sxk07,Sd07\n      COMMON /Volk/Volk,hoehr\n      COMMON/It/Azop,Dgrenz,Hazop,Hdgren,Hstzop,Habzop,PI,Zost,Zoab,Hbr\n      COMMON /Uvd/ Unvd\n      COMMON /Duazop/ Azo\n      COMMON /Baum/ Ba,Iba,Ban\n      COMMON /Rind/ Rin,Rinh\n      COMMON /d95/nxk95a,nxk95b,xk95a,xk95b,a95,b95\n      COMMON /Schaft/  Nnp,Np,Nxk,B,Xk\n      COMMON /Sk/ Yy,Durel\nC\nC.....Splinekoeffizienten f?r die Schaftkurven..........................\nc\n        DATA NP/ 80/\n        DATA  NXK/6/,XK/0.,.3,.5,.7,.9,1./ , NnP/20/\nC\nc.....Fichte............................................................\nc\n      data (B(i,1),i=1,80) /\n     *-.663092E-01,-.503199E-01, .663092E-01,-.221933E-01,-.626495E-01,\n     *-.125967    ,-.986368E-02, .247511E-01,-.125967    ,-.407789E-01,\n     * .247511E-01, .407789E-01,-.407789E-01, .289083    , .407789E-01,\n     * .215608    , .450789    , 1.10084    , .539020E-01, 1.73959    ,\n     * .114868E-01, .461916E-03,-.114868E-01, .191777E-02, .152734E-02,\n     * .569999E-03, .852343E-03,-.741014E-05, .569999E-03,-.431807E-03,\n     *-.741014E-05, .431807E-03,-.431807E-03, .115723E-02, .431807E-03,\n     *-.144520E-02, .733330E-04,-.238384E-02,-.361299E-03, .960332E-02,\n     *-.885276E-02, .101540E-03, .885276E-02,-.157632E-02,-.774196E-03,\n     *-.590717E-04,-.700588E-03,-.765393E-04,-.590717E-04, .196816E-03,\n     *-.765393E-04,-.196816E-03, .196816E-03,-.728193E-03,-.196816E-03,\n     * .270672E-03,-.525189E-03,-.378682E-03, .676680E-04, .354782E-02,\n     * .152552    , .726242    ,-.152552    ,-.262736E-01, .711645    ,\n     * 1.00653    ,-.116772E-01,-.401196E-01, 1.00653    , 1.06069    ,\n     *-.401196E-01,-.606896E-01, 1.06069    , .750715    ,-.606896E-01,\n     *-.207830    , .594842    ,-.277629E-01,-.519576E-01,-2.21636/\nc\nc.....Tanne....................................................................\nc\n      data (B(i,2),i=1,80) /\n     *-.272913    ,-.535819E-01, .272913    ,-.554505E-01,-.843877E-01,\n     *-.123002    ,-.246447E-01, .150921E-01,-.123002    ,-.710641E-01,\n     * .150921E-01, .710641E-01,-.710641E-01, .407259    , .710641E-01,\n     * .215010    , .568516    , 1.29145    , .537524E-01, .506389    ,\n     * .129034E-01, .714102E-02,-.129034E-01,-.146077E-03, .705986E-02,\n     * .273133E-02,-.649231E-04, .129084E-03, .273133E-02,-.822691E-03,\n     * .129084E-03, .822691E-03,-.822691E-03, .559431E-03, .822691E-03,\n     *-.449196E-03, .222534E-03,-.970964E-04,-.112299E-03,-.389450E-03,\n     *-.597541E-02,-.245982E-02, .597541E-02,-.154806E-03,-.254582E-02,\n     *-.718117E-03,-.688026E-04,-.118285E-03,-.718117E-03, .399879E-03,\n     *-.118285E-03,-.399879E-03, .399879E-03,-.881400E-03,-.399879E-03,\n     * .126996E-03,-.786153E-03,-.114105E-02, .317490E-04, .767707E-02,\n     * .363365    , .691837    ,-.363365    , .207776E-01, .703381    ,\n     * .991621    , .923447E-02,-.312238E-01, .991621    , 1.09252    ,\n     *-.312238E-01,-.925185E-01, 1.09252    , .638305    ,-.925185E-01,\n     *-.229105    , .466476    ,-.276117    ,-.572764E-01,-.704160/\nc\nc.....Douglasie.........................................................\nc\n      data (B(i,3),i=1,80) /\n     * .916011E-01, .267276E-01,-.916011E-01,-.245526E-01, .130873E-01,\n     *-.112004    ,-.109123E-01, .248836E-01,-.112004    ,-.877935E-01,\n     * .248836E-01, .877935E-01,-.877935E-01, .463178    , .877935E-01,\n     * .159385    , .582717    , 1.21682    , .398463E-01, .762010    ,\n     * .899184E-02, .449597E-02,-.899184E-02,-.369141E-03, .429089E-02,\n     * .631694E-04,-.164063E-03, .693708E-03, .631694E-04,-.230363E-05,\n     * .693708E-03, .230363E-05,-.230363E-05,-.539549E-04, .230363E-05,\n     * .233716E-04,-.364262E-04,-.966559E-05, .584291E-05, .178525E-03,\n     *-.582458E-02,-.264850E-02, .582458E-02, .186921E-03,-.254465E-02,\n     * .195809E-03, .830762E-04,-.499295E-03, .195809E-03,-.595029E-04,\n     *-.499295E-03, .595029E-04,-.595029E-04, .422024E-04, .595029E-04,\n     * .206368E-04, .576800E-04, .154965E-03, .515921E-05,-.855741E-03,\n     *-.187996    , .547549    , .187996    ,-.136054E-01, .539991    ,\n     * .985003    ,-.604687E-02,-.529516E-01, .985003    , 1.11231    ,\n     *-.529516E-01,-.112306    , 1.11231    , .565774    ,-.112306    ,\n     *-.183433    , .428199    ,-.257790    ,-.458582E-01,-.635779/\nc\nc....Kiefer.............................................................\nc\n      data (B(i,4),i=1,80) /\n     *-.104056    , .278676E-01, .104056    ,-.561985E-01,-.335377E-02,\n     *-.102733    ,-.249771E-01, .271358E-01,-.102733    ,-.392980E-01,\n     * .271358E-01, .392980E-01,-.392980E-01, .259925    , .392980E-01,\n     * .317489    , .498042    , 1.36200    , .793722E-01, .480447    ,\n     * .818093E-02, .343902E-03,-.818093E-02, .132793E-02, .108164E-02,\n     * .283377E-03, .590190E-03, .686929E-04, .283377E-03,-.102728E-03,\n     * .686929E-04, .102728E-03,-.102728E-03, .127535E-03, .102728E-03,\n     *-.176758E-02,-.119815E-02,-.506009E-02,-.441896E-03, .254749E-01,\n     *-.403881E-02,-.332653E-03, .403881E-02,-.603638E-03,-.668007E-03,\n     *-.209360E-03,-.268283E-03,-.463799E-04,-.209360E-03,-.289915E-04,\n     *-.463799E-04, .289915E-04,-.289915E-04, .325326E-03, .289915E-04,\n     *-.117108E-04, .316543E-03, .467352E-03,-.292769E-05,-.313265E-02,\n     * .188379    , .673190    ,-.188379    , .435361E-03, .673432    ,\n     * .998091    , .193494E-03,-.454820E-01, .998091    , 1.04986    ,\n     *-.454820E-01,-.498577E-01, 1.04986    , .802479    ,-.498577E-01,\n     *-.320644    , .561996    ,-.283143    ,-.801610E-01,-1.03525/\nc\nc.....L?rche............................................................\nc\n      data (B(i,5),i=1,80) /\n     *-.142477    , .130680    , .142477    ,-.994457E-01, .754323E-01,\n     *-.739485E-01,-.441981E-01, .272001E-01,-.739485E-01,-.601290E-01,\n     * .272001E-01, .601290E-01,-.601290E-01, .314464    , .601290E-01,\n     * .254681    , .505475    , 1.26580    , .636702E-01, .851216    ,\n     * .951228E-02, .212846E-02,-.951228E-02, .963436E-03, .266370E-02,\n     * .952612E-03, .428194E-03, .540570E-04, .952612E-03,-.434139E-03,\n     * .540570E-04, .434139E-03,-.434139E-03, .783942E-03, .434139E-03,\n     *-.111104E-02,-.493394E-04,-.194014E-02,-.277761E-03, .823570E-02,\n     *-.556938E-02,-.121968E-02, .556938E-02,-.539264E-03,-.151927E-02,\n     *-.417015E-03,-.239673E-03,-.751449E-04,-.417015E-03, .234369E-03,\n     *-.751449E-04,-.234369E-03, .234369E-03,-.520462E-03,-.234369E-03,\n     *-.758713E-04,-.577366E-03,-.112549E-02,-.189678E-04, .683040E-02,\n     * .200393    , .491092    ,-.200393    , .650944E-01, .527256    ,\n     * .938037    , .289308E-01,-.445546E-01, .938037    , 1.08149    ,\n     *-.445546E-01,-.814898E-01, 1.08149    , .736004    ,-.814898E-01,\n     *-.258429    , .542182    ,-.212027    ,-.646074E-01,-1.25601/\nc\nc.....Buche.............................................................\nc\n      data (B(i,6),i=1,80) /\n     *-.188531    ,-.574869E-01, .188531    ,-.221598E-01,-.697980E-01,\n     *-.563012E-01,-.984882E-02,-.811468E-02,-.563012E-01,-.914926E-01,\n     *-.811468E-02, .914926E-01,-.914926E-01, .422272    , .914926E-01,\n     * .211683    , .581034    , 1.31420    , .529207E-01, .366134    ,\n     * .149121E-02, .837835E-03,-.149121E-02,-.556769E-04, .806903E-03,\n     * .185733E-03,-.247453E-04, .212077E-04, .185733E-03,-.308190E-03,\n     * .212077E-04, .308190E-03,-.308190E-03, .104703E-02, .308190E-03,\n     *-.885825E-03, .382660E-03,-.932838E-03,-.221456E-03, .242217E-02,\n     * .233504E-02, .386838E-02,-.233504E-02,-.907703E-03, .336410E-02,\n     * .136064E-02,-.403424E-03, .903357E-04, .136064E-02,-.100794E-03,\n     * .903357E-04, .100794E-03,-.100794E-03,-.957468E-03, .100794E-03,\n     * .405613E-03,-.653258E-03,-.168966E-03, .101403E-03, .318749E-02,\n     * .207604    , .617870    ,-.207604    , .627061E-03, .618218    ,\n     * .893818    , .278694E-03,-.752490E-02, .893818    , 1.12427    ,\n     *-.752490E-02,-.124270    , 1.12427    , .609103    ,-.124270    ,\n     *-.220643    , .443621    ,-.310410    ,-.551609E-01,-.477682/\nc\nc.....Eiche.............................................................\nc\n      data (B(i,7),i=1,80) /\n     *-.172467    ,-.510311E-02, .172467    ,-.372934E-01,-.258217E-01,\n     *-.385571E-01,-.165749E-01,-.715138E-02,-.385571E-01,-.942007E-01,\n     *-.715138E-02, .942007E-01,-.942007E-01, .415360    , .942006E-01,\n     * .229863    , .587757    , 1.35973    , .574658E-01, .152587    ,\n     * .565412E-03, .108904E-02,-.565412E-03,-.270753E-03, .938617E-03,\n     * .385190E-03,-.120335E-03,-.179621E-04, .385190E-03,-.276010E-03,\n     *-.179621E-04, .276010E-03,-.276010E-03, .718850E-03, .276010E-03,\n     *-.964489E-03,-.451681E-05,-.167719E-02,-.241122E-03, .696794E-02,\n     * .320367E-02, .317107E-02,-.320367E-02,-.600605E-03, .283740E-02,\n     * .813647E-03,-.266936E-03, .199659E-03, .813647E-03,-.121489E-04,\n     * .199659E-03, .121489E-04,-.121489E-04,-.765051E-03, .121489E-04,\n     * .252746E-03,-.575492E-03,-.383263E-03, .631866E-04, .377183E-02,\n     * .216229    , .592582    ,-.216229    , .122861E-01, .599407    ,\n     * .891263    , .546049E-02,-.995866E-02, .891263    , 1.12337    ,\n     *-.995866E-02,-.123367    , 1.12337    , .615269    ,-.123367    ,\n     *-.233533    , .440120    ,-.339378    ,-.583832E-01,-.344582/\nc\nc.....Roteiche..........................................................\nc\n      data (B(i,8),i=1,80) /\n     *-.129150    , .260865E-02, .129150    ,-.317103E-01,-.150082E-01,\n     *-.328701E-01,-.140935E-01,-.977679E-02,-.328701E-01,-.109393    ,\n     *-.977679E-02, .109393    ,-.109393    , .470441    , .109393    ,\n     * .185881    , .609852    , 1.31800    , .464703E-01, .242118    ,\n     *-.589486E-03,-.193826E-02, .589486E-03, .647802E-03,-.157837E-02,\n     *-.318212E-03, .287912E-03,-.178726E-03,-.318212E-03,-.130412E-03,\n     *-.178726E-03, .130413E-03,-.130412E-03, .839862E-03, .130413E-03,\n     *-.789992E-03, .247368E-03,-.104498E-02,-.197498E-03, .338793E-02,\n     * .144288E-02, .260640E-02,-.144288E-02,-.665381E-03, .223674E-02,\n     * .794479E-03,-.295725E-03, .140658E-03, .794479E-03, .196169E-03,\n     * .140658E-03,-.196169E-03, .196169E-03,-.157916E-02,-.196169E-03,\n     * .681781E-03,-.106782E-02,-.421477E-03, .170445E-03, .578675E-02,\n     * .202464    , .631965    ,-.202464    ,-.644796E-02, .628383    ,\n     * .893223    ,-.286576E-02,-.363381E-02, .893223    , 1.13626    ,\n     *-.363381E-02,-.136261    , 1.13626    , .561734    ,-.136261    ,\n     *-.191540    , .418080    ,-.300148    ,-.478849E-01,-.423841/\nC\nC....Regressionskoeffizienten fuer die D0.95- / d0.7-Sch?tzung:.....\nc\n      data nxk95a/5,5,2,2,5,6,2,5/\n      data nxk95b/5,5,5,5,5,5,5,5/\nc\n      data xk95a/\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 60.0000,     0. ,     0. ,     0. ,     0. ,     0. ,\n     *0.0000, 60.0000,     0. ,     0. ,     0. ,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 15.0000, 25.0000, 40.0000, 60.0000,     0. ,\n     *0.0000, 60.0000,     0. ,     0. ,     0. ,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. /\nc\n      data xk95b/\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 30.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. ,\n     *0.0000, 10.0000, 25.0000, 40.0000, 60.0000,     0. ,     0. /\nc\nc....D0.95 = a(H) + b(H)*D1.3 m / a(H)=Spline(H)........................\nc\nc.....FICHTE\nc\n      data (a95(i,1),i=1,16)/\n     *    -.2500 ,  -.2500 ,  0.0000 ,  0.0000 ,\n     *    -.2500 ,  -.2500 ,  0.0000 ,   .2989 ,\n     *    -.2500 ,  1.5432 ,   .2989 ,  2.2087 ,\n     *    -.1747 , 22.8312 ,  3.9267 ,  0.0000 /\nc\nc.....TANNE\nc\n      data (a95(i,2),i=1,16)/\n     *     .1056 ,  -.1785 ,  0.0000 ,  0.0000 ,\n     *    -.1785 ,  -.6047 ,  0.0000 ,   .5564 ,\n     *    -.6047 ,  2.3076 ,   .5564 ,  0.0000 ,\n     *    2.3076 ,  6.1906 ,  0.0000 ,  0.0000 /\nc\nc.....DOUGLASIE\nc\n      data (a95(i,3),i=1,4)/\n     *    -.4938 ,   .9066 ,  0.0000 ,  0.0000 /\nc\nc.....KIEFER\nc\n      data (a95(i,4),i=1,4)/\n     *    -.6966 ,  1.3798 ,  0.0000 ,  0.0000 /\nc\nc.....L?RCHE\nc\n      data (a95(i,5),i=1,16)/\n     *    -.5000 ,  -.5000 ,  0.0000 ,  0.0000 ,\n     *    -.5000 ,  -.5000 ,  0.0000 ,   .5225 ,\n     *    -.5000 ,  2.6350 ,   .5225 ,  0.0000 ,\n     *    2.6350 ,  6.8149 ,  0.0000 ,  0.0000 /\nc\nc.....BUCHE\nc\n      data (a95(i,6),i=1,20)/\n     *    -.1097 ,  -.0903 ,  0.0000 , 0.0000    ,\n     *    -.0903 ,  -.0806 ,  0.0000 ,-4.8637E-3 ,\n     *    -.0660 ,  -.1342 ,  -.0195 ,  .1207    ,\n     *    -.2851 ,   .9706 ,   .2716 , 0.0000    ,\n     *     .9706 ,  2.6450 ,  0.0000 , 0.0000    /\nc\nc.....EICHE\nc\n      data (a95(i,7),i=1,4)/\n     *    -.2299 ,   .4612 ,  0.0000 ,  0.0000 /\nc\nc.....ROTEICHE\nc\n      data (a95(i,8),i=1,16)/\n     *    -.4213 ,  -.3170 ,  0.0000 ,  0.0000 ,\n     *    -.3170 ,  -.1605 ,  0.0000 ,   .2115 ,\n     *    -.1605 ,  1.2647 ,   .2115 ,  0.0000 ,\n     *    1.2647 ,  3.1650 ,  0.0000 ,  0.0000 /\nc\nc.....D0.95 = a(H) + b(H)*D1.3 m / b(H)=Spline(H)\nc\nc.....FICHTE\nc\n      data (b95(i,1),i=1,16)/\n     *    1.0967 ,  1.0666 ,  0.0000 ,  0.0000 ,\n     *    1.0666 ,  1.0215 ,  0.0000 ,  -.0187 ,\n     *    1.0215 ,   .8644 ,  -.0187 ,  0.0000 ,\n     *     .8644 ,   .6550 ,  0.0000 ,  0.0000 /\nc\nc.....TANNE\nc\n      data (b95(i,2),i=1,16)/\n     *    1.0806 ,  1.0569 ,  0.0000 ,  0.0000 ,\n     *    1.0569 ,  1.0213 ,  0.0000 ,  -.0163 ,\n     *    1.0213 ,   .8879 ,  -.0163 ,  0.0000 ,\n     *     .8879 ,   .7101 ,  0.0000 ,  0.0000 /\nc\nc.....DOUGLASIE\nc\n      data (b95(i,3),i=1,16)/\n     *    1.1958 ,  1.1105 ,  0.0000 ,  0.0000 ,\n     *    1.1105 ,   .9826 ,  0.0000 ,   .0160 ,\n     *     .9826 ,   .9509 ,   .0160 ,  0.0000 ,\n     *     .9509 ,   .9087 ,  0.0000 ,  0.0000 /\nc\nc.....KIEFER\nc\n      data (b95(i,4),i=1,16)/\n     *    1.2743 ,  1.1536 ,  0.0000 ,  0.0000 ,\n     *    1.1536 ,   .9122 ,  0.0000 ,   .0533 ,\n     *     .9522 ,   .9515 ,   .0133 ,  0.0000 ,\n     *     .9515 ,   .9500 ,  0.0000 ,  0.0000 /\nc\nc.....L?RCHE\nc\n      data (b95(i,5),i=1,16)/\n     *    1.1716 ,  1.1086 ,  0.0000    ,  0.0000    ,\n     *    1.1086 ,  1.0141 ,  0.0000    , -9.5323E-3 ,\n     *    1.0141 ,   .8624 , -9.5323E-3 ,  0.0000    ,\n     *     .8624 ,   .6601 ,  0.0000    ,  0.0000    /\nc\nc.....BUCHE\nc\n      data (b95(i,6),i=1,16)/\n     *    1.1185 ,  1.0708 ,  0.0000    ,  0.0000    ,\n     *    1.0708 ,   .9992 ,  0.0000    ,  3.32990E-3,\n     *     .9992 ,   .9476 ,  3.32990E-3,  0.0000    ,\n     *     .9476 ,   .8788 ,  0.0000    ,  0.0000    /\nc\nc.....EICHE\nc\n      data (b95(i,7),i=1,16)/\n     *    1.1246 ,  1.0723 ,  0.0000    ,  0.0000    ,\n     *    1.0723 ,   .9940 ,  0.0000    ,  6.22952E-3,\n     *     .9940 ,   .9530 ,  6.22952E-3,  0.0000    ,\n     *     .9530 ,   .8984 ,  0.0000    ,  0.0000    /\nc\nc.....ROTEICHE\nc\n      data (b95(i,8),i=1,16)/\n     *    1.1860 ,  1.1065 ,  0.0000 ,  0.0000 ,\n     *    1.1065 ,   .9872 ,  0.0000 ,   .0122 ,\n     *     .9872 ,   .9414 ,   .0122 ,  0.0000 ,\n     *     .9414 ,   .8803 ,  0.0000 ,  0.0000 /\nc\nc.....Sch?tzung des d0.70 = a(H) / a(H)=Spline(H).......................\nc\n\n      Data Snxkn7/5,5,5,5,5,5,5,5/\n\n      Data SXK07 /\n     * 0.,10.,25.,40.,60.,0.,0.,0.,10.,25.,40.,60.,0.,0.,\n     * 0.,10.,25.,40.,60.,0.,0.,0.,10.,25.,40.,60.,0.,0.,\n     * 0.,10.,25.,40.,60.,0.,0.,0.,10.,25.,40.,60.,0.,0.,\n     * 0.,10.,25.,40.,60.,0.,0.,0.,10.,25.,40.,60.,0.,0./\n\n      Data (sd07(i,1), i=1,16)/\n     *     .8623,     .8554,-2.3156E-3,-2.6624E-3,\n     *     .8587,     .8183,-5.9904E-3,3.52532E-3,\n     *     .8183,     .7991,3.52532E-3,3.30230E-3,\n     *     .7965,     .8017,5.87075E-3,-1.7316E-3/\n\n      data (sd07(i,2), i=1,16)/\n     *     .9050,     .8901,-4.9698E-3,-3.2377E-3,\n     *     .8941,     .8353,-7.2848E-3,1.58498E-3,\n     *     .8353,     .7860,1.58498E-3,6.93605E-3,\n     *     .7806,     .7797,     .0123,3.22789E-4/\n\n      data (sd07(i,3), i=1,16)/\n     *     .8604,     .8593,-3.5844E-4,-8.3832E-3,\n     *     .8698,     .7738,    -.0189,     .0169,\n     *     .7738,     .7793,     .0169,-7.4833E-4,\n     *     .7798,     .7801,-1.3304E-3,-8.0434E-5/\n\n      data (sd07(i,4), i=1,16)/\n     *     .6999,     .7002,7.87642E-5,5.53208E-3,\n     *     .6932,     .7558,     .0124,-4.4964E-3,\n     *     .7558,     .7914,-4.4964E-3,-4.2429E-3,\n     *     .7947,     .8026,-7.5429E-3,-2.6275E-3/\n\n      data (sd07(i,5), i=1,16)/\n     *     .8406,     .8388,-6.1619E-4,-5.0611E-3,\n     *     .8451,     .7854,    -.0114,4.41328E-3,\n     *     .7854,     .7522,4.41328E-3,5.02966E-3,\n     *     .7482,     .7509,8.94162E-3,-8.7892E-4/\n\n      data (sd07(i,6), i=1,16)/\n     *     .7932,     .8136,6.80110E-3,-6.7888E-4,\n     *     .8145,     .8374,-1.5275E-3,-3.0239E-3,\n     *     .8374,     .8422,-3.0239E-3,-1.1995E-3,\n     *     .8432,     .8384,-2.1325E-3,1.58773E-3/\n\n      data (sd07(i,7), i=1,16)/\n     *     .7863,     .7974,3.70835E-3,2.97515E-3,\n     *     .7937,     .8439,6.69409E-3,-9.1629E-3,\n     *     .8439,     .8390,-9.1629E-3,9.63937E-4,\n     *     .8383,     .8409,1.71367E-3,-8.5683E-4/\n\n       data (sd07(i,8), i=1,16)/\n     *     .7999,     .8002,7.75448E-5,-6.7517E-4,\n     *     .8010,     .7938,-1.5191E-3,-9.6160E-4,\n     *     .7938,     .7807,-9.6160E-4,1.98990E-3,\n     *     .7792,     .7804,3.53761E-3,-4.0580E-4/\n\nc......Rindenabz?ge.....................................................\n\n       data ((Rin(1,j,i),i=1,3),j=1,4)/\n     * 1.55540 ,  .55475 ,  -0.00255   ,\n     *  .82652 ,  .59424 ,  -0.00212   ,\n     *  .17440 ,  .67905 ,  -0.00247   ,\n     *  .85149 ,  .60934 ,  -0.00228   /\n\nc      Ba(2)/'Tanne Mittenst.S.'/\n\n       data ((Rin(2,j,i),i=1,3),j=1,4)/\n     * 1.67703 , .56074 ,    0.     ,\n     *  .82802 , .62504 ,    0.     ,\n     *  .67058 , .68492 ,    0.     ,\n     * 1.76896 , .59175 ,    0.     /\n\nc      Ba(3)/'Douglasie Mittenst.S. BRD'/\n\n       data ((Rin(3,j,i),i=1,3),j=1,4)/\n     *   .26442, .84153, -.00233       ,\n     *  -.78130, .80713, -.00290       ,\n     * -1.28853, .82882, -.00354       ,\n     * -2.13785, .91597, -.00375       /\n\nc      Ba(4)/'Kiefer'/\n\n       data ((Rin(4,j,i),i=1,3),j=1,4) /\n     * 5.43367 ,  .62571 ,   0.     ,\n     *  .05652 ,  .56149 ,   0.     ,\n     * 4.17891 ,  .22292 ,   0.     ,\n     * 1.59099 ,  .50146 ,   0.     /\n\nc      Ba(5)/'Sitka-Fichte'/\n\n       data ((Rin(5,j,i),i=1,3),j=1,4) /\n     * 1.63833 , .79330 , -.01024      ,\n     * 1.87531 , .66048 , -.00701      ,\n     *-3.23264 , .99143 , -.01183      ,\n     * 0.05167 , .81782 , -.00968      /\n\nc      Ba(6)/'Europ.-L?rche'/\n\n       data ((Rin(6,j,i),i=1,3),j=1,4) /\n     * 4.17426 ,  .99857 ,   0.     ,\n     * 1.21230 , 1.08527 ,   0.     ,\n     * 1.24887 , 1.20858 ,   0.     ,\n     * 3.58012 , 1.03147 ,   0.     /\n\nc      Ba(7)/'Jap.L?rche'/\n\n       data ((Rin(7,j,i),i=1,3),j=1,4) /\n     * -8.04088 , 1.38585 ,   0.    ,\n     * -3.47512 , 1.23849 ,   0.    ,\n     * -15.26157, 1.94338 ,   0.    ,\n     * -3.77073 , 1.29960 ,   0.    /\n\nc      Ba(8)/'Schwarzkiefer'/\n\n       data ((Rin(8,j,i),i=1,3),j=1,4) /\n     * 10.72482 , 1.02208 ,   0.    ,\n     * 11.00729 ,  .80471 ,   0.    ,\n     * 10.30825 ,  .72255 ,   0.    ,\n     *  5.27169 , 1.12602 ,   0.    /\n\nc      Ba(9)/'Weymouthskiefer'/\n\n       data ((Rin(9,j,i),i=1,3),j=1,4) /\n     *  4.67218 ,  .52074 ,   0.    ,\n     *  4.83026 ,  .44885 ,   0.    ,\n     *  4.06786 ,  .46533 ,   0.    ,\n     *  3.63666 ,  .50782 ,   0.    /\n\nc      Ba(10)/'Buche'/\n\n       data ((Rin(10,j,i),i=1,3),j=1,4) /\n     * 1.97733 ,  .28119 ,   0.     ,\n     * 2.25734 ,  .29724 ,   0.     ,\n     * 2.69794 ,  .31096 ,   0.     ,\n     * 2.61029 ,  .28522 ,   0.     /\n\nc      Ba(11)/'Stiel-Eiche'/\n\n       data ((Rin(11,j,i),i=1,3),j=1,4) /\n     *  9.10974 ,  .66266 , 0.      ,\n     *  8.94454 ,  .71505 , 0.      ,\n     *  9.88377 ,  .75877 , 0.      ,\n     * 10.18342 ,  .68997 , 0.      /\n\nc      Ba(12)/'Trauben-Eiche (Bauland)'/\n\n       data ((Rin(12,j,i),i=1,3),j=1,4) /\n     *  11.90259 ,  .74264 , 0.     ,\n     *  12.80219 ,  .75623 , 0.     ,\n     *  13.54592 ,  .78294 , 0.     ,\n     *  14.31589 ,  .72699 , 0.     /\n\nc      Ba(13)/'Trauben-Eiche (Vorbergzone)'/\n\n       data ((Rin(13,j,i),i=1,3),j=1,4) /\n     *   6.53655 ,  .58931 , 0.     ,\n     *   7.41153 ,  .61954 , 0.     ,\n     *   9.30269 ,  .64363 , 0.     ,\n     *   9.88855 ,  .56734 , 0.     /\n\nc      Ba(14)/'Rot-Eiche'/\n\n       data ((Rin(14,j,i),i=1,3),j=1,4) /\n     *  -1.84576 ,  .86920 , -.00523   ,\n     *  -3.98295 ,  .95987 , -.00616   ,\n     *  -3.44335 ,  .97132 , -.00630   ,\n     *  -3.19581 ,  .93891 , -.00596   /\n\nc      Ba(15)/'Bergahorn'/\n\n       data ((Rin(15,j,i),i=1,3),j=1,4) /\n     *  -0.60951 ,  .64014 , -.00329   ,\n     *  -3.53373 ,  .91611 , -.00707   ,\n     *  -4.57300 , 1.06506 , -.00929   ,\n     *  -0.62466 ,  .73312 , -.00482   /\n\nc      Ba(16)/'Linde'/\n\n       data ((Rin(16,j,i),i=1,3),j=1,4) /\n     *   2.26031 ,  .60113 ,    0.  ,\n     *    .38145 ,  .68665 ,    0.  ,\n     *    .32491 ,  .72416 ,    0.  ,\n     *   1.39565 ,  .65024 ,    0.  /\n\nc      Ba(17)/'Esche'/\n\n       data ((Rin(17,j,i),i=1,3),j=1,4) /\n     * -1.14181 ,  .96466 , -.00432    ,\n     * -8.40201 , 1.41083 , -.00964    ,\n     * -3.62803 , 1.21051 , -.00777    ,\n     * -7.97623 , 1.40182 , -.01011    /\n\nc      Ba(18)/'Hainbuche'/\n\n       data ((Rin(18,j,i),i=1,3),j=1,4) /\n     *  5.03406 ,  .28277 ,   0.    ,\n     *  9.12572 ,  .16002 ,   0.    ,\n     *  6.96653 ,  .24105 ,   0.    ,\n     *  7.47159 ,  .20957 ,   0.    /\n\nc      Ba(19)/'Robinie'/\n\n       data ((Rin(19,j,i),i=1,3),j=1,4) /\n     *  -0.27505 , 1.58820 , 0.     ,\n     *  -3.25513 , 1.70546 , 0.     ,\n     *  -3.85748 , 1.81024 , 0.     ,\n     *  -2.57381 , 1.69622 , 0.     /\n\nc      Ba(20)/'Bergulme'/\n\n       data ((Rin(20,j,i),i=1,3),j=1,4) /\n     *   8.18895 ,  .84696 , 0.     ,\n     *   8.61699 ,  .88780 , 0.     ,\n     *   5.61794 , 1.06130 , 0.     ,\n     *   8.26574 ,  .89505 , 0.     /\n\nc      Ba(21)/'Birke'/\n\n       data ((Rin(21,j,i),i=1,3),j=1,4) /\n     *  -2.11471 , 0.94927 , 0.     ,\n     *   1.59351 ,  .77363 , 0.     ,\n     *   3.77295 ,  .69716 , 0.     ,\n     *   1.63138 ,  .78958 , 0.     /\n\nc      Ba(22)/'Maril.Pappel'/\n\n       data ((Rin(22,j,i),i=1,3),j=1,4) /\n     *  14.26657 ,  .77462 , 0.     ,\n     *   6.75576 ,  .90682 , 0.     ,\n     *   8.66612 ,  .90762 , 0.     ,\n     *  12.74678 ,  .79624 , 0.     /\n\nc      Ba(23)/'Robusta-Pappel'/\n\n       data ((Rin(23,j,i),i=1,3),j=1,4) /\n     *    .59848 , 1.20446 , -.00622   ,\n     *    .66922 , 1.09135 , -.00480   ,\n     *  -5.09109 , 1.35474 , -.00771   ,\n     *  -1.26961 , 1.21661 , -.00624   /\n\nc      Ba(24)/'Neupotz-Pappel'/\n\n       data ((Rin(24,j,i),i=1,3),j=1,4) /\n     *  -3.63150 ,  1.20021  , -0.00481,\n     *  -4.36578 ,  1.13876  , -0.00394,\n     *  -8.28526 ,  1.42238  , -0.00720,\n     *  -3.68200 ,  1.21090  , -0.00514/\n\nc      Ba(25)/'Regenerata-Pappel'/\n\n       data ((Rin(25,j,i),i=1,3),j=1,4) /\n     *  10.09257 ,  0.65481  ,       0.,\n     *   7.88366 ,  0.63141  ,       0.,\n     *   3.63461 ,  0.72700  ,       0.,\n     *   7.20165 ,  0.67110  ,       0./\n\nc      Ba(26)/'Kirsche'/\n\n       data ((Rin(26,j,i),i=1,3),j=1,4) /\n     *   4.54768 ,  0.52967  ,       0.,\n     *   2.02813 ,  0.66068  ,       0.,\n     *   1.54289 ,  0.73426  ,       0.,\n     *   4.05603 ,  0.58080  ,       0./\n\nc      Ba(27)/'Spitzahorn'/\n\n       data ((Rin(27,j,i),i=1,3),j=1,4) /\n     *   6.68053 ,  0.42792  ,       0.,\n     *   4.81679 ,  0.50288  ,       0.,\n     *   6.39906 ,  0.50162  ,       0.,\n     *   7.43957 ,  0.43244  ,       0./\n\nc      Ba(28)/'Roterle'/\n\n       data ((Rin(28,j,i),i=1,3),j=1,4) /\n     *  7.33868 ,  .82437 ,   0.    ,\n     *  8.02746 ,  .83030 ,   0.    ,\n     *  8.35663 ,  .90946 ,   0.    ,\n     *  8.05239 ,  .84910 ,   0.    /\n\nc      Ba(1)/'Fichte  HS'/\n\n       data ((Rinh(1,j,i),i=1,3),j=1,5) /\n     *  .44837 , .62253 , -.00288      ,\n     *  .86715 , .59173 , -.00207      ,\n     *  .08917 , .65407 , -.00286      ,\n     *  .10719 , .64706 , -.00299      ,\n     *-2.78642 ,1.03228 , -.00928      /\n\nc      Ba(2)/'Tanne'/\n\n       data ((Rinh(2,j,i),i=1,3),j=1,5) /\n     * 1.19602 , .5998  ,    0.     ,\n     *  .87088 , .62366 ,    0.     ,\n     *  .71386 , .63868 ,    0.     ,\n     * -.00716 , .68394 , -.00098   ,\n     *-1.80354 , .98094 , -.00553   /\n\nc  Douglasie *******  Ba-Wue ******************************\n\nc    * 2.80936 , .61135 ,    0.     ,\nc    * 2.73074 , .59815 ,    0.     ,\nc    * 2.77691 , .58918 ,    0.     ,\nc    * 2.72169 , .60313 ,    0.     ,\nc    * 1.12142 , .65961 , -.00103   /\n\nc      Ba(3)/'Douglasie BRD'/\n\n       data ((Rinh(3,j,i),i=1,3),j=1,5) /\n     *  .15897 , .75493 , -.00175      ,\n     * -.74639 , .80389 , -.00282      ,\n     * -.09716 , .74927 , -.00206      ,\n     *  .30396 , .73153 , -.00154      ,\n     *-1.78499 , .84379 , -.00377      /\n\nc      Ba(4)/'Sitka-Fichte'/\n\nc       data ((Rinh(4,j,i),i=1,3),j=1,5) /\nc     * 1.53580 , .71693 , -.00877      ,\nc     * 1.53580 , .71693 , -.00877      ,\nc     * 1.53580 , .71693 , -.00877      ,\nc     * 1.53580 , .71693 , -.00877      ,\nc     *-3.00126 ,1.10681 , -.01385      /\n\n\nc......Zuordnungstabelle................................................\n\n\n      data Ban /\n\nc 1 Schaftform\n\n     * 1, 1, 2, 2, 4, 4, 4, 3, 5, 5, 5, 1, 1, 1, 6, 6, 7, 8, 8, 8, 6,\n     * 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6,\n\nc 2 Rinde\n\n     * 1, 1, 2, 2, 4, 8, 9, 3, 6, 6, 7, 1, 1, 2,10,18,11,14,25,25,17,\n     *15,15,15,21,21,16,28,26,20,19,23,11,12,12,26,\n\nc 3 Duchschni. Aufarbeitungsgrenze (EST)\n\n     * 1, 1, 3, 3, 4, 4, 4, 1, 5, 5, 5, 1, 1, 1, 6, 6, 7, 7, 6, 6, 6,\n     * 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 7,\n\nc 4 Unverwb. Derbholz.\n\n     * 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2,\n     * 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n\nc 5 durchschn. Astdurchmesser\n\n     * 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2,\n     * 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n\nc 6 Massentarife nach Krenn fuer schwache B?ume\n\n     * 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 6, 6, 6, 6,\n     * 6, 4, 4, 4, 6, 4, 6, 5, 6, 5, 4, 5, 6, 6, 4,\n\nc 7 Massentafeln\n\n     * 1, 1, 2, 2, 4, 4, 5, 3, 6, 6, 7, 1, 1, 1, 8,13, 9,10,14,14,11,\n     *11,11,11, 9,13, 8,12, 9,11,13, 9, 9,11,11, 9/\nc\nc      1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21\nc     Fi SF Ta KT Ki SK WK DG La EL JL Th Ts SN Bu HB Ei RE Pa BP Es\nc     22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\nc     Ah BA SA FA Bi Li Er Ki Ul Ro El Ka We LB VB\nc\nc     'FICHTE  S?ddeutschland'\n\n      DATA (Azo(1,j),j=0,3)/\n     *    .639936E+0   ,.663158E+0 ,-.380240E-1  , 0./\n\nc     'FICHTE  Norddeutschland'\n\n      DATA (Azo(2,j),j=0,3)/\n     *   -.162417E+1   ,.230909E+1 ,-.349112E+0  , .913825E-002/\n\nc     'TANNE'\n      DATA (Azo(3,j),j=0,3)/\n     *    .923207E+0   ,.615834E+0 ,-.688764E-1  , .781537E-2/\n\nc     'KIEFER'\n\n      DATA (Azo(4,j),j=0,3)/\n     *   -.170313E+1   ,.238869E+1 ,-.396125     ,.241501E-1/\n\nc     'L?RCHE'\n\n      DATA (Azo(5,j),j=0,3)/\n     *    .113353E+1   ,.167188    , .113906     ,-.161586E-1/\n\nc     'BUCHE'\n\n      DATA (Azo(6,j),j=0,3)/\n     *    .241433E+1  ,-.330161E+0 , .129946E+0  ,-.112017E-1/\n\nc     'EICHE'\n\n      DATA (Azo(7,j),j=0,3)/\n     *   -.358315E+0   ,.113226E+1 ,-.208216E-1  ,-.150484E-1/\nc\nc      BUCHE\nc    ==========\n\n      DATA (unvd(1,1,i),i=1,33)/\n     *   36.00, 80.50,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,2,i),i=1,33)/\n     *   15.79, 36.93, 58.90, 85.50,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,3,i),i=1,33)/\n     *    7.77, 18.82, 32.68, 50.63, 66.33,\n     *  85.82,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,4,i),i=1,33)/\n     *    3.43,  8.65, 16.81, 28.18, 39.42,\n     *  56.06, 71.01, 83.48,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,5,i),i=1,33)/\n     *    2.32,  5.49, 10.24, 17.02, 24.70,\n     *  35.46, 47.49, 59.66, 72.84, 84.49,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,6,i),i=1,33)/\n     *    1.78,  3.87,  6.59, 10.40, 15.49,\n     *  21.82, 30.56, 41.11, 53.39, 66.87, 77.54,\n     *   89.87,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,7,i),i=1,33)/\n     *    1.36,  2.87,  4.78,  7.20, 10.70,\n     *  14.77, 20.22, 27.83, 36.98, 48.02, 58.74,\n     *   70.50, 79.38, 88.40,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,8,i),i=1,33)/\n     *    1.11,  2.44,  3.98,  5.85,  8.38,\n     *  11.40, 14.35, 19.02, 24.62, 31.78, 40.76,\n     *   50.54, 61.17, 72.32, 82.02, 92.71,\n     *  99.94,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,9,i),i=1,33)/\n     *    1.08,  2.15,  3.36,  4.81,  6.61,\n     *   8.83, 10.83, 13.86, 17.28, 21.97, 28.61,\n     *   35.99, 46.03, 56.67, 66.71, 75.05,\n     *  83.40, 93.67, 99.85,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,10,i),i=1,33)/\n     *    1.22,  1.95,  2.92,  4.07,  5.38,\n     *   7.03,  9.39, 11.93, 14.41, 17.88, 21.81,\n     *   26.57, 33.25, 41.19, 51.22, 59.64,\n     *  68.32, 75.63, 82.77, 91.59,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,11,i),i=1,33)/\n     *    1.27,  1.83,  2.66,  3.64,  4.69,\n     *   6.02,  8.43, 10.65, 12.59, 15.30, 17.51,\n     *   20.51, 24.60, 30.22, 37.80, 46.48,\n     *  54.69, 61.63, 69.11, 78.18, 86.16, 92.58,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,12,i),i=1,33)/\n     *    1.18,  1.79,  2.58,  3.51,  4.55,\n     *   5.80,  7.69,  9.57, 11.26, 13.50, 15.23,\n     *   17.52, 20.39, 24.47, 28.74, 35.58,\n     *  42.53, 49.67, 56.86, 65.57, 72.83, 79.91,\n     *   87.22, 93.61,100.76,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,13,i),i=1,33)/\n     *    1.04,  1.76,  2.58,  3.53,  4.66,\n     *   5.92,  7.16,  8.69, 10.27, 12.22, 14.05,\n     *   16.15, 18.52, 21.59, 24.01, 27.52,\n     *  32.80, 39.75, 46.02, 53.78, 60.27, 67.34,\n     *   73.89, 80.07, 87.04, 92.38,100.75,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,14,i),i=1,33)/\n     *     .94,  1.74,  2.59,  3.54,  4.70,\n     *   5.95,  6.85,  8.01,  9.48, 11.18, 13.04,\n     *   14.95, 16.93, 19.19, 21.64, 23.89,\n     *  27.49, 31.86, 36.60, 42.79, 48.48, 54.86,\n     *   61.35, 68.16, 74.86, 80.93, 87.70,\n     *  94.60,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(1,15,i),i=1,33)/\n     *     .87,  1.73,  2.59,  3.53,  4.69,\n     *   5.89,  6.72,  7.52,  8.90, 10.40, 12.20,\n     *   13.93, 15.60, 17.27, 19.60, 21.24,\n     *  23.25, 26.01, 28.80, 32.99, 37.85, 43.97,\n     *   50.59, 56.88, 64.23, 70.52, 77.31,\n     *  82.04, 86.52, 90.71, 94.32,100.00,100.00/\n\n      DATA (unvd(1,16,i),i=1,33)/\n     *     .84,  1.73,  2.60,  3.51,  4.62,\n     *   5.74,  6.59,  7.23,  8.52,  9.87, 11.52,\n     *   13.08, 14.55, 15.84, 17.92, 19.94,\n     *  21.07, 22.20, 23.79, 26.57, 30.66, 35.69,\n     *   41.62, 47.22, 54.15, 60.15, 66.56,\n     *  70.86, 74.58, 79.66, 82.91, 87.62, 91.80/\n\n      DATA (unvd(1,17,i),i=1,33)/\n     *     .85,  1.73,  2.60,  3.47,  4.49,\n     *   5.50,  6.43,  7.14,  8.35,  9.58, 11.02,\n     *   12.40, 13.76, 14.90, 16.58, 18.54,\n     *  19.63, 20.43, 21.78, 23.92, 27.31, 30.51,\n     *   34.43, 39.19, 44.62, 49.81, 55.47,\n     *  61.06, 65.62, 71.30, 75.94, 79.38, 84.24/\n\n      DATA (unvd(1,18,i),i=1,33)/\n     *     .88,  1.74,  2.60,  3.44,  4.35,\n     *   5.24,  6.26,  7.12,  8.25,  9.41, 10.61,\n     *   11.83, 13.13, 14.22, 15.50, 17.20,\n     *  18.60, 19.69, 21.25, 23.14, 25.90, 28.46,\n     *   30.25, 33.16, 36.89, 41.05, 45.82,\n     *  52.62, 57.62, 62.62, 66.40, 70.54, 76.75/\n\n      DATA (unvd(1,19,i),i=1,33)/\n     *     .92,  1.77,  2.61,  3.43,  4.25,\n     *   5.05,  6.05,  7.07,  8.13,  9.21, 10.22,\n     *   11.31, 12.52, 13.58, 14.58, 16.07,\n     *  17.67, 18.97, 20.68, 22.37, 24.55, 25.55,\n     *   27.31, 29.51, 32.20, 35.40, 39.39,\n     *  45.57, 50.59, 54.63, 59.30, 64.09, 70.31/\n\n      DATA (unvd(1,20,i),i=1,33)/\n     *     .97,  1.80,  2.63,  3.42,  4.19,\n     *   4.93,  5.83,  6.99,  7.97,  8.99,  9.87,\n     *   10.83, 11.95, 12.99, 13.82, 15.15,\n     *  16.84, 18.28, 20.06, 21.60, 23.26, 24.79,\n     *   26.32, 27.94, 30.18, 32.50, 35.83,\n     *  39.88, 44.53, 48.32, 52.64, 57.03, 62.15/\n\n      DATA (unvd(1,21,i),i=1,33)/\n     *    1.03,  1.86,  2.64,  3.44,  4.17,\n     *   4.88,  5.68,  6.87,  7.77,  8.75,  9.54,\n     *   10.40, 11.41, 12.45, 13.23, 14.45,\n     *  16.12, 17.62, 19.40, 20.83, 22.04, 23.17,\n     *   25.55, 26.67, 28.57, 30.24, 32.95,\n     *  35.58, 39.44, 42.70, 46.41, 50.36, 54.62/\n\n      DATA (unvd(1,22,i),i=1,33)/\n     *    1.09,  1.92,  2.66,  3.46,  4.19,\n     *   4.90,  5.61,  6.72,  7.54,  8.48,  9.25,\n     *   10.02, 10.91, 11.95, 12.80, 13.95,\n     *  15.50, 16.98, 18.70, 20.07, 20.87, 22.70,\n     *   23.70, 25.38, 27.01, 28.25, 30.39,\n     *  32.24, 35.19, 38.76, 40.81, 44.09, 47.92/\n\n      DATA (unvd(1,23,i),i=1,33)/\n     *    1.15,  1.98,  2.70,  3.50,  4.23,\n     *   4.95,  5.61,  6.57,  7.32,  8.23,  8.99,\n     *    9.69, 10.47, 11.50, 12.45, 13.56,\n     *  14.93, 16.34, 17.95, 19.28, 19.77, 21.38,\n     *   22.77, 24.12, 25.49, 26.55, 28.15,\n     *  29.46, 31.65, 34.64, 36.01, 39.20, 42.06/\n\n      DATA (unvd(1,24,i),i=1,33)/\n     *    1.19,  2.03,  2.75,  3.54,  4.27,\n     *   5.00,  5.70,  6.46,  7.15,  8.02,  8.77,\n     *    9.43, 10.13, 11.08, 12.09, 13.13,\n     *  14.35, 15.68, 17.16, 18.43, 18.73, 20.21,\n     *   21.77, 22.84, 24.01, 25.12, 26.22,\n     *  27.26, 28.83, 30.47, 32.02, 34.71, 37.05/\n\n      DATA (unvd(1,25,i),i=1,33)/\n     *    1.21,  2.07,  2.82,  3.57,  4.32,\n     *   5.04,  5.84,  6.39,  7.03,  7.86,  8.60,\n     *    9.24,  9.89, 10.71, 11.72, 12.68,\n     *  13.75, 14.99, 16.33, 17.51, 17.75, 19.18,\n     *   20.70, 21.57, 22.57, 23.91, 24.59,\n     *  25.55, 26.66, 27.56, 28.81, 30.67, 32.88/\n\n      DATA (unvd(1,26,i),i=1,33)/\n     *    1.20,  2.10,  2.90,  3.61,  4.37,\n     *   5.09,  5.95,  6.35,  6.97,  7.75,  8.48,\n     *    9.11,  9.76, 10.37, 11.33, 12.21,\n     *  13.13, 14.27, 15.45, 16.54, 16.83, 18.30,\n     *   19.55, 20.29, 21.18, 22.63, 23.06,\n     *  24.01, 24.82, 25.61, 26.28, 27.51, 29.58/\n\n      DATA (unvd(1,27,i),i=1,33)/\n     *    1.18,  2.11,  2.99,  3.65,  4.42,\n     *   5.14,  5.99,  6.35,  6.96,  7.69,  8.40,\n     *    9.05,  9.73, 10.08, 10.94, 11.70,\n     *   12.51, 13.52, 14.54, 15.5, 15.97, 17.56,\n     *  18.33, 19., 19.82, 21.22, 21.59, 22.57,\n     *   23.23, 24., 24.4, 25.28, 27.15/\nc\nc  EICHE\nc===========\n      DATA (unvd(2, 1,i),i=1,33)/\n     *   25.00, 47.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 2,i),i=1,33)/\n     *   15.00, 29.00, 63.42, 83.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 3,i),i=1,33)/\n     *    8.03, 16.61, 31.00, 49.26, 70.81,\n     *  91.33,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 4,i),i=1,33)/\n     *    3.56,  8.30, 12.99, 21.55, 31.03,\n     *  46.42, 66.69, 83.55, 99.47,102.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 5,i),i=1,33)/\n     *    2.42,  5.24,  9.27, 14.41, 21.06,\n     *  29.84, 43.72, 57.78, 71.80, 84.97,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 6,i),i=1,33)/\n     *    2.28,  4.14,  6.71, 10.40, 14.72,\n     *  20.25, 27.79, 38.41, 50.64, 64.84, 76.42,\n     *   89.34,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 7,i),i=1,33)/\n     *    2.15,  3.51,  5.31,  8.38, 11.13,\n     *  14.59, 18.88, 25.45, 33.98, 44.85, 55.04,\n     *   65.71, 77.23, 87.59,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 8,i),i=1,33)/\n     *    2.00,  3.12,  4.54,  6.63,  8.70,\n     *  11.27, 14.22, 17.39, 22.13, 28.45, 38.38,\n     *   46.85, 56.96, 66.35, 78.08, 87.67,\n     * 100.00,100.00,100.00,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2, 9,i),i=1,33)/\n     *    1.83,  2.77,  3.90,  5.27,  6.81,\n     *   8.69, 10.98, 12.68, 15.39, 19.11, 26.46,\n     *   32.76, 40.24, 47.29, 58.20, 67.22,\n     *  78.07, 88.57,100.24,100.00,100.00,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2,10,i),i=1,33)/\n     *    1.63,  2.45,  3.39,  4.28,  5.47,\n     *   6.87,  9.06, 10.94, 13.15, 15.97, 19.00,\n     *   23.25, 28.07, 34.44, 43.01, 51.04,\n     *  61.36, 71.11, 79.11, 87.31, 95.05,100.00,\n     *  100.00,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2,11,i),i=1,33)/\n     *    1.40,  2.17,  3.00,  3.68,  4.67,\n     *   5.80,  7.68,  9.79, 11.74, 14.00, 16.45,\n     *   18.29, 21.43, 25.79, 32.52, 39.13,\n     *  47.70, 55.75, 65.18, 72.88, 80.36, 88.63,\n     *   95.76,100.00,100.00,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2,12,i),i=1,33)/\n     *    1.15,  1.92,  2.73,  3.45,  4.43,\n     *   5.48,  6.71,  8.83, 10.55, 12.35, 13.55,\n     *   15.70, 18.29, 21.34, 26.31, 31.49,\n     *  38.07, 44.47, 52.45, 60.69, 67.57, 76.17,\n     *   81.80, 89.74, 95.32,100.00,100.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2,13,i),i=1,33)/\n     *     .92,  1.71,  2.54,  3.41,  4.43,\n     *   5.51,  6.15,  8.06,  9.57, 11.01, 12.01,\n     *   13.85, 16.38, 19.16, 21.95, 26.48,\n     *  31.17, 36.08, 41.77, 49.73, 56.68, 62.80,\n     *   69.38, 75.64, 82.40, 88.98, 96.00,\n     * 100.00,100.00,100.00,100.00,100.00,100.00/\n\n      DATA (unvd(2,14,i),i=1,33)/\n     *     .75,  1.55,  2.39,  3.36,  4.40,\n     *   5.49,  6.01,  7.47,  8.81, 10.00, 11.54,\n     *   13.11, 15.39, 17.31, 19.02, 22.47,\n     *  25.70, 29.41, 34.00, 40.00, 45.67, 51.54,\n     *   57.49, 64.55, 71.61, 78.84, 85.03,\n     *  91.54, 96.56, 99.95,100.52,100.00,100.00/\n\n      DATA (unvd(2,15,i),i=1,33)/\n     *     .64,  1.43,  2.28,  3.28,  4.33,\n     *   5.42,  6.21,  7.08,  8.26,  9.30, 11.14,\n     *   12.50, 14.35, 15.78, 17.39, 19.46,\n     *  21.67, 24.46, 27.89, 31.73, 35.87, 41.37,\n     *   47.14, 54.48, 60.93, 66.45, 73.33,\n     *  80.11, 85.13, 89.63, 95.07,100.00,100.00/\n\n      DATA (unvd(2,16,i),i=1,33)/\n     *     .60,  1.36,  2.20,  3.19,  4.22,\n     *   5.29,  6.37,  6.88,  7.93,  8.92, 10.81,\n     *   12.00, 13.46, 14.58, 16.19, 17.45,\n     *  19.06, 21.21, 23.99, 26.16, 29.15, 34.29,\n     *   39.33, 45.42, 51.37, 55.83, 62.21,\n     *  68.30, 75.71, 80.61, 86.40, 92.00, 95.84/\n\n      DATA (unvd(2,17,i),i=1,33)/\n     *     .61,  1.34,  2.15,  3.09,  4.08,\n     *   5.10,  6.42,  6.87,  7.82,  8.86, 10.55,\n     *   11.63, 12.75, 13.71, 15.29, 16.44,\n     *  17.88, 19.68, 21.05, 23.53, 25.82, 29.32,\n     *   33.06, 37.37, 41.93, 46.96, 52.69,\n     *  58.11, 64.29, 70.90, 76.50, 81.41, 85.45/\n\n      DATA (unvd(2,18,i),i=1,33)/\n     *     .66,  1.34,  2.13,  3.00,  3.95,\n     *   4.93,  6.37,  6.95,  7.83,  8.95, 10.36,\n     *   11.37, 12.21, 13.16, 14.68, 15.97,\n     *  17.45, 19.06, 20.09, 22.45, 24.33, 26.08,\n     *   28.53, 31.20, 35.24, 39.85, 44.76,\n     *  49.54, 55.87, 61.50, 67.39, 71.36, 75.19/\n\n      DATA (unvd(2,19,i),i=1,33)/\n     *     .70,  1.36,  2.14,  2.96,  3.87,\n     *   4.82,  6.20,  7.01,  7.85,  9.03, 10.24,\n     *   11.23, 11.85, 12.93, 14.37, 15.62,\n     *  17.10, 18.55, 19.09, 21.57, 23.13, 24.22,\n     *   25.96, 27.75, 30.93, 34.50, 38.41,\n     *  42.59, 47.46, 52.41, 58.05, 61.85, 66.08/\n\n      DATA (unvd(2,20,i),i=1,33)/\n     *     .74,  1.39,  2.16,  2.96,  3.85,\n     *   4.79,  5.95,  7.05,  7.90,  9.08, 10.19,\n     *   11.19, 11.65, 12.99, 14.31, 15.36,\n     *  16.82, 18.15, 18.93, 20.87, 22.20, 23.56,\n     *   25.11, 26.70, 28.59, 30.90, 33.67,\n     *  36.26, 39.48, 44.50, 49.36, 53.89, 59.12/\n\n      DATA (unvd(2,21,i),i=1,33)/\n     *     .77,  1.43,  2.21,  3.01,  3.89,\n     *   4.82,  5.78,  7.08,  7.96,  9.11, 10.13,\n     *   11.16, 11.64, 13.07, 14.28, 15.21,\n     *  16.62, 17.87, 18.88, 20.37, 21.57, 23.10,\n     *   24.53, 26.03, 27.72, 29.07, 30.51,\n     *  32.55, 34.36, 37.63, 41.18, 47.48, 53.30/\n\n      DATA (unvd(2,22,i),i=1,33)/\n     *     .80,  1.49,  2.28,  3.11,  3.99,\n     *   4.92,  5.69,  7.10,  8.05,  9.13, 10.07,\n     *   11.12, 11.79, 13.13, 14.23, 15.17,\n     *  16.50, 17.70, 18.82, 20.06, 21.22, 22.66,\n     *   23.99, 25.41, 26.92, 28.15, 28.94,\n     *  31.47, 33.09, 34.81, 38.50, 43.05, 48.28/\n\n      DATA (unvd(2,23,i),i=1,33)/\n     *     .82,  1.55,  2.36,  3.22,  4.10,\n     *   5.04,  5.70,  7.10,  8.12,  9.13, 10.00,\n     *   11.06, 12.01, 13.16, 14.17, 15.16,\n     *  16.41, 17.58, 18.74, 19.85, 21.01, 22.25,\n     *   23.49, 24.83, 26.19, 27.30, 28.20,\n     *  30.25, 31.28, 33.56, 36.34, 40.03, 43.73/\n\n      DATA (unvd(2,24,i),i=1,33)/\n     *     .84,  1.59,  2.42,  3.31,  4.19,\n     *   5.14,  5.81,  7.08,  8.17,  9.11,  9.92,\n     *   11.00, 12.18, 13.16, 14.10, 15.14,\n     *  16.30, 17.45, 18.64, 19.64, 20.80, 21.87,\n     *   23.03, 24.30, 25.51, 26.53, 27.52,\n     *  29.14, 30.53, 32.42, 34.46, 37.42, 40.64/\n\n      DATA (unvd(2,25,i),i=1,33)/\n     *     .86,  1.63,  2.47,  3.37,  4.25,\n     *   5.21,  5.99,  7.05,  8.20,  9.08,  9.84,\n     *   10.92, 12.30, 13.15, 14.01, 15.09,\n     *  16.18, 17.32, 18.53, 19.42, 20.59, 21.52,\n     *   22.61, 23.82, 24.90, 25.84, 26.91,\n     *  28.15, 29.84, 31.38, 32.65, 35.22, 37.00/\n\n      DATA (unvd(2,26,i),i=1,33)/\n     *     .87,  1.66,  2.50,  3.42,  4.29,\n     *   5.24,  6.15,  7.01,  8.19,  9.02,  9.75,\n     *   10.84, 12.37, 13.10, 13.91, 15.02,\n     *  16.05, 17.17, 18.40, 19.21, 20.37, 21.19,\n     *   22.23, 23.38, 24.35, 25.22, 26.35,\n     *  27.27, 29.21, 30.44, 31.90, 32.44, 33.84/\n\n      DATA (unvd(2,27,i),i=1,33)/\n     *     .88,  1.68,  2.52,  3.44,  4.31,\n     *   5.25,  6.25,  6.94,  8.16,  8.95,  9.66,\n     *   10.74, 12.40, 13.04, 13.79, 14.92,\n     *   15.91,17.02, 18.26, 19.  , 20.16, 20.89,\n     *   21.88, 22.99, 23.86, 24.67, 25.86, 26.5,\n     *   27.64, 28.61 ,30.23,31.07,32.13/\n\n      DATA PI/7.8539816E-5/\n\nc     H?henrahmen FICHTE\n\n      data (hoehr(1,i),i=1,6)/\n     *6.5,7.5,8.5,8.,9.,10./\n\nc     H?henrahmen TANNE\n\n      data (hoehr(2,i),i=1,6)/\n     *7.,7.5,8.5,8.,9.,10./\n\nc     Hoehenrahmen KIEFER\n\n      data (hoehr(3,i),i=1,6)/\n     *7.,8.,9.,9.,10.,11./\n\nc     Hoehenrahmen BUCHE\n\n      data (hoehr(4,i),i=1,6)/\n     *9.,10.,11.,10.5,12.,13./\n\nc     Hoehenrahmen EICHE\n\n      data (hoehr(5,i),i=1,6)/\n     *8.,9.,10.,9.5,10.5,11.5/\n\nc     Hoehenrahmen ESCHE\n\n      data (hoehr(6,i),i=1,6)/\n     *9.5,10.5,11.5,11.,12.,13./\n\nc    * FICHTE-U\n\n      data (Volk(1,I,1),i=1,30)/\n     *110,114,118,121,125,129,133,137,140,144,\n     *148,155,161,168,174,181,188,194,201,207,\n     *214,224,235,245,256,266,276,287,297,308/\n\nc    * FICHTE-M\n\n      data (Volk(1,I,2),i=1,30)/\n     *125,129,134,138,143,147,151,155,159,164,\n     *168,176,183,191,198,206,213,221,228,236,\n     *243,255,267,278,290,302,314,326,337,349/\n\nc    * FICHTE-O\n\n      data (Volk(1,I,3),i=1,30)/\n     *140,145,150,154,159,164,169,174,178,183,\n     *188,196,205,213,222,230,238,247,255,264,\n     *272,285,298,312,325,338,351,364,378,391/\n\nc    * TANNE-U\n\n      data (Volk(2,I,1),i=1,30)/\n     * 95,101,106,112,118,124,129,135,141,146,\n     *152,160,167,175,182,190,198,205,213,220,\n     *228,238,247,257,267,277,286,296,306,315/\n\nc    * TANNE-M\n\n      data (Volk(2,I,2),i=1,30)/\n     *108,115,121,128,134,141,147,154,160,167,\n     *173,182,190,199,207,216,225,233,242,250,\n     *259,270,281,292,303,314,325,336,347,358/\n\nc    * TANNE-O\n\n      data (Volk(2,I,3),i=1,30)/\n     *121,128,136,143,150,158,165,172,179,187,\n     *194,204,213,223,232,242,252,261,271,280,\n     *290,302,315,327,339,352,364,376,388,401/\n\nc    * KIEFER-U\n\n      data (Volk(3,I,1),i=1,30)/\n     * 91, 96,101,106,111,116,121,126,131,136,\n     *141,148,154,161,167,174,181,187,194,200,\n     *207,215,224,232,240,249,257,265,273,282/\n\nc    * KIEFER-M\n\n      data (Volk(3,I,2),i=1,30)/\n     *104,110,115,121,126,132,138,143,149,154,\n     *160,168,175,183,190,198,205,213,220,228,\n     *235,245,254,264,273,283,292,302,311,321/\n\nc    * KIEFER-O\n\n      data (Volk(3,I,3),i=1,30)/\n     *116,122,129,135,141,148,154,160,166,173,\n     *179,187,196,204,213,221,229,238,246,255,\n     *263,274,284,295,306,317,327,338,349,359/\n\nc    *Buche-U\n\n      data (Volk(4,I,1),i=1,30)/\n     *34, 40, 45, 51, 56, 62, 67, 73, 78, 84,\n     *89, 98,107,115,124,133,142,151,159,168,\n     *177,187,196,206,216,226,235,245,255,264/\n\nc    * BUCHE-M\n\n      data (Volk(4,I,2),i=1,30)/\n     *39, 45, 51, 58, 64, 70, 76, 82, 87, 94,\n     *101,111,121,131,141,151,161,171,181,191,\n     *201,212,223,234,245,256,267,278,289,300/\n\nc    * BUCHE-O\n\n      data (Volk(4,I,3),i=1,30)/\n     *44, 51, 58, 65, 72, 79, 85, 92, 99,106,\n     *113,124,135,147,158,169,180,191,203,214,\n     *225,237,250,262,274,287,299,311,323,336/\n\nc    * EICHE-U\n\n      data (Volk(5,I,1),i=1,30)/\n     *123,129,135,142,148,154,160,166,173,179,\n     *185,192,198,205,211,218,225,231,238,244,\n     *251,260,270,279,289,298,307,317,326,336/\n\nc    * EICHE-M\n\n      data (Volk(5,I,2),i=1,30)/\n     *140,147,154,161,168,175,182,189,196,203,\n     *210,218,225,233,240,248,255,263,270,278,\n     *285,296,306,317,328,339,349,360,371,381/\n\nc    * EICHE-O\n\n      data (Volk(5,I,3),i=1,30)/\n     *157,164,173,180,188,196,202,212,219,227,\n     *235,243,252,260,269,277,285,294,302,311,\n     *319,331,343,355,367,379,391,403,415,427/\n\nc    * ESCHE-U\n\n      data (Volk(6,I,1),i=1,30)/\n     *26, 34, 42, 50, 58, 67, 75, 83, 91, 99,\n     *107,117,126,136,145,155,164,174,183,193,\n     *202,213,223,234,244,255,266,276,287,297/\n\nc    *Esche-M\n\n      data (Volk(6,I,2),i=1,30)/\n     * 29, 38, 47, 57, 66, 75, 84, 93,103,112,\n     *121,132,143,153,164,175,186,197,207,218,\n     *229,241,253,265,277,290,302,314,326,338/\n\nc    * ESCHE-O\n\n      data (Volk(6,I,3),i=1,30)/\n     *33, 43, 54, 64, 74, 85, 95,105,115,126,\n     *136,148,160,172,184,197,209,221,233,245,\n     *257,271,284,298,311,325,338,352,365,379/\n\n\nc.....Massentafel?quivalente d07-Werte..................................\n\n\nc     Fichte............................................................\n\n      DATA (Md07(i),i=1,9) /580,576,557,522,473,457,456,411,416/\n      DATA (Md07(i),i=10,20) /720,671,656,628,595,581,605,592,572,\n     *561,544/\n      DATA (Md07(i),i=21,35) /604,753,745,716,707,689,663,672,687,\n     *673,652,653,646,633,625/\n      DATA (Md07(i),i=36,52) /425,820,779,769,761,747,724,728,738,\n     *722,714,709,699,692,681,673,669/\n      DATA (Md07(i),i=53,70) /855,814,788,782,770,764,753,771,755,\n     *745,737,733,731,724,713,710,704,695/\n      DATA (Md07(i),i=71,91) /885,820,797,794,783,790,781,793,777,\n     *773,764,757,752,748,740,734,730,723,717,712,706/\n      DATA (Md07(i),i=92,115) /901,827,808,803,806,811,801,809,801,\n     *794,783,779,770,764,759,754,747,741,737,732,726,721,714,708/\n      DATA (Md07(i),i=116,141) /894,833,814,808,811,816,814,819,810,\n     *803,796,790,785,781,773,770,764,759,751,748,742,735,730,725,\n     *720,714/\n      DATA (Md07(i),i=142,167) /903,836,817,813,815,818,815,827,817,\n     *815,806,803,796,789,784,778,774,769,763,759,754,747,743,737,\n     *732,726/\n      DATA (Md07(i),i=168,197) /903,838,826,818,817,829,824,834,823,\n     *818,814,809,804,800,792,788,784,778,773,769,764,758,754,748,\n     *743,739,733,728,723,718/\n      DATA (Md07(i),i=198,230) /905,848,826,820,822,830,825,838,832,\n     *826,820,815,812,806,802,797,791,786,783,778,774,768,764,758,\n     *753,749,744,739,734,730,726,721,715/\n      DATA (Md07(i),i=231,265) /912,862,836,832,831,830,831,841,835,\n     *828,826,822,818,813,809,804,800,795,791,786,782,777,773,768,\n     *764,759,755,750,746,741,737,732,727,723,719/\n      DATA (Md07(i),i=266,301) /870,845,828,831,831,831,844,837,834,\n     *831,826,823,818,814,811,805,801,797,793,789,784,781,777,772,\n     *768,763,759,755,750,747,743,738,734,730,726,721/\n      DATA (Md07(i),i=302,338) /846,831,833,832,832,846,843,838,834,\n     *832,828,824,819,815,812,808,803,800,796,791,788,784,780,776,\n     *772,768,764,760,756,752,748,745,740,737,733,729,725/\n      DATA (Md07(i),i=339,378) /834,831,834,833,849,844,839,837,834,\n     *832,827,823,820,817,813,810,806,802,799,794,791,787,783,780,\n     *776,772,769,765,761,758,754,750,746,742,739,735,732,728,725,\n     *721/\n      DATA (Md07(i),i=379,421) /833,831,831,851,846,843,841,839,835,\n     *832,828,824,821,818,815,811,808,805,801,797,794,790,787,784,\n     *780,776,773,769,766,762,759,755,752,749,745,742,738,735,732,\n     *728,725,721,718/\n      DATA (Md07(i),i=422,468) /834,827,831,852,850,847,843,840,839,\n     *835,833,829,826,823,819,817,813,810,807,803,800,797,793,790,\n     *787,784,780,777,774,771,767,764,760,757,754,751,748,744,741,\n     *738,735,732,729,726,723,719,716/\n      DATA (Md07(i),i=469,526) /825,835,854,851,848,846,844,842,838,\n     *836,833,830,826,823,821,818,815,812,809,805,803,800,796,793,\n     *790,787,784,781,778,775,771,769,766,763,759,756,754,750,747,\n     *744,742,739,736,733,730,727,724,721,718,715,713,710,707,704,\n     *701,699,696,693/\n      DATA (Md07(i),i=527,612) /839,858,852,851,848,846,844,842,839,\n     *836,833,831,828,825,823,819,816,814,811,808,805,802,799,796,\n     *794,790,788,785,782,779,776,773,770,767,765,762,759,756,753,\n     *751,748,745,742,739,737,734,731,729,726,723,721,718,715,713,\n     *710,708,705,702,700,697,695,692,690,687,685,682,680,677,675,\n     *672,670,667,665,662,660,658,655,653,650,648,646,643,641,639,\n     *636,634/\n      DATA (Md07(i),i=613,698) /859,855,853,850,849,847,844,842,840,\n     *837,834,832,829,827,824,821,818,816,813,810,807,805,802,799,\n     *796,794,791,788,786,783,780,777,775,772,769,767,764,761,759,\n     *756,753,751,748,746,743,741,738,736,733,730,728,726,723,721,\n     *718,716,713,711,708,706,704,701,699,697,694,692,690,687,685,\n     *683,680,678,676,673,671,669,667,664,662,660,658,655,653,651,\n     *649,646/\n      DATA (Md07(i),i=699,783) /856,854,853,851,849,847,845,843,841,\n     *838,836,833,830,828,825,823,820,818,815,812,810,807,805,802,\n     *799,797,794,792,789,786,784,781,779,776,774,771,769,766,764,\n     *761,759,757,754,752,749,747,744,742,740,737,735,733,730,728,\n     *726,723,721,719,716,714,712,710,707,705,703,701,699,696,694,\n     *692,690,688,686,683,681,679,677,675,673,671,669,666,664,662,\n     *660/\n      DATA (Md07(i),i=784,867) /856,855,854,852,850,848,846,843,842,\n     *839,836,834,831,830,827,824,822,819,817,815,812,810,807,805,\n     *802,800,797,795,793,790,788,785,783,780,778,776,773,771,769,\n     *766,764,762,759,757,755,753,750,748,746,744,741,739,737,735,\n     *733,730,728,726,724,722,720,718,716,713,711,709,707,705,703,\n     *701,699,697,695,693,691,689,687,685,683,681,679,677,675,673/\n      DATA (Md07(i),i=868,950) /857,855,854,852,850,849,846,844,842,\n     *840,838,835,833,831,828,826,824,821,819,817,814,812,810,807,\n     *805,803,801,798,796,793,791,789,787,784,782,780,778,775,773,\n     *771,769,767,765,762,760,758,756,754,752,750,747,745,743,741,\n     *739,737,735,733,731,729,727,725,723,721,719,717,715,713,711,\n     *709,707,705,703,702,700,698,696,694,692,690,688,686,685/\n      DATA (Md07(i),i=951,1032) /857,856,855,853,851,849,847,845,843,\n     *841,839,837,834,832,830,828,826,823,821,819,817,814,812,810,\n     *808,806,803,801,799,797,795,792,790,788,786,784,782,780,778,\n     *775,773,771,769,767,765,763,761,759,757,755,753,751,749,747,\n     *745,743,741,740,738,736,734,732,730,728,726,724,723,721,719,\n     *717,715,713,711,710,708,706,704,702,701,699,697,695/\n      DATA (Md07(i),i=1033,1113) /858,857,855,854,852,850,848,846,\n     *844,842,840,838,836,834,832,829,827,825,823,821,819,817,814,\n     *813,810,808,806,804,802,800,798,796,794,792,790,788,786,784,\n     *782,780,778,776,774,772,770,768,766,764,762,760,759,757,755,\n     *753,751,749,747,746,744,742,740,738,737,735,733,731,729,728,\n     *726,724,722,721,719,717,716,714,712,710,709,707,705/\n      DATA (Md07(i),i=1114,1193) /859,857,856,855,853,851,849,847,\n     *845,843,841,839,837,835,833,831,829,827,825,823,821,819,817,\n     *815,813,811,809,807,805,803,801,799,797,795,793,791,789,787,\n     *786,784,782,780,778,776,774,773,771,769,767,765,764,762,760,\n     *758,756,755,753,751,750,748,746,744,743,741,739,738,736,734,\n     *733,731,729,728,726,724,723,721,719,718,716,715/\n      DATA (Md07(i),i=1194,1272) /860,859,857,856,854,852,850,849,\n     *846,844,843,841,839,837,835,833,831,829,827,825,823,821,819,\n     *817,815,814,812,810,808,806,804,802,800,798,797,795,793,791,\n     *789,787,786,784,782,780,779,777,775,773,772,770,768,767,765,\n     *763,762,760,758,757,755,753,752,750,748,747,745,744,742,740,\n     *739,737,736,734,733,731,729,728,726,725,723/\n      DATA (Md07(i),i=1273,1350) /861,859,858,856,855,853,851,850,\n     *848,846,844,842,840,838,836,835,833,831,829,827,825,823,821,\n     *820,818,816,814,812,811,809,807,805,803,802,800,798,796,795,\n     *793,791,789,788,786,784,783,781,779,778,776,774,773,771,770,\n     *768,766,765,763,762,760,758,757,755,754,752,751,749,748,746,\n     *745,743,742,740,739,737,736,734,733,731/\n      DATA (Md07(i),i=1351,1427) /862,861,859,858,856,854,852,851,\n     *849,847,845,843,842,840,838,836,834,833,831,829,827,825,824,\n     *822,820,818,817,815,813,811,810,808,806,805,803,801,800,798,\n     *796,795,793,791,790,788,787,785,783,782,780,779,777,776,774,\n     *772,771,769,768,766,765,763,762,760,759,757,756,754,753,752,\n     *750,749,747,746,744,743,742,740,739/\n      DATA (Md07(i),i=1428,1502) /862,860,859,857,855,854,852,850,\n     *848,847,845,843,841,840,838,836,834,833,831,829,828,826,824,\n     *822,821,819,817,816,814,812,811,809,807,806,804,803,801,799,\n     *798,796,795,793,792,790,789,787,786,784,783,781,780,778,777,\n     *775,774,772,771,769,768,766,765,764,762,761,759,758,757,755,\n     *754,753,751,750,748,747,746/\n      DATA (Md07(i),i=1503,1576) /863,862,860,858,856,855,853,851,\n     *850,848,846,845,843,841,840,838,836,835,833,831,830,828,826,\n     *825,823,821,820,818,817,815,813,812,810,809,807,806,804,803,\n     *801,800,798,797,795,794,792,791,789,788,786,785,783,782,781,\n     *779,778,776,775,774,772,771,770,768,767,766,764,763,762,760,\n     *759,758,756,755,754,752/\n      DATA (Md07(i),i=1577,1648) /862,861,859,858,856,854,853,851,\n     *850,848,846,845,843,841,840,838,836,835,833,832,830,828,827,\n     *825,824,822,821,819,818,816,815,813,812,810,809,807,806,804,\n     *803,801,800,798,797,796,794,793,791,790,789,787,786,785,783,\n     *782,780,779,778,776,775,774,773,771,770,769,767,766,765,764,\n     *762,761,760,759/\n      DATA (Md07(i),i=1649,1718) /862,861,859,858,856,854,853,851,\n     *849,848,846,845,843,842,840,838,837,835,834,832,831,829,828,\n     *826,825,823,822,820,819,817,816,814,813,811,810,809,807,806,\n     *804,803,802,800,799,798,796,795,794,792,791,790,788,787,786,\n     *784,783,782,780,779,778,777,775,774,773,772,770,769,768,767,\n     *766,764/\n      DATA (Md07(i),i=1719,1785) /860,859,857,856,854,853,851,850,\n     *848,846,845,843,842,840,839,837,836,834,833,831,830,828,827,\n     *826,824,823,821,820,818,817,816,814,813,811,810,809,807,806,\n     *805,803,802,801,799,798,797,796,794,793,792,790,789,788,787,\n     *786,784,783,782,781,779,778,777,776,775,773,772,771,770/\n      DATA (Md07(i),i=1786,1851) /862,860,859,857,856,854,853,851,\n     *850,848,847,845,844,842,841,839,838,837,835,834,832,831,829,\n     *828,827,825,824,822,821,820,818,817,816,814,813,812,810,809,\n     *808,806,805,804,803,801,800,799,798,796,795,794,793,792,790,\n     *789,788,787,786,784,783,782,781,780,779,778,776,775/\n      DATA (Md07(i),i=1852,1913) /859,858,856,854,853,852,850,849,\n     *847,846,844,843,841,840,839,837,836,834,833,832,830,829,828,\n     *826,825,824,822,821,820,818,817,816,815,813,812,811,810,808,\n     *807,806,805,803,802,801,800,799,797,796,795,794,793,792,790,\n     *789,788,787,786,785,784,783,781,780/\n      DATA (Md07(i),i=1914,1972) /858,856,855,853,852,851,849,848,\n     *846,845,844,842,841,839,838,837,835,834,833,831,830,829,827,\n     *826,825,824,822,821,820,819,817,816,815,814,812,811,810,809,\n     *808,806,805,804,803,802,801,800,798,797,796,795,794,793,792,\n     *791,790,788,787,786,785/\n      DATA (Md07(i),i=1973,2026) /854,852,851,850,848,847,846,844,\n     *843,842,840,839,838,836,835,834,833,831,830,829,827,826,825,\n     *824,823,821,820,819,818,817,815,814,813,812,811,810,808,807,\n     *806,805,804,803,802,801,800,798,797,796,795,794,793,792,791,\n     *790/\n      DATA (Md07(i),i=2027,2073) /848,846,845,844,843,841,840,839,\n     *837,836,835,834,832,831,830,829,828,826,825,824,823,822,821,\n     *819,818,817,816,815,814,813,811,810,809,808,807,806,805,804,\n     *803,802,801,800,799,801,796,795,794/\n\nc.....Startadresse f?r H?henstufen 5 - 45 m:......................\n\n      DATA (Add07( 1,i,1),i=5,45) /0,0,1,10,21,36,53,71,92,116,142,\n     *168,198,231,266,302,339,379,422,469,527,613,699,784,868,951,\n     *1033,1114,1194,1273,1351,1428,1503,1577,1649,1719,1786,1852,\n     *1914,1973,2027/\n\nc.....Unterer Durchmesser einer H?henstufe:.......................\n\n      DATA (Add07( 1,i,2),i=5,45) /0,0,9,9,7,7,8,8,8,8,8,8,8,8,9,10,\n     *11,12,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,29,31,34,\n     *35,39,42,47,54/\n\nc.....Oberer  Durchmesser einer H?henstufe:.......................\n\n      DATA (Add07( 1,i,3),i=5,45) /0,0,17,19,21,23,25,28,31,33,33,\n     *37,40,42,44,46,50,54,58,70,99,100,100,100,100,100,100,100,100,\n     *100,100,100,100,100,100,100,100,100,100,100,100/\n\nc     Tanne..................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=2074,2084) /634,511,470,430,400,400,400,400,\n     *400,400,400/\n      DATA (Md07(i),i=2085,2098) /919,794,707,633,586,544,520,492,\n     *479,458,451,437,417,406/\n      DATA (Md07(i),i=2099,2114) /934,840,771,737,702,681,657,630,\n     *615,609,596,590,581,575,574,569/\n      DATA (Md07(i),i=2115,2132) /937,865,826,796,765,746,725,712,\n     *705,693,686,683,677,672,664,660,652,652/\n      DATA (Md07(i),i=2133,2152) /944,881,846,819,791,788,767,764,\n     *763,747,743,735,730,727,721,716,713,708,704,701/\n      DATA (Md07(i),i=2153,2174) /942,893,845,835,822,814,805,808,\n     *794,790,782,776,772,764,763,758,754,749,744,740,738,733/\n      DATA (Md07(i),i=2175,2197) /935,888,858,833,829,825,830,829,\n     *822,815,809,799,796,794,788,784,780,777,772,770,766,763,758/\n      DATA (Md07(i),i=2198,2222) /938,894,867,852,848,840,842,846,\n     *836,832,824,820,814,812,807,803,798,795,792,789,785,783,779,\n     *776,772/\n      DATA (Md07(i),i=2223,2249) /940,898,862,856,850,848,851,858,\n     *851,845,839,833,830,825,821,816,815,811,807,804,801,796,794,\n     *791,787,784,781/\n      DATA (Md07(i),i=2250,2279) /938,901,875,860,852,850,856,865,\n     *857,854,850,845,840,836,832,828,826,821,817,814,812,808,805,\n     *802,799,796,793,791,787,785/\n      DATA (Md07(i),i=2280,2312) /947,916,883,869,860,857,860,867,\n     *863,861,855,852,848,844,840,836,832,830,826,823,819,817,814,\n     *811,808,806,803,800,797,795,792,789,786/\n      DATA (Md07(i),i=2313,2348) /923,900,882,871,866,867,871,869,\n     *863,859,857,851,848,844,841,839,835,833,830,827,824,821,818,\n     *815,813,810,808,805,803,800,797,795,793,790,788,786/\n      DATA (Md07(i),i=2349,2386) /900,879,874,867,871,874,871,867,\n     *862,858,856,851,848,845,843,841,836,834,832,829,827,824,821,\n     *819,816,814,811,809,807,804,802,800,798,795,793,791,788,786/\n      DATA (Md07(i),i=2387,2427) /900,884,872,869,872,873,869,867,\n     *864,861,858,853,851,848,846,842,840,838,835,833,831,828,826,\n     *824,821,819,817,814,813,810,808,806,804,801,799,797,795,793,\n     *791,789,787/\n      DATA (Md07(i),i=2428,2478) /884,877,869,870,871,870,867,865,\n     *862,859,855,853,850,847,845,843,841,839,836,834,832,829,827,\n     *825,823,821,819,817,815,813,810,809,807,805,803,801,799,797,\n     *795,794,792,790,788,786,785,783,781,779,778,776,774/\n      DATA (Md07(i),i=2479,2537) /878,872,873,873,870,867,866,862,\n     *860,857,853,851,849,846,845,842,840,838,836,834,832,830,828,\n     *826,824,822,820,818,816,815,813,811,809,808,806,804,802,801,\n     *799,797,796,794,792,791,789,787,786,784,783,781,780,778,777,\n     *775,774,772,771,769,768/\n      DATA (Md07(i),i=2538,2613) /875,872,870,867,866,864,861,860,\n     *856,853,851,850,847,845,843,841,839,837,836,833,832,830,828,\n     *827,825,823,821,820,818,816,814,813,811,810,808,806,805,804,\n     *802,801,799,798,796,795,793,792,790,789,787,786,785,783,782,\n     *781,779,778,777,775,774,773,772,770,769,768,766,765,764,763,\n     *761,760,759,758,756,755,754,753/\n      DATA (Md07(i),i=2614,2720) /869,867,865,865,863,861,859,855,\n     *853,851,849,847,845,843,842,840,838,837,835,833,831,830,828,\n     *827,825,823,822,821,819,817,816,814,813,812,810,809,807,806,\n     *805,803,802,801,799,798,797,796,794,793,792,790,789,788,787,\n     *786,784,783,782,781,780,779,777,776,775,774,773,772,771,770,\n     *768,767,766,765,764,763,762,761,760,759,758,757,755,754,753,\n     *752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,\n     *736,735,734,733,732,731,730,729,728/\n      DATA (Md07(i),i=2721,2826) /865,864,864,861,860,857,855,852,\n     *850,849,847,845,844,842,840,839,837,835,834,832,831,829,828,\n     *827,825,824,822,821,820,818,817,816,814,813,812,811,809,808,\n     *807,806,804,803,802,801,800,799,798,796,795,794,793,792,791,\n     *790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,\n     *775,774,773,772,771,770,769,768,767,766,765,765,764,763,762,\n     *761,760,759,758,757,756,755,754,753,753,752,751,750,749,748,\n     *747,746,745,744,743,742,742,741/\n      DATA (Md07(i),i=2827,2931) /861,861,859,857,856,854,851,850,\n     *848,846,845,843,841,840,838,837,836,834,833,831,830,829,827,\n     *826,825,824,823,821,820,819,818,816,816,814,813,812,811,810,\n     *809,808,807,806,805,804,803,802,801,800,799,798,797,796,795,\n     *794,793,792,791,790,789,789,788,787,786,785,784,783,783,782,\n     *781,780,779,778,778,777,776,775,774,774,773,772,771,770,770,\n     *769,768,767,766,766,765,764,763,762,762,761,760,759,759,758,\n     *757,756,755,755,754,753,752/\n      DATA (Md07(i),i=2932,3034) /857,855,854,852,849,847,846,845,\n     *843,842,840,839,838,837,835,834,833,831,831,829,828,827,826,\n     *825,824,822,821,820,819,818,817,816,815,814,813,812,811,810,\n     *809,808,808,807,806,805,804,803,802,802,801,800,799,798,797,\n     *797,796,795,794,794,793,792,791,791,790,789,788,788,787,786,\n     *786,785,784,783,783,782,781,781,780,779,779,778,777,777,776,\n     *775,775,774,773,773,772,771,771,770,769,769,768,767,767,766,\n     *765,765,764,763,763/\n      DATA (Md07(i),i=3035,3136) /853,851,849,847,846,845,843,842,\n     *840,839,838,837,836,835,833,832,832,830,829,828,827,826,825,\n     *824,823,822,821,820,819,819,818,817,816,815,814,813,812,812,\n     *811,810,809,809,808,807,806,806,805,804,803,803,802,801,801,\n     *800,799,799,798,797,797,796,795,795,794,794,793,792,792,791,\n     *791,790,789,789,788,788,787,787,786,785,785,784,784,783,783,\n     *782,781,781,780,780,779,779,778,778,777,777,776,775,775,774,\n     *774,770,773,772/\n      DATA (Md07(i),i=3137,3237) /850,847,845,843,843,841,840,839,\n     *838,837,836,835,834,833,832,831,830,829,828,827,826,825,824,\n     *823,823,822,821,820,819,819,818,817,816,815,815,814,813,813,\n     *812,811,811,810,809,809,808,807,807,806,806,805,804,804,803,\n     *803,802,802,801,801,800,799,799,798,798,797,797,796,796,795,\n     *795,795,794,794,793,793,792,792,791,791,790,790,790,789,789,\n     *788,788,787,787,786,786,786,785,785,784,784,783,783,783,782,\n     *782,781,781/\n      DATA (Md07(i),i=3238,3336) /842,841,840,839,838,837,836,835,\n     *834,833,833,832,831,830,829,828,827,827,826,825,824,823,823,\n     *822,821,821,820,819,818,818,817,816,816,815,815,814,813,813,\n     *812,812,811,811,810,810,809,809,808,808,807,807,806,806,805,\n     *805,804,804,803,803,803,802,802,801,801,801,800,800,799,799,\n     *799,798,798,798,797,797,796,796,796,795,795,795,794,794,794,\n     *793,793,793,792,792,792,791,791,791,790,790,790,789,789,789,\n     *788/\n      DATA (Md07(i),i=3337,3433) /838,837,836,835,834,833,833,832,\n     *831,830,829,829,828,827,826,826,825,824,824,823,822,822,821,\n     *820,820,819,819,818,817,817,816,816,815,815,814,814,813,813,\n     *813,812,812,811,811,810,810,810,809,809,808,808,808,807,807,\n     *807,806,806,806,805,805,805,804,804,804,803,803,803,803,802,\n     *802,802,802,801,801,801,800,800,800,800,799,799,799,799,798,\n     *798,798,798,798,797,797,797,797,796,796,796,796,795,795/\n      DATA (Md07(i),i=3434,3528) /833,833,832,831,830,830,829,829,\n     *828,827,826,826,825,825,824,823,823,822,822,821,821,820,819,\n     *819,819,818,818,817,817,816,816,815,815,815,814,814,813,813,\n     *813,812,812,812,811,811,811,811,810,810,810,809,809,809,809,\n     *808,808,808,808,807,807,807,807,807,806,806,806,806,806,805,\n     *805,805,805,805,804,804,804,804,804,804,803,803,803,803,803,\n     *803,803,802,802,802,802,802,802,802,801,801,801/\n      DATA (Md07(i),i=3529,3621) /830,829,829,828,827,826,826,825,\n     *825,824,824,823,823,822,822,821,821,820,820,819,819,819,818,\n     *818,817,817,817,816,816,816,815,815,815,814,814,814,813,813,\n     *813,813,812,812,812,812,812,811,811,811,811,811,810,810,810,\n     *810,810,810,809,809,809,809,809,809,809,809,808,808,808,808,\n     *808,808,808,808,808,808,807,807,807,807,807,807,807,807,807,\n     *807,807,807,807,807,806,806,806,806,806/\n      DATA (Md07(i),i=3622,3711) /826,825,824,824,823,823,823,822,\n     *822,821,821,820,820,820,819,819,818,818,818,817,817,817,816,\n     *816,816,816,815,815,815,815,814,814,814,814,814,813,813,813,\n     *813,813,813,812,812,812,812,812,812,812,812,812,811,811,811,\n     *811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,\n     *811,811,811,811,811,811,811,811,811,811,811,811,811,811,811,\n     *811,811,811,811,811,811,811/\n      DATA (Md07(i),i=3712,3800) /823,822,822,821,821,821,820,820,\n     *819,819,819,818,818,818,817,817,817,817,816,816,816,816,815,\n     *815,815,815,815,814,814,814,814,814,814,814,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,812,813,812,812,812,\n     *812,812,812,812,813,813,813,813,813,813,813,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,814,814,814,814,814,\n     *814,814,814,814,814,814/\n      DATA (Md07(i),i=3801,3886) /819,819,818,818,818,818,817,817,\n     *817,816,816,816,816,815,815,815,815,815,814,814,814,814,814,\n     *814,814,814,814,813,813,813,813,813,813,813,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,813,813,813,813,814,\n     *814,814,814,814,814,814,814,814,814,814,814,815,815,815,815,\n     *815,815,815,815,816,816,816,816,816,816,816,817,817,817,817,\n     *817,817,817/\n      DATA (Md07(i),i=3887,3970) /816,816,816,815,815,815,815,815,\n     *814,814,814,814,814,814,813,813,813,813,813,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,813,813,813,813,813,\n     *813,813,813,813,813,813,813,814,814,814,814,814,814,814,814,\n     *814,815,815,815,815,815,815,816,816,816,816,816,816,817,817,\n     *817,817,817,817,818,818,818,818,818,819,819,819,819,819,820,\n     *820/\n      DATA (Md07(i),i=3971,4051) /813,813,813,813,813,812,812,812,\n     *812,812,812,812,812,812,812,812,812,812,812,812,812,812,812,\n     *812,812,812,812,812,812,812,812,812,812,812,812,813,813,813,\n     *813,813,813,813,813,814,814,814,814,814,814,815,815,815,815,\n     *815,816,816,816,816,816,817,817,817,817,818,818,818,818,819,\n     *819,819,819,820,820,820,820,821,821,821,821,822,822/\n      DATA (Md07(i),i=4052,4128) /810,810,810,810,810,810,810,810,\n     *810,810,810,810,810,810,810,810,810,810,810,810,810,810,811,\n     *811,811,811,811,811,811,811,812,812,812,812,812,813,813,813,\n     *813,813,813,814,814,814,814,815,815,815,815,816,816,816,816,\n     *817,817,817,817,818,818,818,818,819,819,819,820,820,820,820,\n     *821,821,821,822,822,822,823,823,823/\n      DATA (Md07(i),i=4129,4201) /808,808,808,808,808,808,808,808,\n     *808,808,808,808,808,809,809,809,809,809,809,809,809,810,810,\n     *810,810,810,811,811,811,811,811,812,812,812,812,813,813,813,\n     *813,814,814,814,814,815,815,815,816,816,816,817,817,817,817,\n     *818,818,818,819,819,819,820,820,820,821,821,821,822,822,822,\n     *823,823,823,824,824/\n      DATA (Md07(i),i=4202,4267) /806,806,806,806,806,807,807,807,\n     *807,807,807,808,808,808,808,808,809,809,809,809,809,810,810,\n     *810,810,811,811,811,812,812,812,813,813,813,813,814,814,814,\n     *815,815,815,816,816,816,817,817,817,818,818,819,819,819,820,\n     *820,820,821,821,822,822,822,823,823,824,824,824,825/\n      DATA (Md07(i),i=4268,4325) /805,805,805,806,806,806,806,807,\n     *807,807,807,808,808,808,809,809,809,809,810,810,810,811,811,\n     *811,812,812,812,813,813,814,814,814,815,815,815,816,816,817,\n     *817,817,818,818,819,819,819,820,820,821,821,821,822,822,823,\n     *823,824,824,824,825/\n      DATA (Md07(i),i=4326,4371) /806,807,807,807,807,808,808,809,\n     *809,809,810,810,810,811,811,812,812,812,813,813,814,814,814,\n     *815,815,816,816,816,817,817,818,818,819,819,820,820,820,821,\n     *821,822,822,823,823,824,824,825/\n      DATA (Md07(i),i=4372,4403) /810,810,810,811,811,812,812,813,\n     *813,813,814,814,815,815,816,816,817,817,818,818,819,819,820,\n     *820,821,821,821,822,822,823,823,824/\n      DATA (Md07(i),i=4404,4420) /815,815,816,816,817,817,818,818,\n     *819,819,820,820,821,821,822,823,823/\n\n      DATA (Add07( 2,i,1),i=5,45) /0,0,2074,2085,2099,2115,2133,2153,\n     *2175,2198,2223,2250,2280,2313,2349,2387,2428,2479,2538,2614,\n     *2721,2827,2932,3035,3137,3238,3337,3434,3529,3622,3712,3801,\n     *3887,3971,4052,4129,4202,4268,4326,4372,4404/\n\n      DATA (Add07( 2,i,2),i=5,45) /0,0,9,8,8,8,8,8,8,8,8,8,8,9,10,\n     *10,11,12,13,14,15,16,18,19,20,22,24,26,28,31,32,35,37,40,44,\n     *48,55,63,75,89,104/\n\n      DATA (Add07( 2,i,3),i=5,45) /0,0,19,21,23,25,27,29,30,32,34,\n     *37,40,44,47,50,61,70,88,120,120,120,120,120,120,120,120,120,\n     *120,120,120,120,120,120,120,120,120,120,120,120,120/\n\nc     Douglasie..............................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=4421,4426) /451,487,480,446,401,400/\n      DATA (Md07(i),i=4427,4435) /638,632,602,597,580,557,528,513,\n     *494/\n      DATA (Md07(i),i=4436,4448) /772,736,694,663,650,648,642,625,\n     *605,596,581,574,563/\n      DATA (Md07(i),i=4449,4464) /544,758,727,704,695,680,676,662,\n     *660,651,639,632,621,614,604,599/\n      DATA (Md07(i),i=4465,4481) /804,762,745,723,713,708,698,696,\n     *688,675,667,664,656,645,638,633,631/\n      DATA (Md07(i),i=4482,4510) /828,797,775,755,733,731,723,720,\n     *711,698,691,685,683,677,668,662,661,662,664,653,651,644,641,\n     *635,632,628,623,621,619/\n      DATA (Md07(i),i=4511,4541) /848,815,798,776,756,755,747,743,\n     *734,721,712,706,701,694,689,681,683,681,677,675,670,665,660,\n     *655,654,651,648,642,641,636,628/\n      DATA (Md07(i),i=4542,4574) /861,834,811,794,775,764,758,753,\n     *744,737,728,720,714,706,704,698,697,694,692,688,682,680,676,\n     *668,667,662,657,654,652,645,643,644,642/\n      DATA (Md07(i),i=4575,4607) /881,846,827,809,791,779,772,767,\n     *758,750,740,732,725,720,716,712,710,708,704,698,694,690,685,\n     *680,675,671,669,666,662,659,653,655,651/\n      DATA (Md07(i),i=4608,4642) /899,865,838,811,796,785,779,773,\n     *764,757,751,742,738,731,726,724,722,719,713,709,705,700,695,\n     *690,685,680,676,673,669,670,665,664,662,661,658/\n      DATA (Md07(i),i=4643,4678) /874,848,825,807,792,784,778,770,\n     *767,760,754,748,741,737,734,731,728,724,721,716,710,706,700,\n     *696,691,687,686,685,681,680,679,678,673,675,674,673/\n      DATA (Md07(i),i=4679,4716) /888,856,827,810,797,789,784,780,\n     *775,768,761,755,750,748,743,741,737,734,729,725,719,714,709,\n     *706,701,698,697,695,694,690,691,692,688,689,688,687,687,687/\n      DATA (Md07(i),i=4717,4756) /901,863,837,816,801,795,793,787,\n     *783,775,771,767,761,757,751,748,745,742,738,733,728,723,718,\n     *715,711,708,707,705,703,700,698,698,697,698,696,697,688,696,\n     *698,699/\n      DATA (Md07(i),i=4757,4797) /871,844,825,810,803,801,795,790,\n     *786,780,775,770,765,761,758,754,750,747,742,737,732,727,724,\n     *720,717,716,713,711,708,706,705,705,706,705,704,704,706,705,\n     *706,707,706/\n      DATA (Md07(i),i=4798,4840) /879,851,834,818,811,808,802,797,\n     *791,788,782,779,773,769,766,762,758,753,749,744,739,735,732,\n     *729,726,723,721,718,716,714,713,711,710,709,708,708,709,707,\n     *707,710,709,708,708/\n      DATA (Md07(i),i=4841,4884) /859,840,826,818,814,808,803,799,\n     *795,789,786,782,777,773,768,764,760,756,752,747,743,739,736,\n     *733,731,728,726,724,721,720,718,716,716,716,714,713,714,713,\n     *712,713,713,713,712,712/\n      DATA (Md07(i),i=4885,4929) /847,833,825,821,814,807,804,801,\n     *797,792,788,784,780,776,772,767,763,759,755,751,747,743,740,\n     *738,735,733,731,728,726,725,723,721,720,719,718,716,717,716,\n     *715,715,715,716,715,714,715/\n      DATA (Md07(i),i=4930,4976) /852,840,831,826,819,815,811,807,\n     *802,798,796,791,787,783,778,773,770,766,762,758,754,750,747,\n     *744,741,739,737,734,732,730,728,727,725,723,723,721,722,720,\n     *720,720,719,719,718,719,719,719,719/\n      DATA (Md07(i),i=4977,5025) /836,831,826,821,816,813,809,806,\n     *802,798,794,790,784,779,775,771,768,764,760,757,753,750,747,\n     *745,743,740,738,736,734,732,730,729,727,726,727,724,723,723,\n     *723,723,722,723,723,723,723,722,722,723,722/\n      DATA (Md07(i),i=5026,5074) /832,827,821,817,813,811,807,803,\n     *799,795,790,785,781,777,773,770,766,763,759,756,753,751,748,\n     *746,744,742,740,738,735,734,732,731,730,729,728,728,728,726,\n     *727,728,728,727,727,728,727,728,728,729,728/\n      DATA (Md07(i),i=5075,5124) /832,827,822,819,816,812,808,804,\n     *799,795,791,787,783,779,775,772,768,765,762,759,756,754,752,\n     *750,747,745,743,740,739,737,736,735,734,734,733,733,734,734,\n     *735,734,735,735,735,734,735,735,736,736,737,737/\n      DATA (Md07(i),i=5125,5176) /827,824,820,816,813,808,804,800,\n     *796,792,788,785,781,777,774,771,768,765,762,759,757,755,752,\n     *750,747,745,743,742,741,740,739,739,738,738,739,739,739,740,\n     *740,741,741,742,743,743,742,742,743,742,743,743,743,744/\n      DATA (Md07(i),i=5177,5229) /828,824,821,817,813,808,804,800,\n     *797,793,790,786,782,779,776,773,770,767,764,762,759,757,755,\n     *753,750,749,747,746,745,744,744,743,743,744,744,744,744,745,\n     *745,746,747,747,746,746,747,747,747,748,748,748,748,749,750/\n      DATA (Md07(i),i=5230,5310) /832,829,825,821,817,813,809,805,\n     *801,797,794,791,787,784,781,778,775,772,769,767,764,761,759,\n     *757,755,754,752,751,750,749,749,748,748,748,748,748,748,749,\n     *749,750,751,751,751,752,752,752,752,753,753,754,754,754,754,\n     *755,755,756,757,757,758,758,759,759,760,761,761,762,762,763,\n     *763,764,764,765,765,765,766,766,767,767,768,768,769/\n      DATA (Md07(i),i=5311,5390) /834,829,825,821,817,813,809,806,\n     *802,799,796,792,789,786,783,780,777,774,771,769,766,764,762,\n     *760,759,757,756,755,754,753,753,753,752,752,752,752,753,753,\n     *754,754,755,756,756,756,757,757,757,758,758,759,760,761,761,\n     *762,762,763,764,764,765,764,765,765,766,766,767,767,767,767,\n     *768,768,769,769,770,770,770,771,771,772,772,773/\n      DATA (Md07(i),i=5391,5469) /834,829,825,821,818,814,811,807,\n     *804,800,797,794,791,787,784,781,778,775,773,771,769,767,765,\n     *764,762,761,759,758,758,757,757,756,756,756,756,757,757,758,\n     *758,759,760,760,761,761,761,762,762,763,763,764,764,765,766,\n     *766,767,767,768,768,768,769,769,769,770,770,771,771,772,772,\n     *773,773,773,773,774,774,775,775,775,776,776/\n      DATA (Md07(i),i=5470,5547) /833,829,826,822,818,815,811,808,\n     *805,801,798,795,792,789,785,783,780,778,776,774,772,770,768,\n     *767,765,764,763,762,761,761,760,760,760,760,760,761,761,762,\n     *763,763,764,764,765,765,766,766,767,767,767,768,769,769,770,\n     *770,771,771,772,772,773,773,774,774,775,775,776,776,777,777,\n     *778,778,778,778,778,779,779,780,780,781/\n      DATA (Md07(i),i=5548,5624) /833,830,826,823,820,816,812,809,\n     *805,802,799,796,792,790,787,784,782,780,778,776,774,772,771,\n     *769,768,767,766,765,765,764,764,764,764,764,765,765,766,766,\n     *767,767,768,768,769,769,770,770,771,772,773,773,774,775,775,\n     *776,776,777,777,777,778,779,779,780,780,780,781,782,782,783,\n     *783,784,784,784,785,785,786,786,787/\n      DATA (Md07(i),i=5625,5699) /830,827,824,820,817,813,810,806,\n     *803,800,797,794,791,789,786,784,782,780,778,777,775,773,772,\n     *771,770,769,768,768,767,767,767,768,768,768,769,770,770,771,\n     *771,772,772,773,773,774,774,775,776,776,777,777,778,779,779,\n     *780,780,781,781,782,782,783,783,784,784,784,785,785,786,786,\n     *787,787,788,788,788,789,789/\n      DATA (Md07(i),i=5700,5774) /835,831,828,824,821,818,814,811,\n     *807,804,801,798,795,793,790,788,786,784,782,780,779,777,776,\n     *774,773,773,772,771,771,771,771,771,771,772,772,772,773,774,\n     *774,775,775,776,776,777,777,778,778,779,780,780,781,781,782,\n     *782,783,783,784,784,785,785,786,786,787,787,788,788,788,789,\n     *789,790,790,791,791,791,792/\n      DATA (Md07(i),i=5775,5849) /841,837,833,829,826,822,819,815,\n     *812,808,805,802,800,797,794,792,790,788,786,784,782,781,779,\n     *778,777,776,775,775,774,774,774,774,774,775,775,775,776,776,\n     *777,777,778,778,779,779,780,780,781,781,782,783,783,784,784,\n     *785,785,786,786,787,787,788,788,788,789,789,790,790,791,791,\n     *792,792,792,793,793,794,794/\n      DATA (Md07(i),i=5850,5924) /846,843,838,834,831,827,823,820,\n     *816,813,810,806,804,801,798,796,794,792,789,787,786,784,783,\n     *781,782,779,779,778,778,777,777,777,777,778,778,778,779,779,\n     *779,780,780,781,781,781,782,783,783,784,784,785,785,786,786,\n     *787,787,788,788,789,789,790,790,791,791,792,792,792,793,793,\n     *794,794,795,795,795,796,796/\n      DATA (Md07(i),i=5925,5999) /851,846,843,839,836,832,828,824,\n     *821,817,814,811,808,805,803,800,797,795,793,791,789,787,786,\n     *784,783,782,782,781,781,780,780,780,780,780,781,781,781,782,\n     *782,782,782,783,783,784,784,785,785,786,786,787,787,788,788,\n     *789,789,790,790,791,791,792,792,793,793,794,794,794,795,795,\n     *796,796,797,797,797,798,798/\n      DATA (Md07(i),i=6000,6072) /848,843,840,836,833,829,826,822,\n     *819,816,813,810,807,804,801,798,796,794,792,790,789,787,786,\n     *785,785,784,784,783,783,783,783,783,783,783,784,784,784,784,\n     *785,785,785,786,786,786,787,788,788,789,789,790,790,791,791,\n     *792,792,793,793,794,794,795,795,795,796,796,797,797,798,798,\n     *798,799,799,800,800/\n      DATA (Md07(i),i=6073,6143) /845,841,838,834,831,827,824,820,\n     *817,814,811,808,805,802,799,797,795,793,792,790,789,788,788,\n     *787,787,786,786,786,786,786,786,786,786,786,786,786,787,787,\n     *787,788,788,788,789,789,790,790,791,791,792,792,793,793,794,\n     *794,795,795,796,796,797,797,798,798,798,799,799,800,800,800,\n     *801,801,802/\n      DATA (Md07(i),i=6144,6212) /845,841,837,833,829,826,822,819,\n     *815,812,808,805,802,800,798,796,795,793,792,791,790,790,789,\n     *789,789,789,789,788,788,788,788,788,788,789,789,789,790,790,\n     *790,790,790,791,791,792,792,793,793,794,794,795,795,796,796,\n     *797,797,798,798,799,799,800,800,800,801,801,802,802,802,803,\n     *803/\n      DATA (Md07(i),i=6213,6279) /843,838,835,831,828,824,820,816,\n     *812,809,806,804,801,800,798,797,795,794,793,793,792,792,792,\n     *791,791,791,791,791,791,791,791,791,791,791,792,792,792,793,\n     *793,793,793,793,794,794,795,795,796,796,797,797,798,798,799,\n     *799,800,800,800,801,801,802,802,803,803,803,804,804,805/\n      DATA (Md07(i),i=6280,6344) /840,835,831,827,824,819,816,812,\n     *811,807,805,803,801,800,798,797,796,795,795,795,794,794,794,\n     *794,794,793,793,793,793,793,794,794,794,794,795,795,796,796,\n     *797,797,797,798,797,798,798,798,798,799,799,800,800,800,801,\n     *801,802,802,803,803,803,804,804,805,805,806,806/\n      DATA (Md07(i),i=6345,6408) /838,834,829,826,822,819,815,814,\n     *812,809,807,805,803,801,800,799,798,797,797,797,796,796,796,\n     *796,796,796,796,796,796,796,796,796,797,797,798,798,798,798,\n     *798,799,799,800,800,801,801,802,802,802,802,802,802,803,802,\n     *803,803,804,804,805,805,805,806,806,807,807/\n\n      DATA (Add07( 3,i,1),i=5,45) /0,0,4421,4427,4436,4449,4465,4482,\n     *4511,4542,4575,4608,4643,4679,4717,4757,4798,4841,4885,4930,\n     *4977,5026,5075,5125,5177,5230,5311,5391,5470,5548,5625,5700,\n     *5775,5850,5925,6000,6073,6144,6213,6280,6345/\n\n      DATA (Add07( 3,i,2),i=5,45) /0,0,10,9,7,7,8,8,8,8,8,8,9,9,9,\n     *10,10,11,12,12,14,16,17,19,20,20,21,22,23,24,26,26,26,26,26,\n     *28,30,32,34,36,37/\n\n      DATA (Add07( 3,i,3),i=5,45) /0,0,15,17,19,22,24,36,38,40,40,\n     *42,44,46,48,50,52,54,56,58,62,64,66,70,72,100,100,100,100,100,\n     *100,100,100,100,100,100,100,100,100,100,100/\n\nc     Kiefer..................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=6409,6420) /660,620,580,540,500,460,420,400,\n     *400,400,400,400/\n      DATA (Md07(i),i=6421,6432) /571,530,490,450,410,400,400,400,\n     *400,400,400,400/\n      DATA (Md07(i),i=6433,6445) /465,794,620,541,495,476,467,453,\n     *444,432,429,420,430/\n      DATA (Md07(i),i=6446,6459) /853,711,648,590,561,550,536,531,\n     *524,532,535,540,539,549/\n      DATA (Md07(i),i=6460,6478) /882,761,703,657,624,613,599,595,\n     *597,595,604,606,617,622,627,634,640,647,654/\n      DATA (Md07(i),i=6479,6505) /899,800,731,692,675,658,646,641,\n     *641,646,651,658,664,671,672,679,685,691,697,703,708,714,716,\n     *721,726,731,735/\n      DATA (Md07(i),i=6506,6533) /910,826,765,725,704,688,677,673,\n     *672,674,684,686,690,697,700,708,715,721,726,730,735,739,743,\n     *746,752,755,760,762/\n      DATA (Md07(i),i=6534,6568) /925,843,785,743,723,709,702,696,\n     *694,700,701,707,713,717,722,728,731,737,742,746,751,757,759,\n     *764,768,771,775,777,780,784,787,789,792,795,797/\n      DATA (Md07(i),i=6569,6607) /857,794,764,737,724,711,705,710,\n     *709,714,718,725,731,733,740,744,749,751,757,761,763,767,771,\n     *776,779,783,786,789,791,795,798,800,803,805,807,810,812,814,\n     *816/\n      DATA (Md07(i),i=6608,6652) /863,807,780,755,736,729,720,717,\n     *719,723,729,734,738,741,746,750,756,760,764,767,771,774,777,\n     *781,784,787,790,793,795,797,801,804,806,808,811,813,814,817,\n     *819,820,822,824,826,827,829/\n      DATA (Md07(i),i=6653,6699) /819,785,769,752,738,724,726,728,\n     *730,734,738,743,747,750,755,758,762,766,770,774,777,780,783,\n     *786,789,792,794,797,799,802,804,806,808,810,812,815,817,819,\n     *820,822,824,825,827,829,830,831,833/\n      DATA (Md07(i),i=6700,6748) /829,789,769,749,737,728,730,731,\n     *735,739,741,745,750,754,758,762,765,768,772,776,778,781,784,\n     *787,789,792,795,798,800,802,804,806,808,810,812,813,815,817,\n     *818,820,821,824,825,827,828,829,830,832,833/\n      DATA (Md07(i),i=6749,6800) /837,797,773,756,735,733,733,734,\n     *737,740,743,749,752,756,760,763,766,770,772,776,779,782,784,\n     *786,789,791,794,796,798,800,802,804,806,808,810,811,813,815,\n     *816,818,819,820,822,823,824,826,827,828,829,831,832,833/\n      DATA (Md07(i),i=6801,6854) /797,773,757,744,735,736,736,739,\n     *743,746,750,752,757,759,763,766,770,773,775,778,781,783,786,\n     *788,790,792,795,796,798,801,802,804,806,807,809,810,812,813,\n     *815,816,818,819,820,821,822,823,824,826,826,827,828,829,830,\n     *831/\n      DATA (Md07(i),i=6855,6910) /780,763,749,739,736,739,741,744,\n     *746,751,755,757,761,764,767,769,772,775,778,780,783,784,787,\n     *789,791,793,795,797,798,800,802,803,805,806,808,809,811,812,\n     *813,814,815,817,818,819,820,821,822,823,824,825,825,826,827,\n     *828,829,829/\n      DATA (Md07(i),i=6911,6967) /761,749,740,740,739,743,746,749,\n     *751,755,758,761,763,767,769,772,775,777,780,782,784,786,788,\n     *790,792,793,795,797,799,800,801,803,804,806,807,808,809,811,\n     *812,813,814,815,816,816,818,818,819,820,821,822,822,823,824,\n     *825,825,826,827/\n      DATA (Md07(i),i=6968,7028) /759,744,741,743,744,746,749,752,\n     *755,759,761,764,767,770,772,774,776,779,781,783,785,787,789,\n     *790,792,794,795,797,798,800,801,802,803,804,806,807,808,809,\n     *810,811,812,813,814,815,815,816,817,818,818,819,820,820,821,\n     *822,822,823,823,824,825,825,826/\n      DATA (Md07(i),i=7029,7114) /745,742,744,744,748,750,753,756,\n     *759,762,764,767,770,772,774,777,779,781,783,785,786,788,790,\n     *791,793,794,796,797,798,799,800,802,803,804,805,806,807,808,\n     *809,809,810,811,812,813,813,814,815,815,816,817,817,818,818,\n     *819,820,820,821,821,822,822,822,823,823,824,824,825,825,825,\n     *826,826,826,827,827,827,828,828,828,828,829,829,829,830,830,\n     *830,830,831/\n      DATA (Md07(i),i=7115,7199) /744,745,746,749,751,755,757,761,\n     *763,765,768,770,772,775,777,779,781,782,784,786,788,789,791,\n     *792,793,794,796,797,798,799,800,801,802,803,804,805,806,807,\n     *808,808,809,810,811,811,812,812,813,814,814,815,815,816,816,\n     *817,817,818,818,819,819,819,820,820,821,821,821,821,822,822,\n     *822,823,823,823,824,824,824,824,825,825,825,825,825,826,826,\n     *826,826/\n      DATA (Md07(i),i=7200,7283) /748,748,751,754,756,759,762,764,\n     *766,769,771,773,775,777,779,781,783,784,786,787,789,790,792,\n     *793,794,795,796,797,799,799,800,801,802,803,804,805,806,806,\n     *807,808,808,809,809,810,811,811,812,812,813,813,814,814,815,\n     *815,815,816,816,816,817,817,817,818,818,818,819,819,819,819,\n     *820,820,820,820,821,821,821,821,821,822,822,822,822,822,822,\n     *823/\n      DATA (Md07(i),i=7284,7366) /751,754,756,757,760,763,766,768,\n     *770,772,774,776,778,780,782,783,785,786,788,789,790,792,793,\n     *794,795,796,797,798,799,800,801,802,802,803,804,805,805,806,\n     *806,807,808,808,809,809,810,810,811,811,812,812,812,813,813,\n     *813,814,814,814,815,815,815,816,816,816,816,817,817,817,817,\n     *817,818,818,818,818,818,818,819,819,819,819,819,819,819,819/\n      DATA (Md07(i),i=7367,7448) /754,757,760,763,765,767,769,771,\n     *773,775,778,779,781,783,784,785,787,788,790,791,792,793,794,\n     *795,796,797,798,799,800,801,801,802,803,804,804,805,805,806,\n     *806,807,807,808,808,809,809,810,810,811,811,811,811,812,812,\n     *812,813,813,813,814,814,814,814,814,815,815,815,815,815,815,\n     *816,816,816,816,816,816,816,816,817,817,817,817,817,817/\n      DATA (Md07(i),i=7449,7529) /760,762,764,767,769,771,773,775,\n     *777,779,781,782,784,785,787,788,789,791,792,793,794,795,796,\n     *797,798,799,799,800,801,802,802,803,804,804,805,805,806,806,\n     *807,807,808,808,808,809,809,810,810,810,810,811,811,811,812,\n     *812,812,812,812,813,813,813,813,813,813,814,814,814,814,814,\n     *814,814,814,814,815,815,815,815,815,815,815,815,815/\n      DATA (Md07(i),i=7530,7609) /764,767,769,771,774,775,777,779,\n     *781,782,784,786,787,788,789,791,792,793,794,795,796,797,798,\n     *799,799,800,801,802,802,803,803,804,805,805,806,806,807,807,\n     *807,808,808,808,809,809,809,810,810,810,810,811,811,811,811,\n     *812,812,812,812,812,812,812,813,813,813,813,813,813,813,813,\n     *813,813,813,813,813,814,814,814,814,814,814,814/\n      DATA (Md07(i),i=7610,7688) /769,772,774,776,778,780,781,783,\n     *784,786,787,789,790,791,793,793,795,796,797,797,798,799,800,\n     *801,801,802,803,803,804,804,805,805,806,806,807,807,808,808,\n     *808,809,809,809,809,810,810,810,810,811,811,811,811,811,811,\n     *812,812,812,812,812,812,812,812,812,813,813,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,813/\n      DATA (Md07(i),i=7689,7766) /775,777,779,780,782,784,785,787,\n     *788,790,791,792,793,794,795,796,798,798,799,800,801,801,802,\n     *803,803,804,805,805,806,806,807,807,807,808,808,809,809,809,\n     *809,810,810,810,810,811,811,811,811,811,811,812,812,812,812,\n     *812,812,812,812,812,812,812,812,813,813,813,813,813,813,813,\n     *813,813,813,812,812,812,812,812,812,812/\n      DATA (Md07(i),i=7767,7843) /780,781,783,785,786,788,789,791,\n     *792,793,794,795,796,798,799,799,800,801,802,803,803,804,804,\n     *805,806,806,807,807,808,808,808,809,809,810,810,810,810,811,\n     *811,811,811,811,812,812,812,812,812,812,812,813,813,813,813,\n     *813,813,813,813,813,813,813,813,813,813,813,813,813,813,813,\n     *813,813,813,813,812,812,812,812,812/\n      DATA (Md07(i),i=7844,7919) /785,786,788,789,791,792,793,795,\n     *796,797,798,799,800,801,802,803,803,804,805,805,806,807,807,\n     *808,808,809,809,809,810,810,810,811,811,811,812,812,812,812,\n     *813,813,813,813,813,813,813,813,814,814,814,814,814,814,814,\n     *814,814,814,814,814,814,814,814,814,814,814,814,813,813,813,\n     *813,813,813,813,813,813,813,813/\n      DATA (Md07(i),i=7920,7994) /789,790,792,793,795,796,797,798,\n     *799,801,801,803,803,804,805,806,806,807,808,808,809,809,810,\n     *810,811,811,811,812,812,812,813,813,813,813,814,814,814,814,\n     *814,814,815,815,815,815,815,815,815,815,815,815,815,815,815,\n     *815,815,815,815,815,815,815,815,815,815,815,814,814,814,814,\n     *814,814,814,814,813,813,813/\n      DATA (Md07(i),i=7995,8068) /794,795,796,798,799,800,801,802,\n     *803,804,805,806,807,808,808,809,810,810,811,811,812,812,813,\n     *813,813,814,814,814,815,815,815,815,815,816,816,816,816,816,\n     *816,816,817,817,817,817,817,817,817,817,817,817,817,817,817,\n     *817,816,816,816,816,816,816,816,816,816,816,816,815,815,815,\n     *815,815,815,815,814,814/\n      DATA (Md07(i),i=8069,8141) /799,800,801,802,803,804,806,806,\n     *807,808,809,810,810,811,812,812,813,813,814,814,815,815,815,\n     *816,816,816,817,817,817,817,818,818,818,818,818,818,818,818,\n     *819,819,819,819,819,819,819,819,819,819,819,819,818,818,818,\n     *818,818,818,818,818,818,818,817,817,817,817,817,817,817,816,\n     *816,816,816,816,816/\n      DATA (Md07(i),i=8142,8213) /803,805,806,807,808,809,810,810,\n     *811,812,813,813,814,815,815,816,816,817,817,818,818,818,819,\n     *819,819,819,820,820,820,820,820,820,820,821,821,821,821,821,\n     *821,821,821,821,821,821,821,821,821,821,821,820,820,820,820,\n     *820,820,820,820,820,819,819,819,819,819,819,818,818,818,818,\n     *818,818,817,817/\n      DATA (Md07(i),i=8214,8278) /814,814,815,816,817,817,818,818,\n     *819,819,820,820,820,821,821,821,822,822,822,822,822,823,823,\n     *823,823,823,823,823,823,823,823,823,823,823,823,823,823,823,\n     *823,823,823,823,823,823,822,822,822,822,822,822,822,821,821,\n     *821,821,821,821,820,820,820,820,820,819,819,819/\n      DATA (Md07(i),i=8279,8338) /820,821,822,822,822,823,823,823,\n     *824,824,824,825,825,825,825,825,826,826,826,826,826,826,826,\n     *826,826,826,826,826,826,826,826,826,826,826,825,825,825,825,\n     *825,825,825,825,824,824,824,824,824,824,823,823,823,823,823,\n     *822,822,822,822,821,821,821/\n      DATA (Md07(i),i=8339,8390) /827,827,827,828,828,828,828,828,\n     *829,829,829,829,829,829,829,829,829,829,829,829,829,829,828,\n     *828,828,828,828,828,828,828,828,827,827,827,827,827,827,826,\n     *826,826,826,826,825,825,825,825,824,824,824,824,823,823/\n      DATA (Md07(i),i=8391,8436) /831,832,832,832,832,832,832,832,\n     *832,832,832,832,832,832,832,832,831,831,831,831,831,831,831,\n     *830,830,830,830,830,830,829,829,829,829,829,828,828,828,828,\n     *827,827,827,827,826,826,826,826/\n      DATA (Md07(i),i=8437,8470) /835,835,835,835,834,834,834,834,\n     *834,834,834,833,833,833,833,833,832,832,832,832,832,831,831,\n     *831,831,830,830,830,830,829,829,829,828,828/\n      DATA (Md07(i),i=8471,8496) /837,837,837,836,836,836,836,836,\n     *835,835,835,835,834,834,834,834,833,833,833,833,832,832,832,\n     *831,831,831/\n      DATA (Md07(i),i=8497,8512) /838,838,838,837,837,837,836,836,\n     *836,836,835,835,835,834,834,834/\n\n      DATA (Add07( 4,i,1),i=5,45) /0,0,6409,6421,6433,6446,6460,6479,\n     *6506,6534,6569,6608,6653,6700,6749,6801,6855,6911,6968,7029,\n     *7115,7200,7284,7367,7449,7530,7610,7689,7767,7844,7920,7995,\n     *8069,8142,8214,8279,8339,8391,8437,8471,8497/\n\n      DATA (Add07( 4,i,2),i=5,45) /0,0,7,7,7,8,8,8,8,8,9,9,10,10,10,\n     *11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,36,\n     *41,49,55,67,75,85/\n\n      DATA (Add07( 4,i,3),i=5,45) /0,0,18,18,19,21,26,34,35,42,47,\n     *53,56,58,61,64,67,69,74,100,100,100,100,100,100,100,100,100,\n     *100,100,100,100,100,100,100,100,100,100,100,100,100/\n\nc     Weymouthskiefer.........................(?nderung 11.12.90 Kublin)\n\n      DATA (Md07(i),i=8513,8521) /809,760,730,710,690,670,650,630,\n     *610/\n      DATA (Md07(i),i=8522,8528) /620,572,553,522,509,493,491/\n      DATA (Md07(i),i=8529,8542) /465,794,730,695,701,704,694,673,\n     *647,617,580,545,508,474/\n      DATA (Md07(i),i=8543,8555) /881,818,775,764,748,744,731,708,\n     *696,664,643,629,601/\n      DATA (Md07(i),i=8556,8573) /943,868,810,800,787,768,757,743,\n     *731,724,712,704,692,683,671,656,645,632/\n      DATA (Md07(i),i=8574,8591) /990,921,854,826,812,797,788,772,\n     *770,760,754,746,738,726,717,707,694,683/\n      DATA (Md07(i),i=8592,8608) /941,884,841,832,817,808,792,796,\n     *785,783,776,766,757,751,744,733,721/\n      DATA (Md07(i),i=8609,8628) /878,864,838,828,812,807,802,798,\n     *794,782,773,765,755,746,740,736,731,731,729,729/\n      DATA (Md07(i),i=8629,8648) /916,888,870,849,838,825,818,808,\n     *798,790,783,777,769,765,759,756,753,749,745,740/\n      DATA (Md07(i),i=8649,8668) /948,915,893,870,853,843,825,818,\n     *807,798,790,785,785,781,777,772,768,762,756,750/\n      DATA (Md07(i),i=8669,8708) /986,956,918,898,878,861,847,829,\n     *817,810,806,804,802,796,791,786,779,773,768,763,760,757,755,\n     *754,752,751,749,749,749,750,752,753,753,752,751,749,747,750,\n     *752,753/\n      DATA (Md07(i),i=8709,8747) /981,939,909,887,870,855,841,834,\n     *827,825,821,817,811,803,795,789,782,774,769,764,762,760,757,\n     *754,754,753,753,755,751,751,756,754,752,755,751,753,754,754,\n     *754/\n      DATA (Md07(i),i=8748,8782) /883,871,861,851,845,841,834,826,\n     *817,808,799,793,787,780,775,771,768,765,762,759,758,759,759,\n     *758,757,755,758,761,757,758,758,758,757,756,759/\n      DATA (Md07(i),i=8783,8827) /905,895,885,875,864,855,843,834,\n     *824,816,807,801,794,788,783,777,773,769,767,764,764,764,762,\n     *766,763,759,761,761,761,761,760,762,760,758,759,760,760,759,\n     *759,761,762,763,764,764,764/\n      DATA (Md07(i),i=8828,8872) /931,917,904,890,879,867,854,840,\n     *828,818,812,805,799,794,789,784,780,777,773,771,770,767,770,\n     *766,767,768,767,767,765,767,765,766,763,763,763,762,761,763,\n     *764,764,765,765,765,766,765/\n      DATA (Md07(i),i=8873,8912) /873,860,849,838,829,820,813,807,\n     *802,796,792,788,784,781,779,775,777,778,772,772,771,769,771,\n     *769,770,770,770,769,768,766,765,765,766,766,766,767,766,768,\n     *766,766/\n      DATA (Md07(i),i=8913,8957) /886,873,861,849,840,831,824,817,\n     *810,804,800,796,793,789,785,780,780,779,778,776,778,775,776,\n     *776,775,774,773,771,772,770,770,770,769,768,769,770,768,768,\n     *768,768,769,768,769,769,769/\n      DATA (Md07(i),i=8958,9002) /898,884,872,860,849,841,832,826,\n     *818,813,807,802,799,796,791,790,788,786,784,785,781,781,780,\n     *779,778,776,777,774,774,773,773,774,772,773,773,773,772,772,\n     *771,771,772,772,772,771,771/\n      DATA (Md07(i),i=9003,9047) /911,896,882,870,860,851,842,835,\n     *827,821,816,811,810,803,801,799,796,793,789,789,788,787,785,\n     *783,783,780,780,779,778,777,778,778,778,778,777,776,775,775,\n     *775,775,775,774,775,774,774/\n      DATA (Md07(i),i=9048,9097) /921,905,892,880,869,860,852,846,\n     *838,832,827,820,818,815,811,808,803,799,798,797,795,792,789,\n     *786,786,785,784,782,783,783,783,782,781,780,781,779,779,779,\n     *778,779,778,778,778,778,777,778,779,779,779,779/\n      DATA (Md07(i),i=9098,9147) /930,913,899,886,877,868,861,853,\n     *846,839,837,828,825,821,816,812,807,805,803,801,798,798,794,\n     *793,792,790,788,788,788,787,786,785,785,785,785,784,784,783,\n     *783,783,783,782,782,781,781,781,781,782,781,781/\n      DATA (Md07(i),i=9148,9187) /846,842,837,831,826,820,814,811,\n     *808,808,804,803,799,797,798,795,795,794,793,791,790,790,789,\n     *789,788,788,787,787,786,786,786,785,785,785,785,784,785,785,\n     *785,785/\n      DATA (Md07(i),i=9188,9227) /855,849,843,837,835,828,821,818,\n     *814,813,811,809,807,804,803,800,799,798,798,798,795,794,793,\n     *792,792,792,792,791,790,790,790,790,789,789,789,789,789,788,\n     *788,788/\n      DATA (Md07(i),i=9228,9267) /868,861,854,847,843,836,828,824,\n     *822,820,818,815,812,811,809,808,806,804,803,802,801,800,798,\n     *798,797,796,795,795,795,795,794,793,794,794,793,793,793,792,\n     *792,792/\n      DATA (Md07(i),i=9268,9292) /813,811,810,808,809,807,805,804,\n     *803,802,801,801,800,799,800,799,798,798,798,798,798,798,797,\n     *797,797/\n      DATA (Md07(i),i=9293,9317) /819,817,816,814,814,811,810,809,\n     *808,807,807,806,805,805,805,804,804,803,803,803,802,802,802,\n     *802,802/\n      DATA (Md07(i),i=9318,9342) /826,824,822,821,820,817,816,814,\n     *814,813,812,812,811,811,810,809,809,809,808,808,807,807,806,\n     *806,806/\n      DATA (Md07(i),i=9343,9357) /818,817,817,816,816,815,815,814,\n     *813,813,812,812,812,811,811/\n      DATA (Md07(i),i=9358,9372) /823,822,822,822,821,820,820,819,\n     *819,818,817,817,817,817,816/\n      DATA (Md07(i),i=9373,9387) /830,828,828,827,827,827,826,825,\n     *825,824,823,823,822,822,821/\n\n      DATA (Add07( 5,i,1),i=5,45) /0,0,8513,8522,8529,8543,8556,8574,\n     *8592,8609,8629,8649,8669,8709,8748,8783,8828,8873,8913,8958,\n     *9003,9048,9098,9148,9188,9228,9268,9293,9318,9343,9358,9373,\n     *0,0,0,0,0,0,0,0,0/\n\n      DATA (Add07( 5,i,2),i=5,45) /0,0,7,9,7,8,8,8,9,11,11,11,11,12,\n     *16,16,16,21,21,21,21,21,21,31,31,31,46,46,46,56,56,56,0,0,0,\n     *0,0,0,0,0,0/\n\n      DATA (Add07( 5,i,3),i=5,45) /0,0,15,15,20,20,25,25,25,30,30,\n     *30,50,50,50,60,60,60,65,65,65,70,70,70,70,70,70,70,70,70,70,\n     *70,0,0,0,0,0,0,0,0,0/\n\nc     L?rche..................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=9388,9400) /758,710,670,630,590,550,510,490,\n     *460,430,400,400,400/\n      DATA (Md07(i),i=9401,9414) /634,549,475,410,400,400,400,400,\n     *400,400,400,400,400,400/\n      DATA (Md07(i),i=9415,9432) /522,831,739,678,609,544,487,449,\n     *401,400,400,400,400,400,400,400,400,400/\n      DATA (Md07(i),i=9433,9452) /910,860,766,695,641,586,554,523,\n     *489,456,423,400,400,400,400,400,400,400,400,400/\n      DATA (Md07(i),i=9453,9472) /910,827,782,736,689,654,623,591,\n     *560,529,506,482,465,447,434,420,405,400,400,400/\n      DATA (Md07(i),i=9473,9494) /976,940,893,844,804,759,727,695,\n     *661,631,608,585,561,542,523,508,492,481,468,454,441,427/\n      DATA (Md07(i),i=9495,9517) /967,925,894,850,810,780,747,722,\n     *690,665,640,620,600,584,567,550,537,522,508,496,483,473,463/\n      DATA (Md07(i),i=9518,9540) /937,887,858,825,793,767,739,713,\n     *687,665,648,630,611,596,581,566,553,539,528,517,505,493,483/\n      DATA (Md07(i),i=9541,9564) /892,859,828,802,778,755,731,707,\n     *689,669,649,633,619,607,595,580,568,555,544,532,523,513,501,\n     *491/\n      DATA (Md07(i),i=9565,9590) /921,885,860,838,814,788,766,745,\n     *724,706,688,673,657,641,632,616,602,590,579,568,557,546,537,\n     *527,518,510/\n      DATA (Md07(i),i=9591,9617) /911,889,865,840,818,795,776,756,\n     *740,723,706,691,676,663,649,636,624,612,602,591,580,571,561,\n     *552,545,537,529/\n      DATA (Md07(i),i=9618,9646) /911,886,862,842,821,800,782,766,\n     *751,735,721,706,692,679,666,653,642,632,621,611,601,592,583,\n     *574,565,557,549,541,533/\n      DATA (Md07(i),i=9647,9676) /903,880,860,842,822,806,791,776,\n     *761,746,732,718,704,692,680,668,658,648,638,629,620,611,602,\n     *593,585,577,569,562,556,550/\n      DATA (Md07(i),i=9677,9709) /911,895,878,861,843,827,812,797,\n     *783,768,755,742,728,716,704,693,682,672,662,653,645,636,628,\n     *619,611,603,595,590,579,569,564,560,555/\n      DATA (Md07(i),i=9710,9744) /919,905,892,876,860,845,830,816,\n     *802,789,776,763,751,740,728,717,706,696,686,677,668,660,651,\n     *643,635,625,620,614,608,602,596,590,584,578,576/\n      DATA (Md07(i),i=9745,9779) /903,889,874,860,846,832,819,807,\n     *795,783,772,760,750,739,728,719,709,700,691,682,674,668,662,\n     *655,648,641,634,627,619,612,610,603,600,592,589/\n      DATA (Md07(i),i=9780,9816) /914,900,886,873,859,846,835,823,\n     *812,801,791,780,770,759,749,740,730,721,712,703,694,686,678,\n     *670,667,659,656,648,645,637,633,625,621,613,609,601,597/\n      DATA (Md07(i),i=9817,9853) /897,885,871,859,848,838,827,817,\n     *807,797,787,777,768,759,750,740,728,719,710,702,698,689,685,\n     *681,676,667,663,658,653,645,640,635,630,625,620,615,610/\n      DATA (Md07(i),i=9854,9894) /907,895,882,872,861,851,841,831,\n     *822,813,803,794,785,777,768,760,750,740,730,720,715,710,705,\n     *700,694,689,683,677,672,666,660,655,652,646,640,635,632,626,\n     *623,620,616/\n      DATA (Md07(i),i=9895,9937) /915,904,892,882,873,864,854,844,\n     *835,826,818,809,801,792,787,775,769,758,752,742,735,729,723,\n     *717,710,704,701,698,691,685,679,672,669,663,659,655,652,645,\n     *642,638,634,630,628/\n      DATA (Md07(i),i=9938,9980) /900,891,882,874,866,857,848,839,\n     *831,823,815,808,801,794,786,779,772,764,757,750,743,735,728,\n     *721,717,713,709,702,698,691,687,683,678,674,670,665,661,656,\n     *654,650,647,643,640/\n      DATA (Md07(i),i=9981,10025) /909,900,891,883,876,868,860,853,\n     *845,838,830,822,814,806,797,789,785,777,773,765,760,752,747,\n     *740,735,730,725,720,715,711,706,701,696,691,688,683,680,675,\n     *672,669,666,663,660,657,655/\n      DATA (Md07(i),i=10026,10072) /917,908,900,892,885,878,871,864,\n     *857,848,839,830,825,816,811,802,797,792,787,778,773,767,762,\n     *756,751,745,740,734,731,726,723,717,714,708,705,701,698,694,\n     *691,687,684,680,678,674,672,668,666/\n      DATA (Md07(i),i=10073,10121) /909,902,894,887,881,871,866,856,\n     *851,841,836,830,824,814,808,802,796,790,784,778,775,769,765,\n     *759,755,749,746,742,738,734,730,726,722,718,714,710,707,703,\n     *699,695,693,690,688,684,681,678,675,673,670/\n      DATA (Md07(i),i=10122,10172) /918,911,903,895,886,876,870,864,\n     *858,851,845,838,835,828,822,815,808,801,797,791,787,783,778,\n     *774,770,765,761,756,752,747,745,740,738,733,730,726,723,718,\n     *714,711,708,705,702,698,695,691,688,685,682,679,676/\n      DATA (Md07(i),i=10173,10223) /910,903,896,889,882,875,868,861,\n     *857,850,845,838,834,826,822,814,809,805,800,795,790,785,782,\n     *778,775,770,766,762,758,753,750,747,744,740,737,732,729,725,\n     *722,718,715,712,708,705,702,698,696,694,691,689,688/\n      DATA (Md07(i),i=10224,10274) /901,893,890,882,877,869,865,860,\n     *855,850,844,839,834,828,823,817,812,807,801,798,794,789,785,\n     *782,778,774,771,767,763,760,757,753,750,746,742,738,735,731,\n     *728,725,722,719,716,713,711,708,706,703,701,700,699/\n      DATA (Md07(i),i=10275,10327) /909,901,896,891,886,881,875,869,\n     *863,858,854,848,845,839,833,827,823,817,813,809,805,801,797,\n     *793,789,785,782,778,775,771,768,764,761,757,755,750,748,745,\n     *742,739,736,733,730,727,724,722,720,717,715,713,711,708,706/\n      DATA (Md07(i),i=10328,10384) /913,908,902,896,894,888,884,878,\n     *874,868,863,859,855,848,844,838,833,829,824,820,815,811,806,\n     *802,799,796,793,789,786,783,780,777,774,770,767,764,761,757,\n     *754,751,749,746,743,740,738,736,733,731,729,726,723,721,719,\n     *716,714,712,710/\n      DATA (Md07(i),i=10385,10443) /916,910,908,905,901,897,893,888,\n     *884,879,874,869,864,859,854,849,844,839,834,829,826,821,818,\n     *813,809,806,802,799,797,793,791,787,785,781,779,775,773,769,\n     *767,763,761,758,755,753,750,748,746,743,741,738,736,733,731,\n     *728,726,724,723,721,719/\n      DATA (Md07(i),i=10444,10502) /916,912,908,903,898,893,890,885,\n     *882,876,873,867,864,858,855,849,845,840,836,831,827,823,820,\n     *816,814,810,807,803,801,798,795,792,789,787,784,781,778,775,\n     *772,770,768,765,763,760,758,755,753,750,748,745,743,741,739,\n     *737,735,733,731,729,727/\n      DATA (Md07(i),i=10503,10561) /924,919,914,909,903,898,894,888,\n     *885,881,877,873,869,865,861,856,854,849,847,842,839,835,832,\n     *828,825,820,817,814,811,808,805,802,799,796,794,791,789,786,\n     *783,780,778,776,773,771,769,766,764,762,759,757,755,752,750,\n     *748,746,744,742,740,738/\n      DATA (Md07(i),i=10562,10620) /920,914,910,906,902,898,894,889,\n     *885,880,877,873,870,865,862,857,854,850,847,844,840,837,833,\n     *830,826,823,821,817,815,812,810,807,805,802,799,797,794,792,\n     *789,787,785,782,780,778,776,773,771,769,767,764,762,760,758,\n     *755,754,752,750,748,746/\n      DATA (Md07(i),i=10621,10685) /925,921,917,912,910,905,902,897,\n     *894,889,885,880,876,873,869,865,862,858,856,852,849,845,843,\n     *839,836,833,830,828,825,822,819,816,814,811,809,807,805,802,\n     *800,797,795,793,791,789,787,785,782,780,778,776,774,772,770,\n     *767,766,764,762,760,758,757,755,754,752,750,749/\n      DATA (Md07(i),i=10686,10748) /925,920,917,913,910,904,900,896,\n     *892,888,884,880,876,872,869,866,863,860,857,854,851,848,845,\n     *842,839,836,833,830,828,826,823,821,819,816,814,812,809,807,\n     *804,802,800,798,796,794,792,790,788,786,784,782,780,778,777,\n     *775,773,771,770,768,767,766,764,762,761/\n      DATA (Md07(i),i=10749,10811) /933,929,925,921,917,912,908,904,\n     *899,895,892,887,884,881,878,874,871,867,865,862,859,856,853,\n     *850,847,845,842,840,837,835,832,829,827,825,823,820,818,816,\n     *814,811,810,808,806,804,802,800,798,796,794,792,791,789,787,\n     *785,784,782,781,779,778,776,775,773,772/\n      DATA (Md07(i),i=10812,10872) /931,926,923,919,914,909,906,902,\n     *899,895,891,888,885,882,879,875,872,870,867,864,861,858,856,\n     *853,851,848,845,842,840,838,836,833,831,829,827,825,822,820,\n     *819,816,815,812,811,809,807,805,804,802,800,798,797,795,794,\n     *792,791,789,788,786,785,783,784/\n      DATA (Md07(i),i=10873,10933) /939,933,930,925,921,917,913,909,\n     *906,902,899,895,892,889,886,883,880,877,875,872,870,866,864,\n     *861,858,855,853,850,848,846,844,841,840,837,835,833,831,829,\n     *827,825,823,821,819,817,815,814,812,811,809,808,806,805,803,\n     *802,800,799,798,797,795,794,792/\n      DATA (Md07(i),i=10934,10988) /919,916,912,909,906,903,900,897,\n     *895,891,888,885,883,879,876,874,871,868,866,863,860,858,856,\n     *854,852,850,848,846,843,841,839,837,835,833,831,829,827,826,\n     *824,822,821,819,818,816,815,813,812,810,809,808,806,805,804,\n     *802,801/\n\n      DATA (Add07( 6,i,1),i=5,45) /0,0,9388,9401,9415,9433,9453,9473,\n     *9495,9518,9541,9565,9591,9618,9647,9677,9710,9745,9780,9817,\n     *9854,9895,9938,9981,10026,10073,10122,10173,10224,10275,10328,\n     *10385,10444,10503,10562,10621,10686,10749,10812,10873,10934/\n\n      DATA (Add07( 6,i,2),i=5,45) /0,0,7,9,7,8,9,8,9,11,13,13,14,15,\n     *16,16,16,18,18,20,20,20,22,22,22,24,24,26,28,28,28,28,30,30,\n     *32,32,34,34,36,36,42/\n\n      DATA (Add07( 6,i,3),i=5,45) /0,0,19,22,24,27,28,29,31,33,36,\n     *38,40,43,45,48,50,52,54,56,60,62,64,66,68,72,74,76,78,80,84,\n     *86,88,88,90,96,96,96,96,96,96/\n\nc     Jap.L?rche..............................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=10989,10995) /854,810,770,730,690,650,630/\n      DATA (Md07(i),i=10996,10999) /450,445,410,400/\n      DATA (Md07(i),i=11000,11007) /667,619,558,523,487,465,435,404/\n      DATA (Md07(i),i=11008,11019) /607,812,743,698,655,622,586,569,\n     *551,528,503,477/\n      DATA (Md07(i),i=11020,11034) /594,818,786,747,712,687,659,641,\n     *623,602,579,556,563,556,546/\n      DATA (Md07(i),i=11035,11049) /479,855,830,784,752,732,707,690,\n     *673,652,631,608,612,610,604/\n      DATA (Md07(i),i=11050,11063) /876,851,810,780,763,742,728,709,\n     *688,668,652,652,647,644/\n      DATA (Md07(i),i=11064,11079) /892,863,829,815,795,777,762,744,\n     *722,700,684,682,679,673,665,654/\n      DATA (Md07(i),i=11080,11097) /902,876,847,838,820,800,787,770,\n     *749,732,713,709,703,700,690,681,683,684/\n      DATA (Md07(i),i=11098,11119) /896,867,860,839,822,806,790,775,\n     *757,737,734,727,721,712,702,704,703,702,699,694,697,697/\n      DATA (Md07(i),i=11120,11141) /901,885,875,857,843,829,810,795,\n     *777,757,755,749,741,734,723,724,721,720,715,710,712,713/\n      DATA (Md07(i),i=11142,11163) /912,898,888,875,860,845,832,816,\n     *798,777,772,768,761,752,742,741,738,735,730,724,726,726/\n      DATA (Md07(i),i=11164,11185) /913,908,906,891,880,863,849,832,\n     *817,796,793,786,777,769,758,757,754,751,745,740,740,739/\n      DATA (Md07(i),i=11186,11220) /921,922,919,910,898,883,867,849,\n     *833,815,809,801,793,784,773,772,770,765,759,753,752,750,747,\n     *743,740,738,736,734,732,703,727,725,723,720,717/\n      DATA (Md07(i),i=11221,11252) /926,916,898,884,865,849,833,825,\n     *818,808,800,788,786,783,777,772,764,762,760,757,754,749,748,\n     *745,743,740,737,735,734,731,729,726/\n      DATA (Md07(i),i=11253,11284) /945,932,915,899,882,864,848,842,\n     *832,823,813,802,798,794,789,782,775,773,770,767,763,758,757,\n     *754,751,748,745,744,742,740,737,735/\n      DATA (Md07(i),i=11285,11316) /967,949,930,911,895,879,863,855,\n     *846,836,826,815,811,805,800,793,786,783,780,776,772,766,765,\n     *762,759,756,752,752,750,748,745,742/\n      DATA (Md07(i),i=11317,11357) /965,946,927,909,892,874,867,858,\n     *848,837,827,822,816,810,803,795,793,789,784,780,775,773,770,\n     *767,764,760,759,757,755,753,750,751,750,749,748,747,747,747,\n     *746,746,745/\n      DATA (Md07(i),i=11358,11398) /982,960,938,919,903,887,880,871,\n     *860,850,839,833,827,821,813,806,802,797,793,788,782,780,777,\n     *774,771,767,766,764,762,760,757,757,757,756,755,754,755,754,\n     *754,753,752/\n      DATA (Md07(i),i=11399,11441) /970,951,932,914,897,891,882,872,\n     *861,849,843,837,830,823,815,810,806,800,795,789,787,784,780,\n     *777,773,772,770,768,766,764,764,764,763,762,761,761,761,761,\n     *760,759,760,760,760/\n      DATA (Md07(i),i=11442,11480) /907,901,892,882,871,860,853,846,\n     *840,831,824,819,814,809,803,797,794,791,787,783,780,778,777,\n     *775,773,770,770,770,770,769,768,768,768,768,767,766,767,767,\n     *767/\n      DATA (Md07(i),i=11481,11519) /918,910,901,891,880,869,862,855,\n     *848,840,832,827,822,816,810,804,801,798,794,790,786,785,783,\n     *781,779,776,776,776,776,775,774,775,774,774,773,773,774,774,\n     *774/\n      DATA (Md07(i),i=11520,11553) /879,872,864,856,848,840,835,829,\n     *824,818,812,808,805,801,796,792,791,789,787,785,782,782,782,\n     *782,781,780,781,781,780,780,779,780,780,780/\n      DATA (Md07(i),i=11554,11587) /888,880,872,864,856,847,842,837,\n     *831,825,819,816,811,807,803,798,797,795,793,791,788,788,788,\n     *788,787,786,787,787,786,786,785,786,786,787/\n      DATA (Md07(i),i=11588,11621) /898,889,880,872,864,855,850,844,\n     *839,833,827,823,819,814,809,805,803,801,799,797,794,794,794,\n     *794,793,792,792,792,792,791,791,791,792,792/\n      DATA (Md07(i),i=11622,11655) /906,897,888,880,871,862,857,852,\n     *846,840,834,830,826,821,816,811,809,807,805,803,800,800,800,\n     *799,798,797,798,797,797,797,796,797,797,798/\n      DATA (Md07(i),i=11656,11679) /842,838,833,828,823,818,816,814,\n     *812,809,807,806,806,805,804,803,803,803,803,802,802,802,803,\n     *803/\n      DATA (Md07(i),i=11680,11703) /850,845,840,835,830,825,823,821,\n     *818,816,813,812,812,811,810,809,809,809,808,808,807,808,808,\n     *808/\n      DATA (Md07(i),i=11704,11714) /817,816,815,815,814,814,813,812,\n     *813,813,813/\n      DATA (Md07(i),i=11715,11725) /823,822,820,820,820,819,818,817,\n     *818,818,818/\n\n      DATA (Add07( 7,i,1),i=5,45) /0,0,10989,10996,11000,11008,11020,\n     *11035,11050,11064,11080,11098,11120,11142,11164,11186,11221,\n     *11253,11285,11317,11358,11399,11442,11481,11520,11554,11588,\n     *11622,11656,11680,11704,11715,0,0,0,0,0,0,0,0,0/\n\n      DATA (Add07( 7,i,2),i=5,45) /0,0,7,10,9,7,7,7,8,8,8,9,9,9,9,\n     *9,12,12,12,13,13,14,18,18,23,23,23,23,33,33,46,46,0,0,0,0,0,\n     *0,0,0,0/\n\n      DATA (Add07( 7,i,3),i=5,45) /0,0,13,13,16,18,21,21,21,23,25,\n     *30,30,30,30,43,43,43,43,53,53,56,56,56,56,56,56,56,56,56,56,\n     *56,0,0,0,0,0,0,0,0,0/\n\nc     Buche...................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=11726,11732) /455,460,430,400,400,400,400/\n      DATA (Md07(i),i=11733,11742) /669,596,588,569,536,526,552,511,\n     *485,472/\n      DATA (Md07(i),i=11743,11754) /726,681,675,637,641,632,651,622,\n     *602,604,583,579/\n      DATA (Md07(i),i=11755,11769) /786,767,759,743,725,716,701,709,\n     *704,680,674,660,651,644,640/\n      DATA (Md07(i),i=11770,11787) /776,790,785,766,754,748,750,742,\n     *738,716,709,703,692,691,684,678,673,669/\n      DATA (Md07(i),i=11788,11808) /515,830,794,785,772,771,771,766,\n     *760,749,739,732,721,716,713,710,703,701,698,696,691/\n      DATA (Md07(i),i=11809,11835) /498,837,807,798,790,784,786,790,\n     *777,764,755,747,745,739,733,728,727,722,721,719,715,713,711,\n     *708,706,705,703/\n      DATA (Md07(i),i=11836,11866) /836,819,808,803,797,790,784,787,\n     *783,772,763,759,756,749,745,745,741,737,736,734,732,730,727,\n     *726,725,723,721,718,717,716,714/\n      DATA (Md07(i),i=11867,11899) /855,834,829,807,806,806,808,802,\n     *791,785,775,770,769,764,761,756,753,753,749,747,745,745,742,\n     *740,740,737,736,734,733,732,730,729,727/\n      DATA (Md07(i),i=11900,11934) /857,839,832,816,812,813,815,809,\n     *802,791,789,783,779,776,772,768,766,765,762,760,758,757,755,\n     *753,752,751,750,748,747,745,744,743,741,740,738/\n      DATA (Md07(i),i=11935,11975) /959,856,843,838,822,821,819,819,\n     *818,807,801,798,793,788,783,781,780,776,774,773,771,769,767,\n     *767,764,764,762,761,759,759,757,756,755,754,753,751,750,749,\n     *747,746,745/\n      DATA (Md07(i),i=11976,12021) /867,853,840,828,818,823,823,821,\n     *815,808,803,799,796,792,790,788,785,784,782,780,779,777,776,\n     *775,774,772,771,770,769,768,767,766,764,763,762,761,760,759,\n     *758,757,756,755,753,752,751,750/\n      DATA (Md07(i),i=12022,12069) /857,843,831,822,829,826,829,823,\n     *818,813,807,805,800,799,795,794,792,789,789,787,786,785,784,\n     *782,781,781,779,778,777,776,776,774,774,773,772,771,770,769,\n     *768,767,766,765,764,763,762,761,759,759/\n      DATA (Md07(i),i=12070,12165) /858,849,836,828,831,833,832,828,\n     *823,817,813,810,806,804,802,800,799,798,796,795,794,793,792,\n     *791,790,789,788,787,786,785,785,784,783,782,781,780,779,778,\n     *778,777,776,775,774,773,772,771,770,769,768,767,766,765,764,\n     *763,762,761,760,759,758,757,756,754,753,752,751,750,748,747,\n     *746,745,743,742,741,740,738,737,736,734,733,732,730,729,727,\n     *726,725,723,722,720,719,717,716,714,713,711,710,708/\n      DATA (Md07(i),i=12166,12260) /863,844,831,834,837,836,832,828,\n     *824,819,817,814,811,809,807,806,805,803,803,802,801,799,799,\n     *797,796,796,795,794,794,793,792,792,791,790,789,788,788,787,\n     *786,785,785,784,783,782,781,780,779,779,778,777,776,775,774,\n     *773,772,771,770,769,768,767,766,765,764,763,762,761,760,759,\n     *758,756,755,754,753,752,751,749,748,747,746,744,743,742,741,\n     *739,738,737,735,734,733,731,730,728,727,726,724/\n      DATA (Md07(i),i=12261,12354) /846,839,836,839,842,837,832,830,\n     *826,823,819,818,815,814,812,811,809,809,808,807,806,805,805,\n     *804,803,802,802,801,801,800,799,798,798,797,796,796,795,795,\n     *794,793,792,792,791,790,790,789,788,787,786,786,785,784,783,\n     *782,781,781,780,779,778,777,776,775,774,773,772,771,770,769,\n     *768,767,766,765,764,763,762,761,760,759,758,756,755,754,753,\n     *752,751,750,748,747,746,745,743,742,741,740/\n      DATA (Md07(i),i=12355,12448) /850,842,846,845,847,840,837,832,\n     *830,827,825,823,821,819,818,817,816,815,814,813,813,812,811,\n     *810,810,809,809,808,808,807,806,806,805,805,804,804,803,802,\n     *802,801,801,800,800,799,798,798,797,796,796,795,794,793,793,\n     *792,791,790,790,789,788,787,786,786,785,784,783,782,781,780,\n     *780,779,778,777,776,775,774,773,772,771,770,769,768,767,766,\n     *765,764,763,762,760,759,758,757,756,755,754/\n      DATA (Md07(i),i=12449,12541) /844,845,846,850,844,840,837,835,\n     *832,829,827,826,824,823,822,821,820,820,819,818,818,817,817,\n     *816,816,815,815,814,814,813,813,813,812,811,811,810,810,810,\n     *809,808,808,807,807,806,806,805,804,804,803,803,802,801,801,\n     *800,800,799,798,797,797,796,795,795,794,793,792,792,791,790,\n     *789,788,788,787,786,785,784,783,782,782,781,780,779,778,777,\n     *776,775,774,773,772,771,770,769,768,767/\n      DATA (Md07(i),i=12542,12633) /851,853,853,847,845,841,840,838,\n     *834,833,831,830,829,828,827,826,825,825,824,824,823,823,823,\n     *822,822,821,821,821,820,820,819,819,818,818,818,817,817,816,\n     *816,816,815,815,814,814,813,813,812,812,811,811,810,810,809,\n     *809,808,807,807,806,806,805,804,804,803,802,802,801,800,800,\n     *799,798,797,797,796,795,794,794,793,792,791,790,790,789,788,\n     *787,786,785,784,784,783,782,781,780/\n      DATA (Md07(i),i=12634,12725) /852,853,856,852,849,847,844,841,\n     *839,837,835,834,833,833,832,831,831,830,830,829,829,828,828,\n     *828,827,827,827,826,826,826,825,825,825,824,824,824,823,823,\n     *823,822,822,822,821,821,820,820,820,819,819,818,818,817,817,\n     *816,816,815,815,814,814,813,813,812,812,811,811,810,809,809,\n     *808,808,807,806,806,805,804,804,803,802,801,801,800,799,799,\n     *798,797,796,796,795,794,793,792,792/\n      DATA (Md07(i),i=12726,12816) /860,859,855,851,850,847,845,843,\n     *842,840,839,838,837,836,836,835,835,835,834,834,834,833,833,\n     *832,832,832,832,832,831,831,831,831,830,830,830,830,829,829,\n     *829,829,828,828,828,827,827,827,826,826,826,825,825,825,824,\n     *824,823,823,822,822,821,821,820,820,820,819,819,818,817,817,\n     *816,816,815,815,814,814,813,812,812,811,811,810,809,809,808,\n     *807,807,806,805,805,804,803,802/\n      DATA (Md07(i),i=12817,12906) /862,859,855,853,851,849,847,846,\n     *844,843,842,842,841,840,840,839,839,839,838,839,838,838,838,\n     *838,837,837,837,837,837,836,836,836,836,836,836,835,835,835,\n     *835,835,834,834,834,833,833,833,833,832,832,832,831,831,831,\n     *830,830,830,829,829,829,828,828,827,827,827,826,826,825,825,\n     *824,824,823,823,822,822,821,821,820,820,819,819,818,817,817,\n     *816,816,815,815,814,813,813/\n      DATA (Md07(i),i=12907,12995) /861,858,857,854,852,851,850,848,\n     *847,846,845,845,844,844,844,844,843,843,843,843,843,842,842,\n     *842,842,842,842,842,842,842,842,841,841,841,841,841,841,841,\n     *840,840,840,840,840,840,839,839,839,839,838,838,838,838,837,\n     *837,837,837,836,836,836,835,835,835,834,834,833,833,833,832,\n     *832,832,831,831,830,830,829,829,828,828,827,827,827,826,825,\n     *825,824,824,823,823,822/\n      DATA (Md07(i),i=12996,13084) /864,861,859,857,856,854,853,851,\n     *850,850,850,849,848,848,848,848,848,847,847,847,847,847,847,\n     *847,847,847,847,847,847,847,847,847,847,847,846,846,846,846,\n     *846,846,846,846,846,845,845,845,845,845,845,845,844,844,844,\n     *844,844,843,843,843,843,842,842,842,841,841,841,841,840,840,\n     *840,839,839,839,838,838,837,837,837,836,836,835,835,835,834,\n     *834,833,833,832,832,831/\n      DATA (Md07(i),i=13085,13172) /864,863,861,859,858,856,856,855,\n     *854,853,853,853,852,852,852,852,852,852,851,852,852,851,852,\n     *852,852,852,852,852,852,852,852,852,852,852,852,852,852,852,\n     *851,851,851,851,851,851,851,851,851,851,851,850,850,850,850,\n     *850,850,850,849,849,849,849,849,848,848,848,848,844,847,847,\n     *847,846,846,846,846,845,845,845,844,844,844,843,843,842,842,\n     *842,841,841,841,840/\n      DATA (Md07(i),i=13173,13259) /865,864,863,861,860,859,858,857,\n     *857,857,856,856,856,856,856,856,856,856,856,856,856,856,856,\n     *856,856,856,856,856,856,857,857,857,857,857,857,857,857,857,\n     *857,857,857,857,857,857,857,857,856,856,856,856,856,856,856,\n     *856,856,856,856,855,855,855,855,855,855,854,854,854,854,854,\n     *853,853,853,853,852,852,852,852,851,851,851,851,850,850,850,\n     *849,849,849,848/\n      DATA (Md07(i),i=13260,13345) /866,865,864,863,862,861,861,860,\n     *860,860,860,859,859,860,860,860,860,860,860,860,860,860,860,\n     *860,861,861,861,861,861,861,861,861,861,862,862,862,862,862,\n     *862,862,862,862,862,862,862,862,862,862,862,862,862,862,862,\n     *862,862,862,862,861,861,861,861,861,861,861,861,861,860,860,\n     *860,860,860,859,859,859,859,859,858,858,858,858,858,857,857,\n     *857,857,856/\n      DATA (Md07(i),i=13346,13430) /868,867,867,866,865,864,864,864,\n     *863,863,863,863,863,863,863,863,864,864,864,864,864,864,865,\n     *865,865,865,865,865,866,866,866,866,866,866,866,866,867,867,\n     *867,867,867,867,867,867,867,867,867,867,867,867,867,867,867,\n     *867,867,867,867,867,867,867,867,867,867,867,867,867,867,866,\n     *866,866,866,866,866,866,866,865,865,865,865,865,865,864,864,\n     *864,864/\n      DATA (Md07(i),i=13431,13513) /870,869,868,867,867,866,867,866,\n     *867,867,867,867,867,867,867,868,868,868,868,868,869,869,869,\n     *869,869,870,870,870,870,870,871,871,871,871,871,871,872,872,\n     *872,872,872,872,872,872,872,873,873,873,873,873,873,873,873,\n     *873,873,873,873,873,873,873,873,873,873,873,873,873,873,873,\n     *873,872,872,872,872,872,872,872,872,872,871,871,871,871,871/\n      DATA (Md07(i),i=13514,13593) /870,870,870,870,870,870,870,870,\n     *870,871,871,871,871,871,872,872,872,872,873,873,873,873,874,\n     *874,874,874,875,875,875,875,875,876,876,876,876,876,872,877,\n     *877,877,877,877,877,878,878,878,878,878,878,878,878,878,878,\n     *878,879,879,879,879,879,879,879,879,879,879,879,879,879,879,\n     *879,878,878,878,878,878,878,878,878,878,878,878/\n      DATA (Md07(i),i=13594,13670) /873,873,873,873,873,874,874,874,\n     *874,875,875,875,875,876,876,876,877,877,877,878,878,878,878,\n     *879,879,879,879,880,880,880,881,881,881,881,881,881,882,882,\n     *882,882,882,883,883,883,883,883,883,883,884,884,884,884,884,\n     *884,884,884,884,884,884,884,884,884,884,884,885,885,885,885,\n     *885,884,884,884,884,884,884,884,884/\n      DATA (Md07(i),i=13671,13744) /876,877,877,877,877,878,878,878,\n     *879,879,879,880,880,880,881,881,881,882,882,882,883,883,883,\n     *884,884,884,884,885,885,885,885,886,886,886,886,887,887,887,\n     *887,887,888,888,888,888,888,888,889,889,889,889,889,889,889,\n     *890,890,890,890,890,890,890,890,890,890,890,890,890,890,890,\n     *890,890,890,890,890,890/\n      DATA (Md07(i),i=13745,13808) /883,883,884,884,884,885,885,885,\n     *886,886,886,887,887,887,888,888,888,889,889,889,890,890,890,\n     *890,891,891,891,892,892,892,892,892,893,893,893,893,894,894,\n     *894,894,894,894,895,895,895,895,895,895,895,895,896,896,896,\n     *896,896,896,896,896,896,896,896,896,896,896/\n      DATA (Md07(i),i=13809,13859) /891,892,892,892,893,893,893,894,\n     *894,894,895,895,895,896,896,896,896,897,897,897,897,898,898,\n     *898,898,899,899,899,899,899,900,900,900,900,900,900,901,901,\n     *901,901,899,901,901,902,902,902,902,902,902,902,902/\n      DATA (Md07(i),i=13860,13895) /900,901,901,901,902,902,902,902,\n     *903,903,903,903,904,904,904,904,905,905,905,905,905,906,906,\n     *906,906,906,907,907,907,907,907,907,907,908,908,908/\n      DATA (Md07(i),i=13896,13916) /909,909,910,910,910,910,910,911,\n     *911,911,911,912,912,912,912,912,912,913,913,913,913/\n\n      DATA (Add07( 8,i,1),i=5,45) /0,0,11726,11733,11743,11755,11770,\n     *11788,11809,11836,11867,11900,11935,11976,12022,12070,12166,\n     *12261,12355,12449,12542,12634,12726,12817,12907,12996,13085,\n     *13173,13260,13346,13431,13514,13594,13671,13745,13809,13860,\n     *13896,0,0,0/\n\n      DATA (Add07( 8,i,2),i=5,45) /0,0,10,9,9,7,7,7,7,8,8,8,7,8,9,\n     *9,10,11,11,12,13,13,14,15,16,16,17,18,19,20,22,25,28,31,41,54,\n     *69,84,0,0,0/\n\n      DATA (Add07( 8,i,3),i=5,45) /0,0,16,18,20,21,24,27,33,38,40,\n     *42,47,53,56,104,104,104,104,104,104,104,104,104,104,104,104,\n     *104,104,104,104,104,104,104,104,104,104,104,0,0,0/\n\nc     Eiche.............................................................\n\n      DATA (Md07(i),i=13917,13917) /437/\n      DATA (Md07(i),i=13918,13926) /416,522,604,632,663,673,667,665,\n     *653/\n      DATA (Md07(i),i=13927,13945) /557,501,502,507,523,557,614,669,\n     *703,718,720,712,718,714,721,711,704,712,713/\n      DATA (Md07(i),i=13946,13970) /811,701,644,612,618,620,633,677,\n     *717,738,746,744,743,743,744,744,745,746,752,752,748,748,752,\n     *755,755/\n      DATA (Md07(i),i=13971,14000) /868,771,724,691,687,684,691,714,\n     *744,759,763,767,770,766,768,770,771,776,776,776,776,772,777,\n     *778,776,776,774,771,771,770/\n      DATA (Md07(i),i=14001,14033) /887,827,762,732,729,731,734,740,\n     *764,774,775,781,786,785,784,786,787,792,792,791,787,786,789,\n     *791,789,786,785,785,785,786,789,793,795/\n      DATA (Md07(i),i=14034,14073) /916,846,802,766,750,751,765,767,\n     *777,784,789,792,793,794,794,794,799,800,800,802,798,796,798,\n     *800,798,795,794,794,794,796,797,799,802,802,801,799,797,794,\n     *793,791/\n      DATA (Md07(i),i=14074,14129) /928,876,832,798,772,767,777,778,\n     *788,791,794,799,802,801,802,802,805,808,808,807,805,803,804,\n     *805,803,801,799,799,799,801,802,805,807,807,806,804,803,801,\n     *800,798,798,796,794,793,792,790,788,787,785,784,782,781,779,\n     *778,776,774/\n      DATA (Md07(i),i=14130,14189) /953,895,857,815,792,777,787,794,\n     *794,801,801,804,806,806,808,809,811,812,812,811,811,811,809,\n     *809,807,805,805,804,804,806,807,810,812,811,810,808,808,806,\n     *805,804,802,800,798,797,797,796,795,793,792,790,788,786,784,\n     *783,782,781,780,778,775,775/\n      DATA (Md07(i),i=14190,14254) /965,912,876,827,806,787,795,805,\n     *805,805,808,812,811,810,813,814,816,817,817,814,814,813,813,\n     *812,811,809,809,807,809,811,812,814,815,815,815,813,813,811,\n     *810,809,806,804,802,802,802,801,801,799,799,797,794,793,790,\n     *789,788,787,785,784,783,781,780,779,777,776,775/\n      DATA (Md07(i),i=14255,14323) /925,884,840,818,799,800,810,808,\n     *808,810,816,816,816,819,818,820,821,819,819,818,817,817,815,\n     *814,812,813,811,814,815,815,818,819,819,819,818,817,816,814,\n     *813,811,809,807,806,807,807,806,805,804,803,800,799,796,795,\n     *794,793,791,789,787,785,784,783,781,780,779,778,777,775,774,\n     *773/\n      DATA (Md07(i),i=14324,14396) /898,848,823,809,808,813,811,814,\n     *814,818,820,821,822,822,824,825,823,822,822,820,821,819,818,\n     *816,816,815,817,819,819,821,822,822,821,820,820,819,818,817,\n     *815,813,811,810,811,811,810,809,808,807,806,804,802,800,799,\n     *798,797,795,793,791,791,789,788,787,785,784,783,782,780,779,\n     *779,780,780,781,782/\n      DATA (Md07(i),i=14397,14471) /856,831,819,818,815,813,819,818,\n     *821,823,822,825,825,827,827,827,824,824,824,823,823,821,819,\n     *819,818,821,822,822,824,824,824,824,823,823,823,821,820,818,\n     *816,815,814,815,815,814,813,812,812,810,809,807,806,805,803,\n     *801,800,798,797,796,795,794,793,792,790,789,788,787,786,785,\n     *785,798,785,786,786,786,785/\n      DATA (Md07(i),i=14472,14549) /838,827,824,819,819,821,821,823,\n     *826,826,829,828,829,830,828,827,827,826,826,825,824,823,822,\n     *821,823,825,825,826,826,825,825,825,826,825,824,823,821,820,\n     *819,819,819,818,818,817,816,816,814,813,811,810,808,807,806,\n     *805,803,802,802,801,800,798,797,796,795,794,793,792,791,791,\n     *790,789,788,787,786,785,784,783,782,781/\n      DATA (Md07(i),i=14550,14629) /830,821,821,824,825,826,830,830,\n     *831,830,830,831,830,829,829,828,829,829,828,827,827,826,825,\n     *827,829,829,828,826,825,826,827,826,826,825,824,823,822,822,\n     *821,820,821,820,820,819,818,816,815,814,812,811,810,809,808,\n     *807,806,806,805,804,802,801,801,800,799,798,797,796,795,794,\n     *793,792,791,791,790,789,788,787,786,787,787,787/\n      DATA (Md07(i),i=14630,14711) /826,823,825,828,830,832,832,833,\n     *833,833,834,833,832,832,832,832,832,831,831,831,830,828,830,\n     *831,831,830,829,827,828,828,828,828,827,826,825,824,824,822,\n     *823,823,823,823,821,820,819,818,816,815,814,813,813,812,812,\n     *811,810,810,809,808,807,806,805,804,804,803,802,801,800,799,\n     *799,798,797,796,796,795,794,794,794,795,796,797,798,799/\n      DATA (Md07(i),i=14712,14795) /829,830,833,835,835,836,835,836,\n     *837,836,835,834,834,834,835,835,834,834,833,832,833,834,834,\n     *833,832,830,830,830,830,830,829,828,828,827,827,826,825,826,\n     *826,826,824,824,822,821,820,820,819,818,818,817,817,816,816,\n     *815,814,813,813,812,811,811,810,809,808,807,817,806,806,805,\n     *804,804,803,803,802,801,802,802,803,805,806,807,808,809,809,\n     *809/\n      DATA (Md07(i),i=14796,14878) /833,837,837,837,837,838,837,839,\n     *839,839,839,837,837,838,838,837,837,837,835,836,837,837,836,\n     *834,833,833,833,833,832,831,831,831,830,830,830,829,829,829,\n     *828,827,826,825,824,824,824,823,823,823,822,822,821,821,820,\n     *820,819,807,818,817,817,816,815,815,814,813,813,812,812,811,\n     *811,810,810,809,809,809,810,810,811,812,813,814,814,815,815/\n      DATA (Md07(i),i=14879,14960) /840,840,838,838,838,838,839,840,\n     *842,841,840,841,840,841,840,840,840,839,839,840,840,839,838,\n     *837,837,837,836,835,835,835,835,834,834,834,833,833,833,833,\n     *832,832,830,830,830,829,828,828,828,827,827,827,826,826,826,\n     *826,825,825,824,823,822,822,821,820,820,820,819,819,819,818,\n     *818,817,817,817,818,818,818,818,818,819,820,820,821,821/\n      DATA (Md07(i),i=14961,15041) /841,840,839,838,840,840,841,842,\n     *842,842,842,842,843,843,843,843,842,842,842,843,842,841,841,\n     *840,840,840,839,839,839,838,838,838,838,838,837,837,837,837,\n     *837,836,835,834,834,834,833,833,833,833,832,832,832,832,831,\n     *831,831,830,830,829,828,827,827,827,826,826,826,825,825,825,\n     *824,824,824,824,825,825,825,824,824,824,825,825,825/\n      DATA (Md07(i),i=15042,15121) /840,840,839,840,841,841,841,842,\n     *843,844,843,845,845,845,846,845,845,845,846,846,844,844,844,\n     *844,844,843,843,844,843,842,842,842,842,842,842,842,842,841,\n     *840,840,839,839,838,838,838,838,838,838,838,837,837,837,837,\n     *837,836,836,835,834,834,833,832,832,832,831,831,831,831,830,\n     *831,831,831,830,830,830,830,829,829,829,829,830/\n      DATA (Md07(i),i=15122,15200) /842,840,841,840,841,840,842,844,\n     *845,845,847,847,847,849,849,848,848,849,849,847,847,847,847,\n     *847,847,847,847,847,846,846,846,846,846,846,846,846,845,845,\n     *844,844,844,844,844,843,843,843,843,843,843,843,842,842,842,\n     *841,841,840,840,839,838,838,838,838,838,838,837,837,837,837,\n     *837,837,836,836,835,835,835,834,834,834,833/\n      DATA (Md07(i),i=15201,15278) /840,842,840,840,840,843,846,847,\n     *847,848,848,849,850,851,851,851,852,852,851,850,850,850,850,\n     *850,850,850,850,850,850,850,849,849,849,849,849,849,849,849,\n     *849,849,849,849,848,848,847,847,847,847,847,847,847,846,846,\n     *846,845,845,844,843,843,843,843,843,843,842,842,841,841,841,\n     *841,841,841,841,841,841,840,840,840,839/\n      DATA (Md07(i),i=15279,15355) /841,840,839,840,844,847,848,850,\n     *850,850,851,852,853,853,853,854,855,854,853,853,853,853,853,\n     *853,853,853,853,852,852,853,853,853,853,853,853,853,852,852,\n     *852,852,863,851,850,850,851,851,850,851,851,851,851,850,850,\n     *849,849,849,849,849,848,848,848,848,848,847,847,847,847,847,\n     *847,847,846,846,846,846,845,845,845/\n      DATA (Md07(i),i=15356,15431) /840,838,840,844,848,850,851,852,\n     *852,853,854,855,855,855,857,857,857,856,856,856,856,856,856,\n     *857,857,857,856,856,856,856,857,857,857,856,856,856,856,856,\n     *856,856,855,855,855,855,855,855,855,855,855,855,855,854,854,\n     *854,853,853,854,853,853,854,853,853,853,852,852,851,851,852,\n     *852,852,852,851,851,851,851,851/\n      DATA (Md07(i),i=15432,15506) /838,840,845,849,851,853,852,854,\n     *855,856,856,856,858,859,859,859,858,859,859,859,859,860,860,\n     *859,859,859,860,860,860,860,860,860,860,860,860,860,860,859,\n     *859,859,859,859,859,859,859,858,858,858,859,859,859,859,858,\n     *857,857,858,858,858,858,858,858,857,857,856,857,857,857,857,\n     *857,857,856,856,856,856,856/\n      DATA (Md07(i),i=15507,15580) /841,845,850,853,855,855,856,857,\n     *857,858,858,859,860,861,861,861,862,862,862,863,863,863,862,\n     *862,862,862,862,863,863,863,864,864,864,864,864,863,863,863,\n     *862,862,862,861,861,861,862,862,862,862,863,862,862,862,861,\n     *862,862,862,862,862,862,862,862,862,861,861,861,861,861,862,\n     *862,862,861,861,862,861/\n      DATA (Md07(i),i=15581,15653) /846,851,854,856,856,858,858,858,\n     *859,859,860,861,862,862,862,863,863,863,864,865,864,865,865,\n     *864,865,865,865,866,866,866,866,867,867,867,866,866,866,866,\n     *866,866,866,865,865,865,866,866,867,867,867,867,866,866,866,\n     *866,866,866,866,867,867,866,866,866,866,866,866,866,866,866,\n     *866,866,866,866,866/\n      DATA (Md07(i),i=15654,15725) /852,856,857,857,859,859,859,860,\n     *860,861,862,863,863,863,863,864,864,865,865,865,866,867,866,\n     *867,867,868,868,868,869,869,869,870,870,870,870,870,870,870,\n     *870,870,870,869,869,870,870,871,871,871,871,871,871,870,871,\n     *871,871,870,870,870,870,870,870,870,870,870,870,870,870,870,\n     *870,870,870,870/\n      DATA (Md07(i),i=15726,15796) /857,858,858,860,859,860,861,861,\n     *862,863,864,864,864,864,865,866,867,867,868,868,868,869,869,\n     *870,870,870,871,871,872,872,872,872,872,873,873,873,874,874,\n     *874,874,873,874,874,874,875,875,875,876,875,875,875,875,875,\n     *875,875,874,874,874,874,874,874,874,874,874,874,874,873,873,\n     *873,873,873/\n      DATA (Md07(i),i=15797,15866) /859,859,861,860,862,862,862,863,\n     *864,865,865,865,866,867,867,868,869,870,871,871,871,871,872,\n     *872,873,873,874,874,875,875,875,876,876,876,876,876,876,876,\n     *876,876,877,877,878,878,878,879,879,878,878,878,878,878,878,\n     *878,878,878,878,878,878,877,877,877,877,877,877,877,877,876,\n     *876,876/\n      DATA (Md07(i),i=15867,15935) /859,860,861,863,863,864,864,865,\n     *866,866,866,867,867,868,868,870,871,871,871,872,873,873,873,\n     *874,875,875,876,877,877,878,878,878,878,879,878,878,878,879,\n     *879,880,880,880,880,881,881,881,881,880,880,885,880,880,881,\n     *881,881,881,880,880,880,880,880,880,880,880,880,880,879,879,\n     *878/\n      DATA (Md07(i),i=15936,16003) /861,862,864,865,865,866,867,867,\n     *866,867,867,868,869,871,872,872,873,873,874,875,875,876,876,\n     *877,877,878,878,879,879,880,880,881,881,881,881,881,882,882,\n     *882,882,882,882,882,882,882,882,882,881,881,881,881,880,880,\n     *879,879,879,879,879,879,879,879,879,878,878,878,878,878,877/\n      DATA (Md07(i),i=16004,16070) /864,865,866,867,867,868,868,869,\n     *870,870,871,872,873,874,874,875,875,876,877,877,878,878,879,\n     *880,880,881,881,882,882,883,883,884,884,884,885,885,886,886,\n     *886,886,886,886,886,886,886,886,886,886,885,885,885,884,884,\n     *884,884,884,883,883,883,883,883,883,883,883,883,883,882/\n\n      DATA (Add07( 9,i,1),i=5,45) /0,0,13917,13918,13927,13946,13971,\n     *14001,14034,14074,14130,14190,14255,14324,14397,14472,14550,\n     *14630,14712,14796,14879,14961,15042,15122,15201,15279,15356,\n     *15432,15507,15581,15654,15726,15797,15867,15936,16004,0,0,0,\n     *0,0/\n\n      DATA (Add07( 9,i,2),i=5,45) /0,0,17,14,9,8,8,8,8,8,8,8,9,10,\n     *11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,\n     *33,34,0,0,0,0,0/\n\n      DATA (Add07( 9,i,3),i=5,45) /0,0,17,22,27,32,37,40,47,63,67,\n     *72,77,82,85,89,93,96,100,100,100,100,100,100,100,100,100,100,\n     *100,100,100,100,100,100,100,100,0,0,0,0,0/\n\nc     Roteiche...............................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=16071,16074) /659,620,580,540/\n      DATA (Md07(i),i=16075,16078) /527,490,460,430/\n      DATA (Md07(i),i=16079,16081) /616,526,474/\n      DATA (Md07(i),i=16082,16087) /813,676,608,566,555,530/\n      DATA (Md07(i),i=16088,16094) /874,737,679,642,612,598,585/\n      DATA (Md07(i),i=16095,16101) /892,780,723,680,656,643,633/\n      DATA (Md07(i),i=16102,16112) /917,824,758,716,697,675,675,680,\n     *677,690,700/\n      DATA (Md07(i),i=16113,16128) /932,841,785,745,722,709,701,704,\n     *708,716,727,727,719,711,701,705/\n      DATA (Md07(i),i=16129,16145) /935,869,802,768,746,735,729,729,\n     *731,737,745,743,737,732,730,724,722/\n      DATA (Md07(i),i=16146,16162) /890,831,798,773,757,750,750,750,\n     *758,759,756,752,746,745,741,739,737/\n      DATA (Md07(i),i=16163,16180) /905,852,811,789,780,773,771,770,\n     *771,771,770,765,760,757,754,753,753,752/\n      DATA (Md07(i),i=16181,16200) /919,870,830,810,794,787,785,782,\n     *783,781,779,776,770,768,766,765,763,761,762,759/\n      DATA (Md07(i),i=16201,16226) /927,883,849,827,811,803,800,797,\n     *792,790,789,783,780,778,776,774,773,771,771,768,767,766,764,\n     *764,761,760/\n      DATA (Md07(i),i=16227,16251) /897,863,841,827,817,814,806,800,\n     *797,796,791,788,786,783,782,781,780,779,777,775,774,774,771,\n     *770,769/\n      DATA (Md07(i),i=16252,16280) /910,874,854,839,830,821,813,811,\n     *804,804,799,794,794,791,789,788,787,786,784,783,782,781,780,\n     *778,776,776,774,772,771/\n      DATA (Md07(i),i=16281,16312) /833,825,820,815,811,809,806,802,\n     *800,797,795,794,794,792,791,790,790,789,787,785,784,784,783,\n     *781,779,778,777,775,773,772,771,769/\n      DATA (Md07(i),i=16313,16345) /837,832,826,820,816,814,810,807,\n     *805,804,803,800,799,799,798,797,795,794,792,791,790,790,789,\n     *787,786,785,784,782,780,779,780,778,776/\n      DATA (Md07(i),i=16346,16375) /823,822,820,815,812,812,809,809,\n     *807,805,804,802,801,799,800,798,796,796,796,795,793,792,791,\n     *790,788,787,786,785,784,782/\n      DATA (Md07(i),i=16376,16411) /825,824,821,817,817,815,814,812,\n     *811,810,808,807,805,805,803,801,801,799,800,799,798,797,796,\n     *794,793,792,792,790,789,789,789,787,786,785,784,784/\n      DATA (Md07(i),i=16412,16443) /822,820,818,817,816,815,813,813,\n     *810,810,808,807,807,805,805,803,803,802,801,800,799,798,797,\n     *796,796,795,794,793,792,791,790,789/\n      DATA (Md07(i),i=16444,16483) /826,824,823,821,821,818,817,816,\n     *815,814,813,812,811,810,809,808,808,807,806,805,804,803,803,\n     *802,801,800,800,799,798,797,797,796,795,794,793,793,792,791,\n     *790,790/\n      DATA (Md07(i),i=16484,16527) /830,828,827,825,825,823,822,821,\n     *820,819,816,815,815,814,813,813,811,810,810,809,808,807,806,\n     *805,804,804,803,802,801,800,799,798,798,797,796,795,794,793,\n     *791,791,790,788,787,787/\n      DATA (Md07(i),i=16528,16568) /829,830,826,825,824,823,822,821,\n     *819,819,818,818,815,815,815,814,812,811,811,811,809,808,808,\n     *806,805,805,803,802,802,800,800,799,797,797,796,794,794,793,\n     *791,791,790/\n      DATA (Md07(i),i=16569,16611) /835,830,829,828,826,825,824,824,\n     *822,822,821,820,819,819,818,816,816,815,814,813,813,811,811,\n     *810,809,808,808,807,806,805,805,803,803,802,800,800,800,798,\n     *798,797,795,795,794/\n      DATA (Md07(i),i=16612,16648) /828,827,826,825,825,823,823,821,\n     *821,819,819,819,817,817,816,815,814,813,812,811,811,809,809,\n     *807,807,805,805,803,803,801,801,799,799,799,797,797,796/\n      DATA (Md07(i),i=16649,16681) /827,827,825,825,824,823,822,821,\n     *820,820,819,818,817,816,815,815,813,813,811,811,810,809,808,\n     *808,806,806,804,804,803,802,801,801,799/\n      DATA (Md07(i),i=16682,16704) /822,821,820,820,818,817,817,815,\n     *815,814,813,812,812,811,810,809,809,807,807,806,805,804,804/\n\n      DATA (Add07(10,i,1),i=5,45) /0,0,16071,16075,16079,16082,16088,\n     *16095,16102,16113,16129,16146,16163,16181,16201,16227,16252,\n     *16281,16313,16346,16376,16412,16444,16484,16528,16569,16612,\n     *16649,16682,0,0,0,0,0,0,0,0,0,0,0,0/\n\n      DATA (Add07(10,i,2),i=5,45) /0,0,7,7,9,8,8,8,8,8,8,9,9,9,9,10,\n     *10,14,14,17,18,22,22,22,25,26,32,36,46,0,0,0,0,0,0,0,0,0,0,0,\n     *0/\n\n      DATA (Add07(10,i,3),i=5,45) /0,0,10,10,11,13,14,14,18,23,24,\n     *25,26,28,34,34,38,45,46,46,53,53,61,65,65,68,68,68,68,0,0,0,\n     *0,0,0,0,0,0,0,0,0/\n\nc     Esche.............................................................\n\n      DATA (Md07(i),i=16705,16706) /560,599/\n      DATA (Md07(i),i=16707,16711) /613,632,649,661,634/\n      DATA (Md07(i),i=16712,16718) /912,714,693,677,676,676,669/\n      DATA (Md07(i),i=16719,16726) /801,778,737,725,706,698,692,681/\n      DATA (Md07(i),i=16727,16735) /498,794,758,733,721,712,710,701,\n     *688/\n      DATA (Md07(i),i=16736,16744) /818,777,750,742,733,723,715,703,\n     *694/\n      DATA (Md07(i),i=16745,16755) /840,796,777,753,741,732,726,721,\n     *718,715,709/\n      DATA (Md07(i),i=16756,16768) /857,817,786,767,754,747,741,737,\n     *733,728,725,718,711/\n      DATA (Md07(i),i=16769,16782) /824,796,778,768,759,753,749,744,\n     *740,736,731,727,720,686/\n      DATA (Md07(i),i=16783,16798) /827,802,787,776,769,764,759,754,\n     *750,744,740,734,729,726,723,718/\n      DATA (Md07(i),i=16799,16815) /808,794,784,779,772,768,763,758,\n     *753,750,746,742,740,740,740,736,730/\n      DATA (Md07(i),i=16816,16832) /816,802,792,785,780,775,770,765,\n     *762,758,756,754,752,752,752,753,754/\n      DATA (Md07(i),i=16833,16850) /812,803,796,791,785,780,774,771,\n     *768,765,763,763,763,763,764,766,768,771/\n      DATA (Md07(i),i=16851,16870) /821,812,804,799,794,788,784,780,\n     *777,775,774,773,774,774,775,775,777,780,782,785/\n      DATA (Md07(i),i=16871,16891) /826,813,805,799,795,791,789,787,\n     *784,781,782,782,782,783,784,786,787,789,791,794,796/\n      DATA (Md07(i),i=16892,16913) /821,812,805,802,799,796,794,792,\n     *790,790,791,791,791,792,793,794,796,797,799,801,803,804/\n      DATA (Md07(i),i=16914,16936) /818,811,807,804,803,802,800,799,\n     *798,797,798,798,798,800,800,802,803,805,806,807,809,810,811/\n      DATA (Md07(i),i=16937,16960) /817,812,810,807,807,806,806,805,\n     *804,804,804,804,805,806,807,808,809,810,811,812,813,814,815,\n     *816/\n      DATA (Md07(i),i=16961,16985) /817,814,813,811,810,811,810,810,\n     *809,809,809,810,810,811,812,813,814,815,815,816,817,817,818,\n     *818,819/\n      DATA (Md07(i),i=16986,17011) /818,816,816,816,815,815,814,814,\n     *814,813,813,814,814,815,816,816,817,818,818,819,819,819,820,\n     *820,820,820/\n      DATA (Md07(i),i=17012,17037) /819,819,819,819,818,818,818,817,\n     *817,817,817,817,818,819,819,819,820,820,820,821,821,821,821,\n     *821,821,821/\n      DATA (Md07(i),i=17038,17064) /823,822,822,821,821,821,821,821,\n     *820,820,820,821,821,821,821,821,822,822,822,822,822,822,822,\n     *822,821,821,820/\n      DATA (Md07(i),i=17065,17091) /824,823,824,824,824,823,823,823,\n     *823,823,823,823,823,823,823,823,823,823,823,823,822,822,821,\n     *821,820,820,819/\n      DATA (Md07(i),i=17092,17119) /825,826,826,826,826,826,826,825,\n     *825,825,825,824,824,824,824,824,824,824,823,823,822,822,821,\n     *820,820,819,818,817/\n      DATA (Md07(i),i=17120,17148) /827,827,828,828,828,827,827,826,\n     *826,826,826,825,825,825,825,825,824,824,823,822,822,821,820,\n     *820,819,818,817,816,815/\n      DATA (Md07(i),i=17149,17178) /829,829,829,829,829,829,828,828,\n     *827,827,827,827,826,826,825,825,824,823,823,822,822,820,820,\n     *819,818,817,816,815,814,813/\n      DATA (Md07(i),i=17179,17209) /830,830,831,830,830,830,829,828,\n     *828,828,827,827,826,826,825,824,823,823,822,821,820,819,818,\n     *817,816,815,814,813,812,811,810/\n      DATA (Md07(i),i=17210,17240) /831,832,832,831,831,830,830,829,\n     *829,828,827,827,826,825,824,823,823,822,821,820,819,818,817,\n     *816,815,814,813,812,811,809,808/\n      DATA (Md07(i),i=17241,17272) /833,833,832,832,831,831,830,829,\n     *829,828,827,826,825,824,824,822,822,821,820,819,818,816,815,\n     *814,813,812,811,810,809,808,807,806/\n      DATA (Md07(i),i=17273,17304) /833,833,833,832,831,830,829,828,\n     *828,827,826,825,824,822,821,821,819,818,817,816,815,814,813,\n     *812,811,810,808,807,806,805,804,803/\n      DATA (Md07(i),i=17305,17337) /834,834,833,832,831,830,829,828,\n     *827,826,825,824,823,821,820,819,818,817,816,815,814,812,811,\n     *810,809,808,807,805,804,803,802,800,799/\n      DATA (Md07(i),i=17338,17369) /833,832,831,830,829,828,827,826,\n     *825,824,823,822,820,819,818,817,816,814,813,812,811,810,808,\n     *807,806,805,804,802,801,800,798,797/\n\n      DATA (Add07(11,i,1),i=5,45) /0,0,0,0,16705,16707,16712,16719,\n     *16727,16736,16745,16756,16769,16783,16799,16816,16833,16851,\n     *16871,16892,16914,16937,16961,16986,17012,17038,17065,17092,\n     *17120,17149,17179,17210,17241,17273,17305,17338,0,0,0,0,0/\n\n      DATA (Add07(11,i,2),i=5,45) /0,0,0,0,10,9,7,7,7,8,8,8,9,9,10,\n     *10,11,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,29,30,\n     *32,0,0,0,0,0/\n\n      DATA (Add07(11,i,3),i=5,45) /0,0,0,0,11,13,13,14,15,16,18,20,\n     *22,24,26,26,28,30,32,34,36,38,40,42,43,45,47,49,51,53,55,56,\n     *58,60,62,63,0,0,0,0,0/\n\nc     Erle....................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=17370,17372) /981,940,900/\n      DATA (Md07(i),i=17373,17376) /596,784,692,624/\n      DATA (Md07(i),i=17377,17382) /408,841,759,699,668,626/\n      DATA (Md07(i),i=17383,17389) /871,807,748,707,690,696,690/\n      DATA (Md07(i),i=17390,17397) /908,831,785,745,734,737,744,750/\n      DATA (Md07(i),i=17398,17406) /919,854,811,778,763,767,772,777,\n     *778/\n      DATA (Md07(i),i=17407,17417) /937,871,832,803,787,790,792,794,\n     *796,794,783/\n      DATA (Md07(i),i=17418,17431) /935,882,850,816,806,806,808,808,\n     *808,805,797,790,786,786/\n      DATA (Md07(i),i=17432,17450) /941,890,860,833,820,820,821,820,\n     *817,813,809,804,798,793,788,782,777,771,766/\n      DATA (Md07(i),i=17451,17475) /947,909,864,852,842,831,830,833,\n     *829,825,819,815,808,802,797,795,794,792,788,787,783,779,776,\n     *771,767/\n      DATA (Md07(i),i=17476,17499) /869,856,840,843,843,839,833,829,\n     *825,817,813,810,805,804,803,799,794,791,789,788,788,788,788,\n     *788/\n      DATA (Md07(i),i=17500,17524) /856,855,853,853,848,841,833,828,\n     *821,817,814,813,810,807,804,800,796,794,793,792,790,787,785,\n     *782,778/\n      DATA (Md07(i),i=17525,17547) /863,861,854,847,833,828,823,818,\n     *817,814,811,808,805,803,799,797,795,794,792,789,786,783,779/\n      DATA (Md07(i),i=17548,17570) /860,860,852,834,828,823,820,817,\n     *814,810,809,806,804,801,799,796,795,793,790,787,784,781,779/\n      DATA (Md07(i),i=17571,17593) /861,857,849,834,828,823,819,816,\n     *813,810,809,806,804,801,800,797,795,794,791,788,785,783,782/\n      DATA (Md07(i),i=17594,17617) /854,847,834,828,823,819,816,812,\n     *810,808,806,804,802,800,798,796,794,792,789,787,785,784,782,\n     *780/\n      DATA (Md07(i),i=17618,17640) /835,829,824,819,815,812,810,807,\n     *806,804,803,801,798,796,794,792,790,789,787,786,784,782,781/\n      DATA (Md07(i),i=17641,17664) /835,829,824,819,816,813,811,808,\n     *806,805,803,800,799,797,794,792,791,790,788,787,785,783,782,\n     *781/\n      DATA (Md07(i),i=17665,17689) /836,830,826,821,817,814,812,809,\n     *807,805,803,801,799,797,795,793,793,791,790,788,787,785,784,\n     *782,781/\n      DATA (Md07(i),i=17690,17714) /831,827,823,819,816,813,810,808,\n     *806,804,802,800,798,797,795,794,793,792,790,789,787,786,784,\n     *783,781/\n      DATA (Md07(i),i=17715,17740) /829,826,821,817,814,812,809,807,\n     *805,804,801,800,798,797,796,795,794,792,791,790,788,787,785,\n     *784,782,780/\n      DATA (Md07(i),i=17741,17765) /828,823,819,816,813,810,809,808,\n     *806,804,802,800,800,799,798,796,795,794,793,791,790,788,787,\n     *785,784/\n      DATA (Md07(i),i=17766,17789) /826,822,819,816,812,811,810,809,\n     *807,804,803,802,801,800,799,798,797,796,795,793,792,791,789,\n     *788/\n\n      DATA (Add07(12,i,1),i=5,45) /0,0,0,17370,17373,17377,17383,17390,\n     *17398,17407,17418,17432,17451,17476,17500,17525,17548,17571,\n     *17594,17618,17641,17665,17690,17715,17741,17766,0,0,0,0,0,0,\n     *0,0,0,0,0,0,0,0,0/\n\n      DATA (Add07(12,i,2),i=5,45) /0,0,0,7,7,7,8,8,8,8,8,8,8,11,12,\n     *14,15,15,16,18,18,18,19,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n     *0/\n\n      DATA (Add07(12,i,3),i=5,45) /0,0,0,9,10,12,14,15,16,18,21,26,\n     *32,34,36,36,37,37,39,40,41,42,43,45,45,45,0,0,0,0,0,0,0,0,0,\n     *0,0,0,0,0,0/\n\nc     Birke...................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=17790,17791) /431,400/\n      DATA (Md07(i),i=17792,17795) /402,400,400,400/\n      DATA (Md07(i),i=17796,17796) /494/\n      DATA (Md07(i),i=17797,17801) /953,678,699,502,522/\n      DATA (Md07(i),i=17802,17807) /914,666,677,676,661,643/\n      DATA (Md07(i),i=17808,17830) /891,849,816,786,759,843,907,847,\n     *791,739,693,649,662,619,579,583,583,579,574,565,556,544,532/\n      DATA (Md07(i),i=17831,17852) /823,785,755,828,786,835,785,735,\n     *691,649,662,669,627,627,624,618,609,599,588,576,563,570/\n      DATA (Md07(i),i=17853,17879) /933,761,732,787,748,784,738,694,\n     *710,718,719,715,671,664,655,644,632,619,605,591,596,599,582,\n     *582,579,576,571/\n      DATA (Md07(i),i=17880,17906) /906,850,798,840,791,815,765,718,\n     *725,727,722,715,705,693,679,665,650,635,619,622,623,622,603,\n     *600,595,589,583/\n      DATA (Md07(i),i=17907,17942) /823,775,805,826,839,787,738,737,\n     *733,725,715,702,689,674,659,665,647,649,630,629,625,621,615,\n     *608,601,604,595,595,594,593,590,586,582,584,578,579/\n      DATA (Md07(i),i=17943,17978) /890,829,781,795,802,754,753,748,\n     *740,728,745,728,711,693,675,677,658,657,653,648,642,635,628,\n     *631,621,621,620,618,615,611,614,609,610,603,602,601/\n      DATA (Md07(i),i=17979,18014) /864,807,818,769,774,772,767,757,\n     *744,731,742,724,706,709,689,688,684,679,673,666,657,648,650,\n     *640,639,637,634,630,633,628,629,622,621,619,617,614/\n      DATA (Md07(i),i=18015,18050) /914,850,850,799,795,788,778,765,\n     *750,733,741,722,703,703,701,697,691,685,676,668,670,660,659,\n     *657,654,650,646,648,642,642,641,639,637,633,630,625/\n      DATA (Md07(i),i=18051,18085) /888,881,822,813,802,787,771,782,\n     *761,763,741,720,717,712,705,698,689,680,670,671,670,667,664,\n     *660,662,656,657,656,655,652,649,645,646,641,641/\n      DATA (Md07(i),i=18086,18119) /906,843,829,812,795,777,784,761,\n     *761,738,734,729,721,713,704,694,695,683,682,679,675,678,672,\n     *673,673,671,669,666,662,658,658,653,652,650/\n      DATA (Md07(i),i=18120,18152) /860,842,791,773,782,761,762,759,\n     *754,747,739,730,720,709,709,697,695,691,687,690,683,684,683,\n     *681,678,675,670,671,671,670,668,666,663/\n      DATA (Md07(i),i=18153,18184) /821,802,781,786,786,783,776,768,\n     *759,748,737,726,714,712,709,705,700,694,695,695,694,691,688,\n     *684,685,680,679,678,676,673,670,670/\n      DATA (Md07(i),i=18185,18215) /811,789,790,788,782,775,765,755,\n     *743,732,731,729,725,720,715,708,709,708,706,703,699,695,690,\n     *690,689,687,685,681,682,682,681/\n      DATA (Md07(i),i=18216,18245) /795,794,789,782,773,762,751,752,\n     *738,736,733,728,722,715,715,714,712,709,705,701,701,701,699,\n     *697,694,691,691,690,689,687/\n      DATA (Md07(i),i=18246,18274) /818,809,799,787,774,761,759,745,\n     *741,736,730,723,715,715,713,710,712,708,708,707,705,703,700,\n     *701,700,699,698,695,696/\n      DATA (Md07(i),i=18275,18302) /809,797,784,771,757,755,751,745,\n     *739,732,732,723,721,718,714,715,715,714,712,710,711,707,706,\n     *705,703,704,701,701/\n      DATA (Md07(i),i=18303,18328) /783,768,754,751,746,740,733,734,\n     *733,730,727,723,724,724,722,720,717,718,718,717,716,713,711,\n     *711,707,706/\n      DATA (Md07(i),i=18329,18351) /758,751,744,744,743,741,737,733,\n     *733,733,731,729,726,726,726,725,723,721,718,718,717,715,713/\n      DATA (Md07(i),i=18352,18372) /748,747,745,741,737,738,737,736,\n     *733,730,731,730,729,727,725,725,725,724,722,720,718/\n\n      DATA (Add07(13,i,1),i=5,45) /0,0,17790,17792,17796,17797,17802,\n     *17808,17831,17853,17880,17907,17943,17979,18015,18051,18086,\n     *18120,18153,18185,18216,18246,18275,18303,18329,18352,0,0,0,\n     *0,0,0,0,0,0,0,0,0,0,0,0/\n\n      DATA (Add07(13,i,2),i=5,45) /0,0,7,7,11,8,8,8,9,9,9,10,10,10,\n     *10,11,12,13,14,15,16,17,18,20,23,25,0,0,0,0,0,0,0,0,0,0,0,0,\n     *0,0,0/\n\n      DATA (Add07(13,i,3),i=5,45) /0,0,8,10,11,12,13,30,30,35,35,45,\n     *45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,\n     *0,0,0,0,0,0/\n\nc     Pappel..................................(?nderung: 11.12.90 Kublin)\n\n      DATA (Md07(i),i=18373,18381) /911,870,830,790,750,710,670,630,\n     *590/\n      DATA (Md07(i),i=18382,18389) /456,420,408,400,400,400,400,400/\n      DATA (Md07(i),i=18390,18400) /616,591,549,519,477,443,416,400,\n     *400,400,400/\n      DATA (Md07(i),i=18401,18414) /813,676,652,604,586,557,520,520,\n     *490,479,464,448,436,427/\n      DATA (Md07(i),i=18415,18429) /825,737,679,656,626,610,585,573,\n     *559,542,529,521,509,500,495/\n      DATA (Md07(i),i=18430,18446) /853,762,709,680,667,643,624,612,\n     *598,591,579,571,559,555,543,538,530/\n      DATA (Md07(i),i=18447,18465) /872,777,733,706,688,666,649,649,\n     *635,621,616,606,599,589,585,578,570,565,559/\n      DATA (Md07(i),i=18466,18485) /872,789,752,717,713,693,679,677,\n     *658,649,643,634,626,620,614,607,603,597,592,585/\n      DATA (Md07(i),i=18486,18507) /882,800,762,734,722,714,696,693,\n     *681,672,665,656,651,644,637,632,627,622,618,612,607,603/\n      DATA (Md07(i),i=18508,18531) /896,807,769,743,738,725,714,712,\n     *701,691,683,677,671,663,659,652,649,643,640,635,630,626,622,\n     *618/\n      DATA (Md07(i),i=18532,18557) /892,815,778,755,744,740,730,727,\n     *716,707,699,692,689,683,677,672,667,662,658,654,650,646,642,\n     *637,633,630/\n      DATA (Md07(i),i=18558,18585) /897,820,786,758,757,752,743,740,\n     *729,724,715,708,703,697,693,687,683,679,675,670,667,663,659,\n     *656,652,648,645,641/\n      DATA (Md07(i),i=18586,18616) /900,824,786,770,767,762,754,752,\n     *745,735,730,721,716,711,706,702,699,694,691,686,683,679,675,\n     *671,668,664,661,659,655,652,648/\n      DATA (Md07(i),i=18617,18650) /899,829,796,778,776,772,764,765,\n     *754,748,739,734,730,724,720,714,711,707,704,700,697,694,689,\n     *686,684,680,677,674,670,668,665,661,658,655/\n      DATA (Md07(i),i=18651,18686) /905,829,802,783,784,780,773,773,\n     *763,757,750,746,740,735,731,728,723,719,716,713,709,706,703,\n     *700,697,694,691,688,685,682,680,676,674,671,668,665/\n      DATA (Md07(i),i=18687,18724) /913,832,805,791,790,787,783,780,\n     *773,767,760,755,751,745,742,738,734,731,728,724,722,718,715,\n     *713,709,707,704,701,699,695,693,690,687,685,683,680,677,675/\n      DATA (Md07(i),i=18725,18763) /839,804,794,797,793,790,790,782,\n     *776,771,766,760,756,752,749,745,741,738,735,733,729,726,724,\n     *722,719,716,714,710,708,706,703,701,698,696,693,691,688,686,\n     *684/\n      DATA (Md07(i),i=18764,18804) /813,800,803,802,795,798,788,784,\n     *779,773,769,766,761,758,755,752,748,745,743,740,738,734,732,\n     *730,727,724,722,720,718,715,713,710,708,706,704,701,699,697,\n     *695,693,690/\n      DATA (Md07(i),i=18805,18848) /809,810,808,804,802,796,791,786,\n     *782,779,773,770,767,763,760,758,755,752,750,747,745,743,740,\n     *738,736,733,731,729,726,724,722,720,718,716,713,711,709,707,\n     *705,703,701,699,697,695/\n      DATA (Md07(i),i=18849,18938) /814,816,815,812,810,803,798,794,\n     *790,786,781,779,775,772,769,767,765,762,759,757,755,752,750,\n     *748,746,743,741,739,737,735,733,731,729,727,725,723,721,719,\n     *717,715,713,711,709,708,706,704,702,700,698,696,694,692,691,\n     *689,687,685,683,682,680,678,676,674,672,671,669,667,665,664,\n     *662,660,658,656,655,653,651,649,648,646,644,642,641,639,637,\n     *635,634,632,630,628,627,625/\n      DATA (Md07(i),i=18939,19027) /823,823,815,816,809,806,802,797,\n     *794,790,786,784,781,777,775,773,770,768,766,763,761,760,757,\n     *755,753,751,749,747,745,744,742,739,738,736,734,732,730,729,\n     *727,725,723,721,719,718,716,714,712,711,709,707,705,704,702,\n     *700,699,697,695,694,692,690,688,687,685,683,682,680,679,677,\n     *675,674,672,670,669,667,665,664,662,660,659,657,655,654,652,\n     *651,649,647,646,644,642/\n      DATA (Md07(i),i=19028,19115) /825,822,822,817,812,807,805,800,\n     *797,793,790,788,786,783,781,778,776,774,772,770,768,766,764,\n     *763,761,759,757,755,753,751,750,748,746,744,743,741,739,737,\n     *736,734,733,731,729,728,726,724,723,721,719,718,716,714,713,\n     *711,710,708,707,705,704,702,700,699,697,696,694,693,691,689,\n     *688,686,685,683,682,680,679,677,676,674,673,671,670,668,667,\n     *665,664,662,661,659/\n      DATA (Md07(i),i=19116,19201) /828,822,818,813,810,806,804,801,\n     *797,795,792,791,788,786,784,782,781,778,776,775,773,771,769,\n     *768,766,764,763,761,759,757,756,754,753,751,750,748,746,745,\n     *743,742,740,739,737,735,734,733,731,729,728,726,725,723,722,\n     *721,719,718,716,715,713,712,710,709,707,706,705,703,702,700,\n     *699,697,696,695,693,692,690,689,687,686,685,683,682,680,679,\n     *678,676,675/\n      DATA (Md07(i),i=19202,19286) /827,823,819,816,813,810,808,805,\n     *802,800,797,796,794,792,790,788,786,785,783,781,780,778,776,\n     *775,773,771,770,768,767,765,764,762,761,759,758,756,755,753,\n     *752,751,749,748,746,745,743,742,741,739,738,736,735,734,732,\n     *731,730,728,727,725,724,723,721,720,719,717,716,715,713,712,\n     *711,709,708,707,705,704,703,702,700,699,698,696,695,694,692,\n     *691,690/\n      DATA (Md07(i),i=19287,19369) /826,822,820,817,814,812,809,807,\n     *804,802,801,799,797,795,794,792,791,789,787,786,784,783,781,\n     *780,778,777,776,774,773,771,770,769,767,766,765,763,762,760,\n     *759,758,757,755,754,752,751,750,749,747,746,745,744,742,741,\n     *740,738,737,736,735,733,732,731,730,728,727,726,725,724,722,\n     *721,720,719,717,716,715,714,713,711,710,709,708,707,705,704/\n      DATA (Md07(i),i=19370,19450) /826,823,820,817,815,814,812,810,\n     *808,806,804,803,801,800,798,797,795,794,792,791,790,788,787,\n     *785,784,783,781,780,779,778,776,775,774,773,771,770,769,767,\n     *766,765,764,763,761,760,759,758,757,755,754,753,752,751,750,\n     *748,747,746,745,744,743,741,740,739,738,737,736,735,733,732,\n     *731,730,729,728,727,726,724,723,722,721,720,719,718/\n      DATA (Md07(i),i=19451,19529) /826,824,822,820,818,816,815,813,\n     *811,809,808,807,805,804,802,801,800,799,797,796,795,794,792,\n     *791,790,789,787,786,785,784,783,781,780,779,778,777,776,774,\n     *773,772,771,770,769,768,767,766,764,763,762,761,760,759,758,\n     *757,756,755,754,753,752,751,750,749,747,746,745,744,743,742,\n     *741,740,739,738,737,736,735,734,733,732,731/\n      DATA (Md07(i),i=19530,19607) /830,828,826,824,822,821,819,818,\n     *816,815,814,812,811,809,808,807,806,805,804,802,801,800,799,\n     *798,797,796,794,793,792,791,790,789,788,787,786,785,784,783,\n     *782,781,779,778,777,776,775,774,773,772,771,770,769,768,767,\n     *766,765,764,763,762,762,761,760,759,758,757,756,755,754,753,\n     *752,751,750,749,748,747,746,745,744,743/\n      DATA (Md07(i),i=19608,19683) /832,830,828,827,826,824,823,821,\n     *820,819,818,817,815,814,813,812,811,810,809,808,806,805,804,\n     *803,802,801,800,799,798,797,796,795,794,793,792,791,790,789,\n     *789,788,787,786,785,784,783,782,781,780,779,778,777,776,776,\n     *775,774,773,772,771,770,769,768,768,767,766,765,764,763,762,\n     *761,761,760,759,758,757,756,755/\n      DATA (Md07(i),i=19684,19757) /834,833,832,830,829,828,826,825,\n     *824,823,822,821,820,819,818,817,816,815,814,813,812,811,810,\n     *809,808,807,806,805,804,803,803,802,801,800,799,798,797,796,\n     *796,795,794,793,792,791,790,789,789,788,787,786,785,784,784,\n     *783,782,781,780,780,779,778,777,776,776,775,774,773,772,772,\n     *771,770,769,768,768,767/\n      DATA (Md07(i),i=19758,19830) /839,837,836,835,834,833,832,831,\n     *829,829,828,826,825,825,824,823,822,821,820,819,818,817,816,\n     *816,815,814,813,812,811,811,810,809,808,807,806,806,805,804,\n     *803,802,802,801,800,799,799,798,797,796,796,795,794,793,792,\n     *792,791,790,789,789,788,787,787,786,785,784,784,783,782,781,\n     *781,780,779,779,778/\n      DATA (Md07(i),i=19831,19901) /842,841,840,839,838,837,836,835,\n     *834,833,832,831,830,829,829,828,827,826,825,824,824,823,822,\n     *821,821,820,819,818,818,817,816,815,815,814,813,812,812,811,\n     *810,809,809,808,807,807,806,805,804,804,803,802,802,801,800,\n     *800,799,798,798,797,796,796,795,794,794,793,792,792,791,790,\n     *790,789,788/\n      DATA (Md07(i),i=19902,19970) /846,845,844,843,842,841,840,839,\n     *838,838,837,836,835,834,834,833,832,831,831,830,829,829,828,\n     *827,826,826,825,824,824,823,822,822,821,820,820,819,818,818,\n     *817,816,816,815,814,814,813,813,812,811,811,810,809,809,808,\n     *808,807,806,806,805,805,804,803,803,802,802,801,800,800,799,\n     *799/\n      DATA (Md07(i),i=19971,20037) /849,848,848,847,846,845,845,844,\n     *843,842,842,841,840,840,839,838,837,837,836,836,835,834,834,\n     *833,832,832,831,830,830,829,829,828,827,827,826,826,825,824,\n     *824,823,823,822,822,821,820,820,819,819,818,818,817,817,816,\n     *815,815,814,814,813,813,812,812,811,811,810,809,809,808/\n      DATA (Md07(i),i=20038,20102) /853,853,852,851,850,850,849,848,\n     *848,847,847,846,845,845,844,844,843,842,842,841,841,840,839,\n     *839,838,838,837,837,836,835,835,834,834,833,833,832,832,831,\n     *831,830,830,829,829,828,828,827,827,826,826,825,825,824,824,\n     *823,823,822,822,821,821,820,820,819,819,818,818/\n      DATA (Md07(i),i=20103,20165) /858,857,856,856,855,854,854,853,\n     *853,852,852,851,851,850,849,849,848,848,847,847,846,846,845,\n     *845,844,844,843,843,842,842,841,841,840,840,839,839,838,838,\n     *838,837,837,836,836,835,835,834,834,834,833,833,832,832,831,\n     *831,831,830,830,829,829,828,828,828,827/\n      DATA (Md07(i),i=20166,20226) /862,862,861,860,860,859,859,858,\n     *858,857,857,856,856,855,855,854,854,853,853,852,852,852,851,\n     *851,850,850,849,849,849,848,848,847,847,846,846,846,845,845,\n     *844,844,844,843,843,842,842,842,841,841,840,840,840,839,839,\n     *839,838,838,838,837,837,836,836/\n      DATA (Md07(i),i=20227,20284) /866,866,865,865,864,864,863,863,\n     *862,862,861,861,861,860,860,859,859,859,858,858,857,857,857,\n     *856,856,856,855,855,854,854,854,853,853,853,852,852,852,851,\n     *851,851,850,850,850,849,849,849,848,848,848,847,847,847,846,\n     *846,846,845,845,845/\n      DATA (Md07(i),i=20285,20333) /868,868,867,867,866,866,866,865,\n     *865,865,864,864,864,863,863,863,862,862,862,861,861,861,860,\n     *860,860,860,859,859,859,858,858,858,857,857,857,857,856,856,\n     *856,855,855,855,855,854,854,854,854,853,853/\n\n      DATA (Add07(14,i,1),i=5,45) /0,0,18373,18382,18390,18401,18415,\n     *18430,18447,18466,18486,18508,18532,18558,18586,18617,18651,\n     *18687,18725,18764,18805,18849,18939,19028,19116,19202,19287,\n     *19370,19451,19530,19608,19684,19758,19831,19902,19971,20038,\n     *20103,20166,20227,20285/\n\n      DATA (Add07(14,i,2),i=5,45) /0,0,7,10,9,8,8,8,8,8,8,8,8,8,8,\n     *8,8,8,9,10,11,11,12,13,15,16,18,20,22,23,25,27,28,30,32,34,36,\n     *38,40,43,52/\n\n      DATA (Add07(14,i,3),i=5,45) /0,0,15,17,19,21,22,24,26,27,29,\n     *31,33,35,38,41,43,45,47,50,54,100,100,100,100,100,100,100,100,\n     *100,100,100,100,100,100,100,100,100,100,100,100/\n\n      END\n",
    "created" : 1516117236873.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3670511648",
    "id" : "22AE0880",
    "lastKnownWriteTime" : 1516117755,
    "last_content_update" : -2147483648,
    "path" : "H:/FVA-Projekte/P01479_HE_VSB/Programme/Eigenentwicklung/RCode/rBDATPRO/src/BDATpro.f",
    "project_path" : "src/BDATpro.f",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "text"
}